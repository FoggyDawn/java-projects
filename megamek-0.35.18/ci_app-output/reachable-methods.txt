<gd.xml.ParseException: void <init>(java.lang.String)>
<gd.xml.XMLParser: boolean isFirstNameChar(char)>
<gd.xml.XMLParser: boolean isQuote(char)>
<gd.xml.XMLParser: boolean isWhite(char)>
<gd.xml.XMLParser: boolean parseExternal(java.lang.String[])>
<gd.xml.XMLParser: boolean readTagClose()>
<gd.xml.XMLParser: char readCharacterRef()>
<gd.xml.XMLParser: java.lang.String readAttrValue()>
<gd.xml.XMLParser: java.lang.String readChars(int)>
<gd.xml.XMLParser: java.lang.String readName()>
<gd.xml.XMLParser: java.lang.String readParens(boolean)>
<gd.xml.XMLParser: java.lang.String readPubSysID(boolean)>
<gd.xml.XMLParser: java.lang.String readReference()>
<gd.xml.XMLParser: java.lang.String readTag()>
<gd.xml.XMLParser: java.lang.String[] readExternalID(boolean)>
<gd.xml.XMLParser: java.util.Hashtable readAttributes()>
<gd.xml.XMLParser: void <clinit>()>
<gd.xml.XMLParser: void <init>()>
<gd.xml.XMLParser: void checkPEReference()>
<gd.xml.XMLParser: void parseXML(gd.xml.XMLResponder)>
<gd.xml.XMLParser: void read()>
<gd.xml.XMLParser: void readAttlistTag()>
<gd.xml.XMLParser: void readBangTag(boolean)>
<gd.xml.XMLParser: void readCharData()>
<gd.xml.XMLParser: void readClosingTag()>
<gd.xml.XMLParser: void readCommentOrCDATA(char)>
<gd.xml.XMLParser: void readDTD()>
<gd.xml.XMLParser: void readDTDPart()>
<gd.xml.XMLParser: void readDoctypeTag()>
<gd.xml.XMLParser: void readDocument()>
<gd.xml.XMLParser: void readElementTag()>
<gd.xml.XMLParser: void readEntityTag()>
<gd.xml.XMLParser: void readNotationTag()>
<gd.xml.XMLParser: void readPITag()>
<gd.xml.XMLParser: void readWhite()>
<gd.xml.XMLParser: void readXMLTag()>
<gd.xml.XMLReader: int read()>
<gd.xml.XMLReader: int underlyingRead()>
<gd.xml.XMLReader: void <init>(java.io.InputStream)>
<gd.xml.XMLReader: void close()>
<gd.xml.XMLReader: void push(java.lang.String)>
<gd.xml.XMLReader: void setEncoding(java.lang.String)>
<gd.xml.tiny.ParseNode: java.lang.String getName()>
<gd.xml.tiny.ParseNode: java.util.Enumeration elements()>
<gd.xml.tiny.ParseNode: void <clinit>()>
<gd.xml.tiny.ParseNode: void <init>(int)>
<gd.xml.tiny.ParseNode: void addNode(gd.xml.tiny.ParseNode)>
<gd.xml.tiny.ParseNode: void setAttributes(java.util.Hashtable)>
<gd.xml.tiny.ParseNode: void setContent(java.lang.String)>
<gd.xml.tiny.ParseNode: void setName(java.lang.String)>
<gd.xml.tiny.TinyParser: gd.xml.tiny.ParsedXML parseXML(java.io.InputStream)>
<gd.xml.tiny.TinyResponder: gd.xml.tiny.ParsedXML getRootNode()>
<gd.xml.tiny.TinyResponder: java.io.InputStream getDocumentStream()>
<gd.xml.tiny.TinyResponder: java.io.InputStream resolveDTDEntity(java.lang.String,java.lang.String,java.lang.String)>
<gd.xml.tiny.TinyResponder: java.io.InputStream resolveExternalEntity(java.lang.String,java.lang.String,java.lang.String)>
<gd.xml.tiny.TinyResponder: void <init>(java.io.InputStream)>
<gd.xml.tiny.TinyResponder: void recordAttlistDeclaration(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String)>
<gd.xml.tiny.TinyResponder: void recordCharData(java.lang.String)>
<gd.xml.tiny.TinyResponder: void recordComment(java.lang.String)>
<gd.xml.tiny.TinyResponder: void recordDocEnd()>
<gd.xml.tiny.TinyResponder: void recordDocStart()>
<gd.xml.tiny.TinyResponder: void recordDoctypeDeclaration(java.lang.String,java.lang.String,java.lang.String)>
<gd.xml.tiny.TinyResponder: void recordElementDeclaration(java.lang.String,java.lang.String)>
<gd.xml.tiny.TinyResponder: void recordElementEnd(java.lang.String)>
<gd.xml.tiny.TinyResponder: void recordElementStart(java.lang.String,java.util.Hashtable)>
<gd.xml.tiny.TinyResponder: void recordEntityDeclaration(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<gd.xml.tiny.TinyResponder: void recordNotationDeclaration(java.lang.String,java.lang.String,java.lang.String)>
<gd.xml.tiny.TinyResponder: void recordPI(java.lang.String,java.lang.String)>
<java.awt.Color: int getBlue()>
<java.awt.Color: int getGreen()>
<java.awt.Color: int getRGB()>
<java.awt.Color: int getRed()>
<java.awt.Color: void <clinit>()>
<java.awt.Color: void <init>(int,boolean)>
<java.awt.Color: void <init>(int,int,int)>
<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>
<java.io.BufferedReader: boolean ready()>
<java.io.BufferedReader: java.lang.String readLine()>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.BufferedReader: void close()>
<java.io.BufferedWriter: void <init>(java.io.Writer)>
<java.io.BufferedWriter: void close()>
<java.io.BufferedWriter: void flush()>
<java.io.BufferedWriter: void newLine()>
<java.io.DataInputStream: byte readByte()>
<java.io.DataInputStream: int read(byte[])>
<java.io.DataInputStream: int readInt()>
<java.io.DataInputStream: int skipBytes(int)>
<java.io.DataInputStream: void <init>(java.io.InputStream)>
<java.io.File: boolean exists()>
<java.io.File: boolean isDirectory()>
<java.io.File: boolean mkdir()>
<java.io.File: java.lang.String getParent()>
<java.io.File: java.lang.String toString()>
<java.io.File: java.lang.String[] list()>
<java.io.File: long lastModified()>
<java.io.File: void <clinit>()>
<java.io.File: void <init>(java.io.File,java.lang.String)>
<java.io.File: void <init>(java.lang.String)>
<java.io.File: void <init>(java.lang.String,java.lang.String)>
<java.io.FileInputStream: int read()>
<java.io.FileInputStream: void <init>(java.io.File)>
<java.io.FileInputStream: void <init>(java.lang.String)>
<java.io.FileInputStream: void close()>
<java.io.FileOutputStream: void <init>(java.lang.String)>
<java.io.FileReader: void <init>(java.io.File)>
<java.io.FileReader: void <init>(java.lang.String)>
<java.io.FileWriter: void <init>(java.io.File)>
<java.io.FileWriter: void <init>(java.lang.String)>
<java.io.FilterInputStream: void close()>
<java.io.IOException: void <init>(java.lang.String)>
<java.io.InputStreamReader: void <init>(java.io.InputStream)>
<java.io.ObjectInputStream: java.lang.Object readObject()>
<java.io.ObjectInputStream: void <init>(java.io.InputStream)>
<java.io.ObjectInputStream: void close()>
<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>
<java.io.ObjectOutputStream: void close()>
<java.io.ObjectOutputStream: void flush()>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.PrintStream: void <init>(java.io.OutputStream)>
<java.io.PrintWriter: void <init>(java.io.Writer)>
<java.io.PrintWriter: void println(java.lang.String)>
<java.io.Reader: void <init>()>
<java.io.StreamTokenizer: int nextToken()>
<java.io.StreamTokenizer: void <init>(java.io.Reader)>
<java.io.StreamTokenizer: void commentChar(int)>
<java.io.StreamTokenizer: void eolIsSignificant(boolean)>
<java.io.StreamTokenizer: void quoteChar(int)>
<java.io.StreamTokenizer: void wordChars(int,int)>
<java.io.StringReader: void <init>(java.lang.String)>
<java.io.UnsupportedEncodingException: void <init>()>
<java.io.Writer: void write(java.lang.String)>
<java.lang.AssertionError: void <init>()>
<java.lang.AssertionError: void <init>(java.lang.Object)>
<java.lang.Boolean: boolean booleanValue()>
<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.lang.Boolean: void <clinit>()>
<java.lang.Boolean: void <init>(boolean)>
<java.lang.Boolean: void <init>(java.lang.String)>
<java.lang.Character: boolean isLetter(char)>
<java.lang.Character: boolean isLetterOrDigit(char)>
<java.lang.Class: boolean desiredAssertionStatus()>
<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<java.lang.Class: boolean isInstance(java.lang.Object)>
<java.lang.Class: java.lang.Class forName(java.lang.String)>
<java.lang.Class: java.lang.ClassLoader getClassLoader()>
<java.lang.Class: java.lang.String getName()>
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
<java.lang.Class: void <clinit>()>
<java.lang.Double: double doubleValue()>
<java.lang.Double: int intValue()>
<java.lang.Double: java.lang.Double valueOf(double)>
<java.lang.Double: java.lang.Double valueOf(java.lang.String)>
<java.lang.Double: java.lang.String toString(double)>
<java.lang.Double: void <init>(double)>
<java.lang.Double: void <init>(java.lang.String)>
<java.lang.Enum: int compareTo(java.lang.Enum)>
<java.lang.Enum: int ordinal()>
<java.lang.Enum: java.lang.String toString()>
<java.lang.Enum: void <init>(java.lang.String,int)>
<java.lang.Exception: void <init>(java.lang.String)>
<java.lang.Float: float intBitsToFloat(int)>
<java.lang.Float: java.lang.Float valueOf(java.lang.String)>
<java.lang.Float: java.lang.String toString(float)>
<java.lang.Float: void <init>(java.lang.String)>
<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.lang.Integer: int parseInt(java.lang.String)>
<java.lang.Integer: int parseInt(java.lang.String,int)>
<java.lang.Integer: java.lang.Integer decode(java.lang.String)>
<java.lang.Integer: java.lang.Integer valueOf(int)>
<java.lang.Integer: java.lang.String toHexString(int)>
<java.lang.Integer: java.lang.String toString()>
<java.lang.Integer: java.lang.String toString(int)>
<java.lang.Integer: void <clinit>()>
<java.lang.Integer: void <init>(int)>
<java.lang.Integer: void <init>(java.lang.String)>
<java.lang.Long: int intValue()>
<java.lang.Long: java.lang.String toHexString(long)>
<java.lang.Long: long longValue()>
<java.lang.Long: void <init>(long)>
<java.lang.Math: double abs(double)>
<java.lang.Math: double atan(double)>
<java.lang.Math: double ceil(double)>
<java.lang.Math: double cos(double)>
<java.lang.Math: double exp(double)>
<java.lang.Math: double floor(double)>
<java.lang.Math: double max(double,double)>
<java.lang.Math: double min(double,double)>
<java.lang.Math: double pow(double,double)>
<java.lang.Math: double sqrt(double)>
<java.lang.Math: double tan(double)>
<java.lang.Math: float abs(float)>
<java.lang.Math: float max(float,float)>
<java.lang.Math: int abs(int)>
<java.lang.Math: int max(int,int)>
<java.lang.Math: int min(int,int)>
<java.lang.Math: int round(float)>
<java.lang.Math: long round(double)>
<java.lang.NullPointerException: void <init>()>
<java.lang.Object: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.Class getClass()>
<java.lang.Object: java.lang.Object clone()>
<java.lang.Object: java.lang.String toString()>
<java.lang.Object: void <clinit>()>
<java.lang.Object: void <init>()>
<java.lang.Object: void wait()>
<java.lang.Runtime: java.lang.Runtime getRuntime()>
<java.lang.RuntimeException: void <init>(java.lang.String)>
<java.lang.String: boolean endsWith(java.lang.String)>
<java.lang.String: boolean equals(java.lang.Object)>
<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.lang.String: boolean startsWith(java.lang.String)>
<java.lang.String: boolean startsWith(java.lang.String,int)>
<java.lang.String: int indexOf(java.lang.String)>
<java.lang.String: int lastIndexOf(java.lang.String)>
<java.lang.String: int length()>
<java.lang.String: java.lang.String concat(java.lang.String)>
<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String substring(int)>
<java.lang.String: java.lang.String substring(int,int)>
<java.lang.String: java.lang.String toLowerCase()>
<java.lang.String: java.lang.String toUpperCase()>
<java.lang.String: java.lang.String trim()>
<java.lang.String: java.lang.String valueOf(boolean)>
<java.lang.String: java.lang.String valueOf(char)>
<java.lang.String: java.lang.String valueOf(int)>
<java.lang.String: void <clinit>()>
<java.lang.String: void <init>(byte[])>
<java.lang.String: void <init>(java.lang.String)>
<java.lang.StringBuffer: char charAt(int)>
<java.lang.StringBuffer: int length()>
<java.lang.StringBuffer: java.lang.String toString()>
<java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.lang.StringBuffer: java.lang.StringBuffer append(double)>
<java.lang.StringBuffer: java.lang.StringBuffer append(float)>
<java.lang.StringBuffer: java.lang.StringBuffer append(int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<java.lang.StringBuffer: java.lang.StringBuffer append(long)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>
<java.lang.StringBuffer: void <init>()>
<java.lang.StringBuffer: void <init>(int)>
<java.lang.StringBuffer: void <init>(java.lang.String)>
<java.lang.StringBuffer: void setLength(int)>
<java.lang.StringBuilder: java.lang.String toString()>
<java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.lang.StringBuilder: java.lang.StringBuilder append(double)>
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<java.lang.StringBuilder: void <init>()>
<java.lang.System: java.lang.String getProperty(java.lang.String)>
<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<java.lang.System: void <clinit>()>
<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.lang.System: void exit(int)>
<java.lang.System: void setErr(java.io.PrintStream)>
<java.lang.System: void setOut(java.io.PrintStream)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<java.lang.Thread: void setPriority(int)>
<java.lang.Thread: void start()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>
<java.lang.Throwable: java.lang.String getMessage()>
<java.lang.Throwable: void <init>()>
<java.lang.Throwable: void printStackTrace()>
<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>
<java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.math.BigInteger: java.math.BigInteger valueOf(long)>
<java.net.InetAddress: java.net.InetAddress getLocalHost()>
<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>
<java.net.ServerSocket: int getLocalPort()>
<java.net.ServerSocket: void <init>(int)>
<java.net.ServerSocket: void setSoTimeout(int)>
<java.security.SecureRandom: void <init>()>
<java.text.DateFormat: java.lang.String format(java.util.Date)>
<java.text.DecimalFormat: void <init>(java.lang.String)>
<java.text.NumberFormat: java.lang.String format(double)>
<java.text.NumberFormat: java.lang.String format(long)>
<java.text.NumberFormat: java.text.NumberFormat getInstance()>
<java.text.SimpleDateFormat: void <init>(java.lang.String)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.AbstractCollection: boolean isEmpty()>
<java.util.AbstractList: java.util.Iterator iterator()>
<java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.ArrayList: boolean addAll(java.util.Collection)>
<java.util.ArrayList: boolean contains(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>
<java.util.ArrayList: int size()>
<java.util.ArrayList: java.lang.Object get(int)>
<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>
<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.ArrayList: void <init>()>
<java.util.ArrayList: void <init>(int)>
<java.util.ArrayList: void clear()>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<java.util.Date: java.lang.String toString()>
<java.util.Date: void <init>()>
<java.util.Date: void <init>(long)>
<java.util.EventObject: void <init>(java.lang.Object)>
<java.util.HashMap: boolean containsKey(java.lang.Object)>
<java.util.HashMap: boolean isEmpty()>
<java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.HashMap: java.util.Collection values()>
<java.util.HashMap: java.util.Set keySet()>
<java.util.HashMap: void <init>()>
<java.util.HashMap: void <init>(int)>
<java.util.HashMap: void putAll(java.util.Map)>
<java.util.HashSet: boolean add(java.lang.Object)>
<java.util.HashSet: boolean contains(java.lang.Object)>
<java.util.HashSet: boolean isEmpty()>
<java.util.HashSet: boolean remove(java.lang.Object)>
<java.util.HashSet: int size()>
<java.util.HashSet: java.util.Iterator iterator()>
<java.util.HashSet: void <init>()>
<java.util.HashSet: void <init>(java.util.Collection)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>
<java.util.Hashtable: boolean isEmpty()>
<java.util.Hashtable: int size()>
<java.util.Hashtable: java.lang.Object clone()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
<java.util.Hashtable: java.util.Enumeration elements()>
<java.util.Hashtable: java.util.Enumeration keys()>
<java.util.Hashtable: java.util.Set keySet()>
<java.util.Hashtable: void <init>()>
<java.util.Hashtable: void <init>(int)>
<java.util.Hashtable: void <init>(java.util.Map)>
<java.util.Hashtable: void clear()>
<java.util.LinkedList: void <init>()>
<java.util.LinkedList: void add(int,java.lang.Object)>
<java.util.Locale: java.lang.String getCountry()>
<java.util.Locale: java.lang.String getLanguage()>
<java.util.Locale: java.lang.String getVariant()>
<java.util.Locale: void <clinit>()>
<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<java.util.Properties: java.lang.String getProperty(java.lang.String)>
<java.util.Properties: void <init>()>
<java.util.Properties: void <init>(java.util.Properties)>
<java.util.Properties: void load(java.io.InputStream)>
<java.util.Random: int nextInt(int)>
<java.util.Random: void <init>()>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>
<java.util.Stack: java.lang.Object pop()>
<java.util.Stack: java.lang.Object push(java.lang.Object)>
<java.util.Stack: void <init>()>
<java.util.StringTokenizer: boolean hasMoreTokens()>
<java.util.StringTokenizer: java.lang.String nextToken()>
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>
<java.util.Timer: void <init>()>
<java.util.TreeMap: boolean containsKey(java.lang.Object)>
<java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.TreeMap: java.util.Set keySet()>
<java.util.TreeMap: void <init>()>
<java.util.TreeSet: boolean add(java.lang.Object)>
<java.util.TreeSet: boolean contains(java.lang.Object)>
<java.util.TreeSet: void <init>()>
<java.util.Vector: boolean add(java.lang.Object)>
<java.util.Vector: boolean addAll(java.util.Collection)>
<java.util.Vector: boolean contains(java.lang.Object)>
<java.util.Vector: boolean isEmpty()>
<java.util.Vector: boolean removeElement(java.lang.Object)>
<java.util.Vector: int size()>
<java.util.Vector: java.lang.Object clone()>
<java.util.Vector: java.lang.Object elementAt(int)>
<java.util.Vector: java.lang.Object firstElement()>
<java.util.Vector: java.lang.Object get(int)>
<java.util.Vector: java.lang.Object lastElement()>
<java.util.Vector: java.lang.Object remove(int)>
<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Vector: java.util.Enumeration elements()>
<java.util.Vector: void <init>()>
<java.util.Vector: void <init>(int)>
<java.util.Vector: void <init>(int,int)>
<java.util.Vector: void <init>(java.util.Collection)>
<java.util.Vector: void addElement(java.lang.Object)>
<java.util.Vector: void clear()>
<java.util.Vector: void insertElementAt(java.lang.Object,int)>
<java.util.Vector: void removeAllElements()>
<java.util.Vector: void removeElementAt(int)>
<java.util.Vector: void setElementAt(java.lang.Object,int)>
<java.util.Vector: void setSize(int)>
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>
<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>
<java.util.zip.ZipFile: void <init>(java.lang.String)>
<megamek.MegaMek$CommandLineParser: boolean dedicatedServer()>
<megamek.MegaMek$CommandLineParser: java.lang.String getGuiName()>
<megamek.MegaMek$CommandLineParser: java.lang.String getLogFilename()>
<megamek.MegaMek$CommandLineParser: java.lang.String[] getRestArgs()>
<megamek.MegaMek$CommandLineParser: void <init>(java.lang.String[])>
<megamek.MegaMek$CommandLineParser: void parseGUI()>
<megamek.MegaMek$CommandLineParser: void parseLog()>
<megamek.MegaMek$CommandLineParser: void processEquipmentDb()>
<megamek.MegaMek$CommandLineParser: void processExtendedEquipmentDb()>
<megamek.MegaMek$CommandLineParser: void processRestOfInput()>
<megamek.MegaMek$CommandLineParser: void processUnitBattleForceConverter()>
<megamek.MegaMek$CommandLineParser: void processUnitExporter()>
<megamek.MegaMek$CommandLineParser: void processUnitValidator()>
<megamek.MegaMek$CommandLineParser: void start()>
<megamek.MegaMek: java.lang.String getGUIClassName(java.lang.String)>
<megamek.MegaMek: java.lang.String getMemoryUsed()>
<megamek.MegaMek: megamek.client.ui.IMegaMekGUI getGui(java.lang.String)>
<megamek.MegaMek: void <clinit>()>
<megamek.MegaMek: void displayMessage(java.lang.String)>
<megamek.MegaMek: void displayMessageAndExit(java.lang.String)>
<megamek.MegaMek: void dumpArgs(java.lang.StringBuffer,java.lang.String[])>
<megamek.MegaMek: void main(java.lang.String[])>
<megamek.MegaMek: void redirectOutput(java.lang.String)>
<megamek.MegaMek: void showInfo()>
<megamek.MegaMek: void startDedicatedServer(java.lang.String[])>
<megamek.MegaMek: void startGUI(java.lang.String,java.lang.String[])>
<megamek.client.ui.AWT.GUIPreferences: java.lang.String getColorString(java.awt.Color)>
<megamek.client.ui.AWT.GUIPreferences: megamek.client.ui.AWT.GUIPreferences getInstance()>
<megamek.client.ui.AWT.GUIPreferences: void <clinit>()>
<megamek.client.ui.AWT.GUIPreferences: void <init>()>
<megamek.client.ui.AWT.GUIPreferences: void setDefault(java.lang.String,java.awt.Color)>
<megamek.client.ui.AWT.util.ColorParser: void <clinit>()>
<megamek.client.ui.AWT.util.ColorParser: void <init>()>
<megamek.client.ui.AWT.util.PlayerColors: java.awt.Color getColor(int)>
<megamek.client.ui.AWT.util.PlayerColors: void <clinit>()>
<megamek.client.ui.Messages: java.lang.String getString(java.lang.String)>
<megamek.client.ui.Messages: void <clinit>()>
<megamek.client.ui.swing.MechView: java.lang.String getAmmo()>
<megamek.client.ui.swing.MechView: java.lang.String getArmor()>
<megamek.client.ui.swing.MechView: java.lang.String getBombs()>
<megamek.client.ui.swing.MechView: java.lang.String getFailed()>
<megamek.client.ui.swing.MechView: java.lang.String getInternalAndArmor()>
<megamek.client.ui.swing.MechView: java.lang.String getMechReadout()>
<megamek.client.ui.swing.MechView: java.lang.String getMechReadoutBasic()>
<megamek.client.ui.swing.MechView: java.lang.String getMechReadoutFluff()>
<megamek.client.ui.swing.MechView: java.lang.String getMechReadoutLoadout()>
<megamek.client.ui.swing.MechView: java.lang.String getMisc()>
<megamek.client.ui.swing.MechView: java.lang.String getSIandArmor()>
<megamek.client.ui.swing.MechView: java.lang.String getWeapons(boolean)>
<megamek.client.ui.swing.MechView: java.lang.String renderArmor(int,int)>
<megamek.client.ui.swing.MechView: void <init>(megamek.common.Entity,boolean)>
<megamek.common.ASFBay: java.util.Vector initializeRecoverySlots()>
<megamek.common.ASFBay: void <init>(int,int)>
<megamek.common.Aero$1: void <init>(megamek.common.Aero)>
<megamek.common.Aero: boolean hasCase()>
<megamek.common.Aero: boolean hasModularArmor()>
<megamek.common.Aero: boolean hasRearArmor(int)>
<megamek.common.Aero: boolean isRolled()>
<megamek.common.Aero: boolean isSpheroid()>
<megamek.common.Aero: double getBVTypeModifier()>
<megamek.common.Aero: double getCost(boolean)>
<megamek.common.Aero: int calculateBattleValue()>
<megamek.common.Aero: int calculateBattleValue(boolean,boolean)>
<megamek.common.Aero: int calculateWalk()>
<megamek.common.Aero: int get0SI()>
<megamek.common.Aero: int getArmorType()>
<megamek.common.Aero: int getBombPoints()>
<megamek.common.Aero: int getCapArmor()>
<megamek.common.Aero: int getCockpitType()>
<megamek.common.Aero: int getFuel()>
<megamek.common.Aero: int getHeatCapacity()>
<megamek.common.Aero: int getHeatSinks()>
<megamek.common.Aero: int getHeatType()>
<megamek.common.Aero: int getSI()>
<megamek.common.Aero: int getWalkMP(boolean,boolean)>
<megamek.common.Aero: int locations()>
<megamek.common.Aero: int rollArcs(int)>
<megamek.common.Aero: int[] getBombChoices()>
<megamek.common.Aero: int[] getNoOfSlots()>
<megamek.common.Aero: java.lang.String getCockpitTypeString()>
<megamek.common.Aero: java.lang.String getCockpitTypeString(int)>
<megamek.common.Aero: java.lang.String[] getLocationAbbrs()>
<megamek.common.Aero: java.lang.String[] getLocationNames()>
<megamek.common.Aero: void <clinit>()>
<megamek.common.Aero: void <init>()>
<megamek.common.Aero: void addClanCase()>
<megamek.common.Aero: void addEquipment(megamek.common.Mounted,int,boolean)>
<megamek.common.Aero: void autoSetCapArmor()>
<megamek.common.Aero: void autoSetFatalThresh()>
<megamek.common.Aero: void autoSetInternal()>
<megamek.common.Aero: void autoSetMaxBombPoints()>
<megamek.common.Aero: void autoSetSI()>
<megamek.common.Aero: void autoSetThresh()>
<megamek.common.Aero: void initializeSI(int)>
<megamek.common.Aero: void initializeThresh(int)>
<megamek.common.Aero: void set0SI(int)>
<megamek.common.Aero: void setArmorType(int)>
<megamek.common.Aero: void setCockpitType(int)>
<megamek.common.Aero: void setEngine(megamek.common.Engine)>
<megamek.common.Aero: void setFuel(int)>
<megamek.common.Aero: void setHeatSinks(int)>
<megamek.common.Aero: void setHeatType(int)>
<megamek.common.Aero: void setOmni(boolean)>
<megamek.common.Aero: void setSI(int)>
<megamek.common.Aero: void setSpheroid(boolean)>
<megamek.common.Aero: void setThresh(int,int)>
<megamek.common.Aero: void setVSTOL(boolean)>
<megamek.common.Aero: void updateWeaponGroups()>
<megamek.common.AmmoType$MunitionMutator: void <init>(java.lang.String,int,long,int)>
<megamek.common.AmmoType: java.util.Vector getMunitionsFor(int)>
<megamek.common.AmmoType: megamek.common.AmmoType createAR10BarracudaAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createAR10BarracudaTAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createAR10KillerWhaleAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createAR10KillerWhaleTAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createAR10SantaAnnaAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createAR10WhiteSharkAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createAR10WhiteSharkTAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createAdvancedSRM1Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createAdvancedSRM2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createAdvancedSRM3Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createAdvancedSRM4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createAdvancedSRM5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createAdvancedSRM6Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createAlamoAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBACLLRM1Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBACLLRM2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBACLLRM3Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBACLLRM4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBACLLRM5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBACompactNarcAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBAISLRM1Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBAISLRM2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBAISLRM3Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBAISLRM4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBAISLRM5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBAMicroBombAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBAMineLauncherAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBARL1Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBARL2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBARL3Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBARL4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBARL5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBASRM1Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBASRM2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBASRM3Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBASRM4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBASRM5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBASRM6Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBarracudaAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createBarracudaTAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLAMSAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLAPGaussRifleAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLAPMortar1Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLAPMortar2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLAPMortar4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLAPMortar8Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLATM12Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLATM12ERAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLATM12HEAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLATM3Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLATM3ERAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLATM3HEAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLATM6Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLATM6ERAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLATM6HEAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLATM9Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLATM9ERAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLATM9HEAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLArrowIVAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLBPodAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLCoolantPod()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLFluidGunAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLGaussAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLHAG20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLHAG30Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLHAG40Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLHeavyMGAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLHeavyMGAmmoHalf()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLB10XAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLB10XClusterAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLB20XAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLB20XClusterAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLB2XAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLB2XClusterAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLB5XAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLB5XClusterAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM11Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM12Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM13Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM14Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM15Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM16Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM17Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM18Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM19Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM1Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM3Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM6Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM7Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM8Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRM9Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT11Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT12Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT13Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT14Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT15Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT16Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT17Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT18Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT19Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT1Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT3Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT6Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT7Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT8Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLRT9Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLargeChemicalLaserAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLightMGAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLightMGAmmoHalf()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLongTomAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLLongTomCannonAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLMGAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLMGAmmoHalf()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLMPodAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLMediumChemicalLaserAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLNailRivetGunAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLNailRivetGunAmmoHalf()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLNarcAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLNarcExplosiveAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLPROAC2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLPROAC4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLPROAC8Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLPROHeavyMGAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLPROLightMGAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLPROMGAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLPlasmaCannonAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLRotary10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLRotary20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLRotary2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLRotary5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLSRM1Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLSRM2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLSRM3Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLSRM4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLSRM5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLSRM6Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLSRT1Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLSRT2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLSRT3Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLSRT4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLSRT5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLSRT6Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLSmallChemicalLaserAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLSniperAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLSniperCannonAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLStreakLRM10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLStreakLRM15Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLStreakLRM20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLStreakLRM5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLStreakSRM1Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLStreakSRM2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLStreakSRM3Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLStreakSRM4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLStreakSRM5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLStreakSRM6Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLThumperAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLThumperCannonAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLTorpedoLRM5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLUltra10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLUltra20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLUltra2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLUltra5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createCLVehicleFlamerAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createHeavyNGaussAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createHeavySCCAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISAC10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISAC10iAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISAC15Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISAC20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISAC2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISAC5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISAMSAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISAPMortar1Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISAPMortar2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISAPMortar4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISAPMortar8Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISArrowIVAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISBATaserAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISBPodAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISCoolantPod()>
<megamek.common.AmmoType: megamek.common.AmmoType createISCruiseMissile120Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISCruiseMissile50Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISCruiseMissile70Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISCruiseMissile90Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISEnhancedLRM10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISEnhancedLRM15Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISEnhancedLRM20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISEnhancedLRM5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISExtendedLRM10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISExtendedLRM15Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISExtendedLRM20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISExtendedLRM5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISFluidGunAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISGAC2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISGAC4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISGAC6Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISGAC8Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISGaussAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISHVAC10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISHVAC2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISHVAC5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISHVGaussAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISHawkSRM2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISHawkSRM4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISHawkSRM6Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISHeavyFlamerAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISHeavyMGAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISHeavyMGAmmoHalf()>
<megamek.common.AmmoType: megamek.common.AmmoType createISHeavyRifleAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISIHVGaussAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLAC10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLAC20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLAC2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLAC5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLB10XAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLB10XClusterAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLB20XAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLB20XClusterAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLB2XAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLB2XClusterAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLB5XAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLB5XClusterAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLRM10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLRM15Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLRM20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLRM5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLRT10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLRT15Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLRT20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLRT5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLTGaussAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLightMGAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLightMGAmmoHalf()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLightRifleAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLongTomAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISLongTomCannonAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMGAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMGAmmoHalf()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMML3LRMAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMML3SRMAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMML5LRMAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMML5SRMAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMML7LRMAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMML7SRMAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMML9LRMAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMML9SRMAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMPodAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMRM10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMRM1Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMRM20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMRM2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMRM30Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMRM3Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMRM40Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMRM4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMRM5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMagshotGRAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMediumRifleAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISMekTaserAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISNailRivetGunAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISNailRivetGunAmmoHalf()>
<megamek.common.AmmoType: megamek.common.AmmoType createISNarcAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISNarcExplosiveAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISPXLRM10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISPXLRM15Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISPXLRM20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISPXLRM5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISPlasmaRifleAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISRL10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISRL15Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISRL20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISRailGunAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISRotary10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISRotary20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISRotary2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISRotary5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISSBGaussRifleAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISSRM2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISSRM4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISSRM6Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISSRT2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISSRT4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISSRT6Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISSniperAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISSniperCannonAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISStreakMRM10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISStreakMRM20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISStreakMRM30Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISStreakMRM40Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISStreakSRM2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISStreakSRM4Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISStreakSRM6Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISTHBLB20XAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISTHBLB20XClusterAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISTHBLB2XAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISTHBLB2XClusterAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISTHBLB5XAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISTHBLB5XClusterAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISTHBUltra10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISTHBUltra20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISTHBUltra2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISThumperAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISThumperCannonAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISThunderbolt10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISThunderbolt15Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISThunderbolt20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISThunderbolt5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISUltra10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISUltra20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISUltra2Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISUltra5Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISVehicleFlamerAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISiNarcAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISiNarcECMAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISiNarcExplosiveAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISiNarcHaywireAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createISiNarcNemesisAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createKillerWhaleAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createKillerWhaleTAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createKrakenAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createKrakenMAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createLightNGaussAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createLightSCCAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createMantaRayAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createMediumNGaussAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createMediumSCCAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createNAC10Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createNAC20Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createNAC25Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createNAC30Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createNAC35Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createNAC40Ammo()>
<megamek.common.AmmoType: megamek.common.AmmoType createPiranhaAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createSantaAnnaAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createScreenLauncherAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createStingrayAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createSwordfishAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createWhiteSharkAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType createWhiteSharkTAmmo()>
<megamek.common.AmmoType: megamek.common.AmmoType getOneshotAmmo(megamek.common.Mounted)>
<megamek.common.AmmoType: void <clinit>()>
<megamek.common.AmmoType: void <init>()>
<megamek.common.AmmoType: void createMunitions(java.util.List,java.util.List)>
<megamek.common.AmmoType: void initializeTypes()>
<megamek.common.ArmlessMech: double getArmActuatorCost()>
<megamek.common.ArmlessMech: void <init>(int,int)>
<megamek.common.ArmlessMech: void setInternal(int,int,int,int,int)>
<megamek.common.ArtilleryTracker: void <init>()>
<megamek.common.ArtilleryTracker: void addWeapon(megamek.common.Mounted)>
<megamek.common.BattleArmor: boolean hasActiveProbe()>
<megamek.common.BattleArmor: boolean hasImprovedSensors()>
<megamek.common.BattleArmor: boolean isBurdened()>
<megamek.common.BattleArmor: boolean isFireResistant()>
<megamek.common.BattleArmor: boolean isPlatoon()>
<megamek.common.BattleArmor: boolean loadWeapon(megamek.common.Mounted,megamek.common.Mounted)>
<megamek.common.BattleArmor: double getCost(boolean)>
<megamek.common.BattleArmor: float getWeight()>
<megamek.common.BattleArmor: int calculateBattleValue(boolean,boolean)>
<megamek.common.BattleArmor: int calculateBattleValue(boolean,boolean,boolean)>
<megamek.common.BattleArmor: int getArmor(int,boolean)>
<megamek.common.BattleArmor: int getChassisType()>
<megamek.common.BattleArmor: int getInternal(int)>
<megamek.common.BattleArmor: int getJumpMP(boolean)>
<megamek.common.BattleArmor: int getJumpMP(boolean,boolean)>
<megamek.common.BattleArmor: int getOArmor(int,boolean)>
<megamek.common.BattleArmor: int getOInternal(int)>
<megamek.common.BattleArmor: int getOriginalJumpMP()>
<megamek.common.BattleArmor: int getRunMP(boolean,boolean)>
<megamek.common.BattleArmor: int getShootingStrength()>
<megamek.common.BattleArmor: int getTroopers()>
<megamek.common.BattleArmor: int getWalkMP()>
<megamek.common.BattleArmor: int getWalkMP(boolean,boolean)>
<megamek.common.BattleArmor: int getWeightClass()>
<megamek.common.BattleArmor: int locations()>
<megamek.common.BattleArmor: int[] getNoOfSlots()>
<megamek.common.BattleArmor: java.lang.String[] getLocationAbbrs()>
<megamek.common.BattleArmor: java.lang.String[] getLocationNames()>
<megamek.common.BattleArmor: void <clinit>()>
<megamek.common.BattleArmor: void <init>()>
<megamek.common.BattleArmor: void addEquipment(megamek.common.Mounted,int,boolean)>
<megamek.common.BattleArmor: void autoSetInternal()>
<megamek.common.BattleArmor: void setChassisType(int)>
<megamek.common.BattleArmor: void setCost(int)>
<megamek.common.BattleArmor: void setTrooperWeight(float)>
<megamek.common.BattleArmor: void setTroopers(int)>
<megamek.common.BattleArmor: void setWeightClass(int)>
<megamek.common.BattleArmorBay: void <init>(int,int)>
<megamek.common.BattleArmorHandles: void <clinit>()>
<megamek.common.BattleArmorHandles: void <init>()>
<megamek.common.BattleArmorHandlesTank: void <clinit>()>
<megamek.common.BattleArmorHandlesTank: void <init>()>
<megamek.common.Bay: void <init>()>
<megamek.common.Bay: void <init>(int,int)>
<megamek.common.BipedMech: boolean hasFunctionalArmAES(int)>
<megamek.common.BipedMech: boolean hasFunctionalLegAES()>
<megamek.common.BipedMech: boolean hasShield()>
<megamek.common.BipedMech: double getArmActuatorCost()>
<megamek.common.BipedMech: double getLegActuatorCost()>
<megamek.common.BipedMech: int getNumberOfShields(long)>
<megamek.common.BipedMech: int getRunMP(boolean,boolean)>
<megamek.common.BipedMech: int getRunMPwithoutMASC(boolean,boolean)>
<megamek.common.BipedMech: int getWalkMP(boolean,boolean)>
<megamek.common.BipedMech: int[] getNoOfSlots()>
<megamek.common.BipedMech: java.lang.String[] getLocationAbbrs()>
<megamek.common.BipedMech: java.lang.String[] getLocationNames()>
<megamek.common.BipedMech: void <clinit>()>
<megamek.common.BipedMech: void <init>()>
<megamek.common.BipedMech: void <init>(int,int)>
<megamek.common.BipedMech: void <init>(java.lang.String,java.lang.String)>
<megamek.common.BipedMech: void setInternal(int,int,int,int,int)>
<megamek.common.Board: boolean boardIsSize(java.lang.String,int,int)>
<megamek.common.Board: boolean contains(int,int)>
<megamek.common.Board: boolean contains(megamek.common.Coords)>
<megamek.common.Board: boolean getRoadsAutoExit()>
<megamek.common.Board: boolean inAtmosphere()>
<megamek.common.Board: boolean inSpace()>
<megamek.common.Board: boolean onGround()>
<megamek.common.Board: int getHeight()>
<megamek.common.Board: int getWidth()>
<megamek.common.Board: int indexFor(java.lang.String,int,int)>
<megamek.common.Board: java.util.Enumeration getBuildings()>
<megamek.common.Board: java.util.Enumeration getHexesAtDistance(megamek.common.Coords,int)>
<megamek.common.Board: java.util.Hashtable getSpecialHexDisplayTable()>
<megamek.common.Board: megamek.common.Building getBuildingAt(megamek.common.Coords)>
<megamek.common.Board: megamek.common.IHex getHex(int,int)>
<megamek.common.Board: megamek.common.IHex getHex(megamek.common.Coords)>
<megamek.common.Board: megamek.common.IHex getHexInDir(int,int,int)>
<megamek.common.Board: void <clinit>()>
<megamek.common.Board: void <init>()>
<megamek.common.Board: void <init>(int,int)>
<megamek.common.Board: void <init>(int,int,megamek.common.IHex[])>
<megamek.common.Board: void collapseBuilding(megamek.common.Coords)>
<megamek.common.Board: void initializeAll()>
<megamek.common.Board: void initializeAround(int,int)>
<megamek.common.Board: void initializeHex(int,int)>
<megamek.common.Board: void initializeHex(int,int,boolean)>
<megamek.common.Board: void initializeInDir(int,int,int)>
<megamek.common.Board: void load(java.io.InputStream)>
<megamek.common.Board: void load(java.lang.String)>
<megamek.common.Board: void newData(int,int,megamek.common.IHex[])>
<megamek.common.Board: void processBoardEvent(megamek.common.event.BoardEvent)>
<megamek.common.Board: void setBridgeCF(int)>
<megamek.common.Board: void setHex(int,int,megamek.common.IHex)>
<megamek.common.Board: void setHex(megamek.common.Coords,megamek.common.IHex)>
<megamek.common.Board: void setRoadsAutoExit(boolean)>
<megamek.common.Board: void setType(int)>
<megamek.common.BombType: int getBombCost(int)>
<megamek.common.BombType: java.lang.String getBombInternalName(int)>
<megamek.common.BombType: java.lang.String getBombName(int)>
<megamek.common.BombType: java.lang.String getBombWeaponName(int)>
<megamek.common.BombType: megamek.common.BombType createAAAMissileBomb()>
<megamek.common.BombType: megamek.common.BombType createASEWMissileBomb()>
<megamek.common.BombType: megamek.common.BombType createASMissileBomb()>
<megamek.common.BombType: megamek.common.BombType createAlamoBomb()>
<megamek.common.BombType: megamek.common.BombType createArrowIVBomb()>
<megamek.common.BombType: megamek.common.BombType createArrowIVHomingBomb()>
<megamek.common.BombType: megamek.common.BombType createClusterBomb()>
<megamek.common.BombType: megamek.common.BombType createHighExplosiveBomb()>
<megamek.common.BombType: megamek.common.BombType createInfernoBomb()>
<megamek.common.BombType: megamek.common.BombType createLAAMissileBomb()>
<megamek.common.BombType: megamek.common.BombType createLaserGuidedBomb()>
<megamek.common.BombType: megamek.common.BombType createRocketBomb()>
<megamek.common.BombType: megamek.common.BombType createTAGBomb()>
<megamek.common.BombType: megamek.common.BombType createThunderBomb()>
<megamek.common.BombType: megamek.common.BombType createTorpedoBomb()>
<megamek.common.BombType: void <clinit>()>
<megamek.common.BombType: void <init>()>
<megamek.common.BombType: void initializeTypes()>
<megamek.common.Building: boolean isIn(megamek.common.Coords)>
<megamek.common.Building: int getDefaultCF(int)>
<megamek.common.Building: int getType()>
<megamek.common.Building: java.util.Enumeration getCoords()>
<megamek.common.Building: void <init>(megamek.common.Coords,megamek.common.IBoard,int)>
<megamek.common.Building: void include(megamek.common.Coords,megamek.common.IBoard,int)>
<megamek.common.BuildingTarget: boolean isImmobile()>
<megamek.common.BuildingTarget: int coordsToId(megamek.common.Coords)>
<megamek.common.BuildingTarget: int getElevation()>
<megamek.common.BuildingTarget: int getTargetId()>
<megamek.common.BuildingTarget: int getTargetType()>
<megamek.common.BuildingTarget: java.lang.String getDisplayName()>
<megamek.common.BuildingTarget: megamek.common.Coords getPosition()>
<megamek.common.BuildingTarget: megamek.common.Coords idToCoords(int)>
<megamek.common.BuildingTarget: void <init>(megamek.common.Coords,megamek.common.IBoard,int)>
<megamek.common.BuildingTarget: void init(megamek.common.Coords,megamek.common.IBoard,boolean)>
<megamek.common.CalledShot: void <clinit>()>
<megamek.common.CalledShot: void <init>()>
<megamek.common.CargoBay: void <init>(int,int)>
<megamek.common.ClampMountMech: void <init>()>
<megamek.common.ClampMountTank: void <clinit>()>
<megamek.common.ClampMountTank: void <init>()>
<megamek.common.Compute: boolean canSee(megamek.common.IGame,megamek.common.Entity,megamek.common.Targetable)>
<megamek.common.Compute: boolean inSensorRange(megamek.common.IGame,megamek.common.Entity,megamek.common.Targetable)>
<megamek.common.Compute: boolean inVisualRange(megamek.common.IGame,megamek.common.Entity,megamek.common.Targetable)>
<megamek.common.Compute: boolean isAffectedByAngelECM(megamek.common.Entity,megamek.common.Coords,megamek.common.Coords)>
<megamek.common.Compute: boolean isAffectedByECCM(megamek.common.Entity,megamek.common.Coords,megamek.common.Coords)>
<megamek.common.Compute: boolean isAffectedByECM(megamek.common.Entity,megamek.common.Coords,megamek.common.Coords)>
<megamek.common.Compute: boolean isAirToGround(megamek.common.Entity,megamek.common.Targetable)>
<megamek.common.Compute: boolean isGroundToAir(megamek.common.Entity,megamek.common.Targetable)>
<megamek.common.Compute: boolean isInArc(megamek.common.Coords,int,megamek.common.Coords,int)>
<megamek.common.Compute: boolean isInBuilding(megamek.common.IGame,int,megamek.common.Coords)>
<megamek.common.Compute: boolean isInBuilding(megamek.common.IGame,megamek.common.Entity)>
<megamek.common.Compute: boolean isInBuilding(megamek.common.IGame,megamek.common.Entity,megamek.common.Coords)>
<megamek.common.Compute: boolean isInSameBuilding(megamek.common.IGame,megamek.common.Entity,megamek.common.Targetable)>
<megamek.common.Compute: boolean isThroughFrontHex(megamek.common.IGame,megamek.common.Coords,megamek.common.Entity)>
<megamek.common.Compute: boolean isValidDisplacement(megamek.common.IGame,int,megamek.common.Coords,int)>
<megamek.common.Compute: boolean isValidDisplacement(megamek.common.IGame,int,megamek.common.Coords,megamek.common.Coords)>
<megamek.common.Compute: double getAngelECMFieldSize(megamek.common.Entity,megamek.common.Coords,megamek.common.Coords)>
<megamek.common.Compute: double getECCMFieldSize(megamek.common.Entity,megamek.common.Coords,megamek.common.Coords)>
<megamek.common.Compute: double getECMFieldSize(megamek.common.Entity,megamek.common.Coords,megamek.common.Coords)>
<megamek.common.Compute: double oddsAbove(int)>
<megamek.common.Compute: int calculateClusterHitTableAmount(int,int)>
<megamek.common.Compute: int d6()>
<megamek.common.Compute: int d6(int)>
<megamek.common.Compute: int getAffaDamageFor(megamek.common.Entity)>
<megamek.common.Compute: int getConsciousnessNumber(int)>
<megamek.common.Compute: int getNetVelocity(megamek.common.Coords,megamek.common.Aero,int,int)>
<megamek.common.Compute: int getSensorBracket(int)>
<megamek.common.Compute: int getSensorRangeBracket(megamek.common.Entity,megamek.common.Targetable)>
<megamek.common.Compute: int getSensorRangeByBracket(megamek.common.IGame,megamek.common.Entity,megamek.common.Targetable)>
<megamek.common.Compute: int missilesHit(int)>
<megamek.common.Compute: int missilesHit(int,int)>
<megamek.common.Compute: int missilesHit(int,int,boolean)>
<megamek.common.Compute: int missilesHit(int,int,boolean,boolean,boolean)>
<megamek.common.Compute: int randomInt(int)>
<megamek.common.Compute: int targetSideTable(megamek.common.Coords,megamek.common.Targetable)>
<megamek.common.Compute: int targetSideTable(megamek.common.Entity,megamek.common.Targetable,int)>
<megamek.common.Compute: megamek.common.Coords getMissedChargeDisplacement(megamek.common.IGame,int,megamek.common.Coords,int)>
<megamek.common.Compute: megamek.common.Coords getPreferredDisplacement(megamek.common.IGame,int,megamek.common.Coords,int)>
<megamek.common.Compute: megamek.common.Coords getValidDisplacement(megamek.common.IGame,int,megamek.common.Coords,int)>
<megamek.common.Compute: megamek.common.Coords scatterAssaultDrop(megamek.common.Coords,int)>
<megamek.common.Compute: megamek.common.Entity stackingViolation(megamek.common.IGame,int,megamek.common.Coords)>
<megamek.common.Compute: megamek.common.Entity stackingViolation(megamek.common.IGame,megamek.common.Entity,megamek.common.Coords,megamek.common.Entity)>
<megamek.common.Compute: megamek.common.ToHitData getAttackerMovementModifier(megamek.common.IGame,int)>
<megamek.common.Compute: megamek.common.ToHitData getAttackerMovementModifier(megamek.common.IGame,int,megamek.common.EntityMovementType)>
<megamek.common.Compute: megamek.common.ToHitData getAttackerTerrainModifier(megamek.common.IGame,int)>
<megamek.common.Compute: megamek.common.ToHitData getImmobileMod(megamek.common.Targetable)>
<megamek.common.Compute: megamek.common.ToHitData getImmobileMod(megamek.common.Targetable,int,int)>
<megamek.common.Compute: megamek.common.ToHitData getTargetMovementModifier(int,boolean,boolean)>
<megamek.common.Compute: megamek.common.ToHitData getTargetMovementModifier(megamek.common.IGame,int)>
<megamek.common.Compute: megamek.common.ToHitData getTargetTerrainModifier(megamek.common.IGame,megamek.common.Targetable)>
<megamek.common.Compute: megamek.common.ToHitData getTargetTerrainModifier(megamek.common.IGame,megamek.common.Targetable,int)>
<megamek.common.Compute: megamek.common.ToHitData getTargetTerrainModifier(megamek.common.IGame,megamek.common.Targetable,int,boolean)>
<megamek.common.Compute: void <clinit>()>
<megamek.common.Compute: void modifyPhysicalBTHForAdvantages(megamek.common.Entity,megamek.common.Entity,megamek.common.ToHitData,megamek.common.IGame)>
<megamek.common.ConvFighter: double getBVTypeModifier()>
<megamek.common.ConvFighter: int getHeatCapacity()>
<megamek.common.ConvFighter: void <init>()>
<megamek.common.Coords: boolean equals(java.lang.Object)>
<megamek.common.Coords: boolean isXOdd()>
<megamek.common.Coords: double radian(megamek.common.Coords)>
<megamek.common.Coords: int degree(megamek.common.Coords)>
<megamek.common.Coords: int direction(megamek.common.Coords)>
<megamek.common.Coords: int distance(int,int)>
<megamek.common.Coords: int distance(megamek.common.Coords)>
<megamek.common.Coords: int hashCode()>
<megamek.common.Coords: int xInDir(int,int,int)>
<megamek.common.Coords: int yInDir(int,int,int)>
<megamek.common.Coords: java.lang.String getBoardNum()>
<megamek.common.Coords: java.lang.String toString()>
<megamek.common.Coords: java.util.ArrayList intervening(megamek.common.Coords,megamek.common.Coords)>
<megamek.common.Coords: java.util.ArrayList intervening(megamek.common.Coords,megamek.common.Coords,boolean)>
<megamek.common.Coords: megamek.common.Coords nextHex(megamek.common.Coords,megamek.common.Coords)>
<megamek.common.Coords: megamek.common.Coords nextHex(megamek.common.Coords,megamek.common.IdealHex,megamek.common.IdealHex,int[])>
<megamek.common.Coords: megamek.common.Coords translated(int)>
<megamek.common.Coords: void <init>(int,int)>
<megamek.common.CriticalSlot: boolean equals(java.lang.Object)>
<megamek.common.CriticalSlot: boolean isArmored()>
<megamek.common.CriticalSlot: boolean isBreached()>
<megamek.common.CriticalSlot: boolean isDamaged()>
<megamek.common.CriticalSlot: boolean isDestroyed()>
<megamek.common.CriticalSlot: boolean isEverHittable()>
<megamek.common.CriticalSlot: boolean isHittable()>
<megamek.common.CriticalSlot: boolean isMissing()>
<megamek.common.CriticalSlot: int getIndex()>
<megamek.common.CriticalSlot: int getType()>
<megamek.common.CriticalSlot: megamek.common.Mounted getMount()>
<megamek.common.CriticalSlot: void <init>(int,int)>
<megamek.common.CriticalSlot: void <init>(int,int,boolean,boolean,megamek.common.Mounted)>
<megamek.common.CriticalSlot: void <init>(int,int,boolean,megamek.common.Mounted)>
<megamek.common.CriticalSlot: void setArmored(boolean)>
<megamek.common.CriticalSlot: void setBreached(boolean)>
<megamek.common.CriticalSlot: void setDestroyed(boolean)>
<megamek.common.CriticalSlot: void setHit(boolean)>
<megamek.common.CriticalSlot: void setMissing(boolean)>
<megamek.common.DockingCollar: void <init>(int)>
<megamek.common.Dropship: boolean loadWeapon(megamek.common.Mounted,megamek.common.Mounted)>
<megamek.common.Dropship: double getCost(boolean)>
<megamek.common.Dropship: int calculateBattleValue(boolean,boolean)>
<megamek.common.Dropship: int getAdjacentArcCCW(int)>
<megamek.common.Dropship: int getAdjacentArcCW(int)>
<megamek.common.Dropship: int getEscapePods()>
<megamek.common.Dropship: int getFuelPerTon()>
<megamek.common.Dropship: int getLifeBoats()>
<megamek.common.Dropship: void <init>()>
<megamek.common.Dropship: void setEscapePods(int)>
<megamek.common.Dropship: void setLifeBoats(int)>
<megamek.common.Engine: boolean hasFlag(int)>
<megamek.common.Engine: boolean isFusion()>
<megamek.common.Engine: boolean isValidEngine()>
<megamek.common.Engine: double getBVMultiplier()>
<megamek.common.Engine: float getWeightEngine(megamek.common.Entity,float)>
<megamek.common.Engine: int getBaseCost()>
<megamek.common.Engine: int getEngineType()>
<megamek.common.Engine: int getEngineTypeByString(java.lang.String)>
<megamek.common.Engine: int getJumpHeat(int)>
<megamek.common.Engine: int getRating()>
<megamek.common.Engine: int getRunHeat()>
<megamek.common.Engine: int getWeightFreeEngineHeatSinks()>
<megamek.common.Engine: int integralHeatSinkCapacity()>
<megamek.common.Engine: int[] getCenterTorsoCriticalSlots(int)>
<megamek.common.Engine: int[] getSideTorsoCriticalSlots()>
<megamek.common.Engine: java.lang.String getEngineName()>
<megamek.common.Engine: java.lang.String getShortEngineName()>
<megamek.common.Engine: void <clinit>()>
<megamek.common.Engine: void <init>(int,int,int)>
<megamek.common.Engine: void setBaseChassisHeatSinks(int)>
<megamek.common.Entity$3: void <clinit>()>
<megamek.common.Entity$EntityFluff: java.lang.String getHistory()>
<megamek.common.Entity$EntityFluff: void <init>(megamek.common.Entity)>
<megamek.common.Entity$EntityFluff: void setHistory(java.lang.String)>
<megamek.common.Entity$EntityFluff: void setMMLImagePath(java.lang.String)>
<megamek.common.Entity: boolean C3MasterIs(megamek.common.Entity)>
<megamek.common.Entity: boolean addCritical(int,int,megamek.common.CriticalSlot)>
<megamek.common.Entity: boolean addCritical(int,megamek.common.CriticalSlot)>
<megamek.common.Entity: boolean canGoHullDown()>
<megamek.common.Entity: boolean canTransferCriticals(int)>
<megamek.common.Entity: boolean climbMode()>
<megamek.common.Entity: boolean damageDockCollar()>
<megamek.common.Entity: boolean equals(java.lang.Object)>
<megamek.common.Entity: boolean hasActiveECM()>
<megamek.common.Entity: boolean hasActiveECM(boolean)>
<megamek.common.Entity: boolean hasActiveEiCockpit()>
<megamek.common.Entity: boolean hasArmoredChassis()>
<megamek.common.Entity: boolean hasBAP()>
<megamek.common.Entity: boolean hasBAP(boolean)>
<megamek.common.Entity: boolean hasBARArmor()>
<megamek.common.Entity: boolean hasBattleArmorHandles()>
<megamek.common.Entity: boolean hasC3()>
<megamek.common.Entity: boolean hasC3M()>
<megamek.common.Entity: boolean hasC3MM()>
<megamek.common.Entity: boolean hasC3S()>
<megamek.common.Entity: boolean hasC3i()>
<megamek.common.Entity: boolean hasCASEII()>
<megamek.common.Entity: boolean hasCASEII(int)>
<megamek.common.Entity: boolean hasEiCockpit()>
<megamek.common.Entity: boolean hasEnvironmentalSealing()>
<megamek.common.Entity: boolean hasFunctionalArmAES(int)>
<megamek.common.Entity: boolean hasModularArmor()>
<megamek.common.Entity: boolean hasModularArmor(int)>
<megamek.common.Entity: boolean hasShield()>
<megamek.common.Entity: boolean hasSpotlight()>
<megamek.common.Entity: boolean hasStealth()>
<megamek.common.Entity: boolean hasSystem(int,int)>
<megamek.common.Entity: boolean hasTargComp()>
<megamek.common.Entity: boolean hasUMU()>
<megamek.common.Entity: boolean hasWorkingMisc(java.lang.String)>
<megamek.common.Entity: boolean hasWorkingMisc(java.math.BigInteger)>
<megamek.common.Entity: boolean hasWorkingMisc(java.math.BigInteger,int,int)>
<megamek.common.Entity: boolean hasWorkingMisc(java.math.BigInteger,long)>
<megamek.common.Entity: boolean hasWorkingWeapon(java.lang.String)>
<megamek.common.Entity: boolean hasWorkingWeapon(java.math.BigInteger)>
<megamek.common.Entity: boolean hasWorkingWeapon(java.math.BigInteger,long)>
<megamek.common.Entity: boolean isAirborne()>
<megamek.common.Entity: boolean isAirborneVTOL()>
<megamek.common.Entity: boolean isCapitalFighter()>
<megamek.common.Entity: boolean isCapitalScale()>
<megamek.common.Entity: boolean isCarcass()>
<megamek.common.Entity: boolean isCarefulStand()>
<megamek.common.Entity: boolean isClan()>
<megamek.common.Entity: boolean isClanArmor()>
<megamek.common.Entity: boolean isDeployed()>
<megamek.common.Entity: boolean isDestroyed()>
<megamek.common.Entity: boolean isDoomed()>
<megamek.common.Entity: boolean isDropping()>
<megamek.common.Entity: boolean isElevationValid(int,megamek.common.IHex)>
<megamek.common.Entity: boolean isEnemyOf(megamek.common.Entity)>
<megamek.common.Entity: boolean isFighter()>
<megamek.common.Entity: boolean isHullDown()>
<megamek.common.Entity: boolean isINarcedWith(long)>
<megamek.common.Entity: boolean isLargeCraft()>
<megamek.common.Entity: boolean isLocationBad(int)>
<megamek.common.Entity: boolean isMakingDfa()>
<megamek.common.Entity: boolean isMilitary()>
<megamek.common.Entity: boolean isMixedTech()>
<megamek.common.Entity: boolean isOffBoard()>
<megamek.common.Entity: boolean isOmni()>
<megamek.common.Entity: boolean isProne()>
<megamek.common.Entity: boolean isShutDown()>
<megamek.common.Entity: boolean isShutDownThisPhase()>
<megamek.common.Entity: boolean isStealthActive()>
<megamek.common.Entity: boolean isSurfaceNaval()>
<megamek.common.Entity: boolean isTargetable()>
<megamek.common.Entity: boolean itemOppositeTech(java.lang.String)>
<megamek.common.Entity: boolean loadWeapon(megamek.common.Mounted,megamek.common.Mounted)>
<megamek.common.Entity: boolean locationHasCase(int)>
<megamek.common.Entity: boolean locationIsLeg(int)>
<megamek.common.Entity: boolean onSameC3NetworkAs(megamek.common.Entity)>
<megamek.common.Entity: boolean onSameC3NetworkAs(megamek.common.Entity,boolean)>
<megamek.common.Entity: boolean removePartialCoverHits(int,int,int)>
<megamek.common.Entity: boolean unload(megamek.common.Entity)>
<megamek.common.Entity: boolean usesWeaponBays()>
<megamek.common.Entity: double getArmorWeight()>
<megamek.common.Entity: float getTroopCarryingSpace()>
<megamek.common.Entity: float getWeight()>
<megamek.common.Entity: int absHeight()>
<megamek.common.Entity: int applyGravityEffectsOnMP(int)>
<megamek.common.Entity: int calculateFreeC3MNodes()>
<megamek.common.Entity: int calculateFreeC3Nodes()>
<megamek.common.Entity: int countWorkingMisc(java.math.BigInteger)>
<megamek.common.Entity: int countWorkingMisc(java.math.BigInteger,int)>
<megamek.common.Entity: int getActiveUMUCount()>
<megamek.common.Entity: int getAllUMUCount()>
<megamek.common.Entity: int getAltitude()>
<megamek.common.Entity: int getArmor(int)>
<megamek.common.Entity: int getArmor(int,boolean)>
<megamek.common.Entity: int getArmor(megamek.common.HitData)>
<megamek.common.Entity: int getArmorTechLevel()>
<megamek.common.Entity: int getArmorType()>
<megamek.common.Entity: int getBARRating()>
<megamek.common.Entity: int getBadCriticals(int,int,int)>
<megamek.common.Entity: int getBattleForceArmorPoints()>
<megamek.common.Entity: int getBattleForcePoints()>
<megamek.common.Entity: int getBattleForceSize()>
<megamek.common.Entity: int getBattleForceStandardWeaponsDamage(int)>
<megamek.common.Entity: int getBattleForceStandardWeaponsDamage(int,boolean,boolean)>
<megamek.common.Entity: int getBattleForceStandardWeaponsDamage(int,int)>
<megamek.common.Entity: int getBattleForceStandardWeaponsDamage(int,int,boolean,boolean)>
<megamek.common.Entity: int getBattleForceStructurePoints()>
<megamek.common.Entity: int getBattleForceTotalHeatGeneration(boolean)>
<megamek.common.Entity: int getCargoMpReduction()>
<megamek.common.Entity: int getDamageReductionFromModularArmor(int,int,java.util.Vector)>
<megamek.common.Entity: int getDocks()>
<megamek.common.Entity: int getElevation()>
<megamek.common.Entity: int getEmptyCriticals(int)>
<megamek.common.Entity: int getEquipmentNum(megamek.common.Mounted)>
<megamek.common.Entity: int getExternalId()>
<megamek.common.Entity: int getFacing()>
<megamek.common.Entity: int getGoodCriticals(int,int,int)>
<megamek.common.Entity: int getGrappled()>
<megamek.common.Entity: int getGyroType()>
<megamek.common.Entity: int getHeight()>
<megamek.common.Entity: int getHitCriticals(int,int,int)>
<megamek.common.Entity: int getHittableCriticals(int)>
<megamek.common.Entity: int getId()>
<megamek.common.Entity: int getInternal(int)>
<megamek.common.Entity: int getInternal(megamek.common.HitData)>
<megamek.common.Entity: int getJumpHeat(int)>
<megamek.common.Entity: int getJumpMP()>
<megamek.common.Entity: int getJumpMP(boolean)>
<megamek.common.Entity: int getLocationFromAbbr(java.lang.String)>
<megamek.common.Entity: int getLocationStatus(int)>
<megamek.common.Entity: int getNumberOfCriticals(int)>
<megamek.common.Entity: int getNumberOfCriticals(int,int,int)>
<megamek.common.Entity: int getNumberOfShields(long)>
<megamek.common.Entity: int getOArmor(int)>
<megamek.common.Entity: int getOArmor(int,boolean)>
<megamek.common.Entity: int getOInternal(int)>
<megamek.common.Entity: int getOriginalJumpMP()>
<megamek.common.Entity: int getOriginalWalkMP()>
<megamek.common.Entity: int getRunMP()>
<megamek.common.Entity: int getRunMP(boolean,boolean)>
<megamek.common.Entity: int getRunMPwithoutMASC()>
<megamek.common.Entity: int getRunningGravityLimit()>
<megamek.common.Entity: int getStructureType()>
<megamek.common.Entity: int getSwarmAttackerId()>
<megamek.common.Entity: int getSwarmTargetId()>
<megamek.common.Entity: int getTargetType()>
<megamek.common.Entity: int getTechLevel()>
<megamek.common.Entity: int getTotalArmor()>
<megamek.common.Entity: int getTotalInternal()>
<megamek.common.Entity: int getTotalOArmor()>
<megamek.common.Entity: int getTotalOInternal()>
<megamek.common.Entity: int getTransferLocation(int)>
<megamek.common.Entity: int getTransportId()>
<megamek.common.Entity: int getWalkMP()>
<megamek.common.Entity: int getWeaponsAndEquipmentCost(boolean)>
<megamek.common.Entity: int getWeaponsAndEquipmentCost(java.lang.StringBuffer,boolean)>
<megamek.common.Entity: int getWeightClass()>
<megamek.common.Entity: int getYear()>
<megamek.common.Entity: int height()>
<megamek.common.Entity: int sideTable(megamek.common.Coords,boolean)>
<megamek.common.Entity: int sideTable(megamek.common.Coords,boolean,int)>
<megamek.common.Entity: java.lang.String damageBayDoor()>
<megamek.common.Entity: java.lang.String getBattleForceMovement()>
<megamek.common.Entity: java.lang.String getBattleForceOverHeatValue()>
<megamek.common.Entity: java.lang.String getBattleForceSpecialAbilites()>
<megamek.common.Entity: java.lang.String getC3NetId()>
<megamek.common.Entity: java.lang.String getChassis()>
<megamek.common.Entity: java.lang.String getDisplayName()>
<megamek.common.Entity: java.lang.String getLocationAbbr(int)>
<megamek.common.Entity: java.lang.String getLocationAbbr(megamek.common.HitData)>
<megamek.common.Entity: java.lang.String getLocationName(int)>
<megamek.common.Entity: java.lang.String getLocationName(megamek.common.HitData)>
<megamek.common.Entity: java.lang.String getModel()>
<megamek.common.Entity: java.lang.String getMovementModeAsBattleForceString()>
<megamek.common.Entity: java.lang.String getMovementModeAsString()>
<megamek.common.Entity: java.lang.String getRunMPasString()>
<megamek.common.Entity: java.lang.String getShortName()>
<megamek.common.Entity: java.lang.String getShortNameRaw()>
<megamek.common.Entity: java.lang.String getUnusedString()>
<megamek.common.Entity: java.util.ArrayList getAmmo()>
<megamek.common.Entity: java.util.ArrayList getBombs()>
<megamek.common.Entity: java.util.ArrayList getEquipment()>
<megamek.common.Entity: java.util.ArrayList getExternalUnits()>
<megamek.common.Entity: java.util.ArrayList getMisc()>
<megamek.common.Entity: java.util.ArrayList getTotalWeaponList()>
<megamek.common.Entity: java.util.ArrayList getWeaponBayList()>
<megamek.common.Entity: java.util.ArrayList getWeaponList()>
<megamek.common.Entity: java.util.Iterator getFailedEquipment()>
<megamek.common.Entity: java.util.List getLoadedUnits()>
<megamek.common.Entity: java.util.Vector doCheckEngineStallRoll(java.util.Vector)>
<megamek.common.Entity: java.util.Vector getBayLoadedUnits()>
<megamek.common.Entity: java.util.Vector getPickedUpMechWarriors()>
<megamek.common.Entity: java.util.Vector getSensors()>
<megamek.common.Entity: java.util.Vector getTransportBays()>
<megamek.common.Entity: long getBattleForceJumpPoints()>
<megamek.common.Entity: long getBattleForceMovementPoints()>
<megamek.common.Entity: megamek.common.Coords getPosition()>
<megamek.common.Entity: megamek.common.Coords getPriorPosition()>
<megamek.common.Entity: megamek.common.Coords passedThroughPrevious(megamek.common.Coords)>
<megamek.common.Entity: megamek.common.CriticalSlot getCritical(int,int)>
<megamek.common.Entity: megamek.common.Engine getEngine()>
<megamek.common.Entity: megamek.common.Entity getC3Master()>
<megamek.common.Entity: megamek.common.Entity getC3Top()>
<megamek.common.Entity: megamek.common.Entity getExteriorUnitAt(int,boolean)>
<megamek.common.Entity: megamek.common.Entity$EntityFluff getFluff()>
<megamek.common.Entity: megamek.common.EntityMovementMode getMovementMode()>
<megamek.common.Entity: megamek.common.IGame getGame()>
<megamek.common.Entity: megamek.common.Mounted addEquipment(megamek.common.EquipmentType,int)>
<megamek.common.Entity: megamek.common.Mounted addEquipment(megamek.common.EquipmentType,int,boolean)>
<megamek.common.Entity: megamek.common.Mounted addEquipment(megamek.common.EquipmentType,int,boolean,boolean)>
<megamek.common.Entity: megamek.common.Mounted addEquipment(megamek.common.EquipmentType,int,boolean,boolean,boolean,boolean)>
<megamek.common.Entity: megamek.common.Mounted addEquipment(megamek.common.EquipmentType,int,boolean,int)>
<megamek.common.Entity: megamek.common.Mounted addWeaponGroup(megamek.common.EquipmentType,int)>
<megamek.common.Entity: megamek.common.Mounted getEquipment(int)>
<megamek.common.Entity: megamek.common.Mounted whichBay(int)>
<megamek.common.Entity: megamek.common.Pilot getCrew()>
<megamek.common.Entity: megamek.common.PilotingRollData addConditionBonuses(megamek.common.PilotingRollData,megamek.common.EntityMovementType)>
<megamek.common.Entity: megamek.common.PilotingRollData getBasePilotingRoll()>
<megamek.common.Entity: megamek.common.PilotingRollData getBasePilotingRoll(megamek.common.EntityMovementType)>
<megamek.common.Entity: megamek.common.Player getOwner()>
<megamek.common.Entity: megamek.common.TeleMissileTracker getTMTracker()>
<megamek.common.Entity: megamek.common.options.Quirks getQuirks()>
<megamek.common.Entity: void <init>()>
<megamek.common.Entity: void addEquipment(megamek.common.Mounted,int,boolean)>
<megamek.common.Entity: void addEquipment(megamek.common.Mounted,int,boolean,boolean)>
<megamek.common.Entity: void addEquipment(megamek.common.Mounted,int,boolean,int)>
<megamek.common.Entity: void addFailedEquipment(java.lang.String)>
<megamek.common.Entity: void addPilotingModifierForTerrain(megamek.common.PilotingRollData)>
<megamek.common.Entity: void addPilotingModifierForTerrain(megamek.common.PilotingRollData,megamek.common.Coords)>
<megamek.common.Entity: void addTransporter(megamek.common.Transporter)>
<megamek.common.Entity: void applyDamage()>
<megamek.common.Entity: void destroyLocation(int)>
<megamek.common.Entity: void generateDisplayName()>
<megamek.common.Entity: void generateShortName()>
<megamek.common.Entity: void initializeArmor(int,int)>
<megamek.common.Entity: void initializeInternal(int,int)>
<megamek.common.Entity: void loadAllWeapons()>
<megamek.common.Entity: void loadWeapon(megamek.common.Mounted)>
<megamek.common.Entity: void printDebugToFile()>
<megamek.common.Entity: void refreshLocations()>
<megamek.common.Entity: void removeCriticals(int,megamek.common.CriticalSlot)>
<megamek.common.Entity: void restore()>
<megamek.common.Entity: void setArmor(int,int)>
<megamek.common.Entity: void setArmor(int,int,boolean)>
<megamek.common.Entity: void setArmor(int,megamek.common.HitData)>
<megamek.common.Entity: void setArmorTechLevel(int)>
<megamek.common.Entity: void setArmorType(int)>
<megamek.common.Entity: void setArmorType(java.lang.String)>
<megamek.common.Entity: void setC3NetId(megamek.common.Entity)>
<megamek.common.Entity: void setCanon(boolean)>
<megamek.common.Entity: void setChassis(java.lang.String)>
<megamek.common.Entity: void setCrew(megamek.common.Pilot)>
<megamek.common.Entity: void setCritical(int,int,megamek.common.CriticalSlot)>
<megamek.common.Entity: void setDeployed(boolean)>
<megamek.common.Entity: void setDone(boolean)>
<megamek.common.Entity: void setDoomed(boolean)>
<megamek.common.Entity: void setElevation(int)>
<megamek.common.Entity: void setFacing(int)>
<megamek.common.Entity: void setGame(megamek.common.IGame)>
<megamek.common.Entity: void setGameOptions()>
<megamek.common.Entity: void setGrappled(int,boolean)>
<megamek.common.Entity: void setHullDown(boolean)>
<megamek.common.Entity: void setId(int)>
<megamek.common.Entity: void setInternal(int,int)>
<megamek.common.Entity: void setInternal(int,megamek.common.HitData)>
<megamek.common.Entity: void setLocationStatus(int,int)>
<megamek.common.Entity: void setMixedTech(boolean)>
<megamek.common.Entity: void setModel(java.lang.String)>
<megamek.common.Entity: void setMovementMode(megamek.common.EntityMovementMode)>
<megamek.common.Entity: void setNextSensor(megamek.common.Sensor)>
<megamek.common.Entity: void setOmni(boolean)>
<megamek.common.Entity: void setOriginalJumpMP(int)>
<megamek.common.Entity: void setOriginalWalkMP(int)>
<megamek.common.Entity: void setOwner(megamek.common.Player)>
<megamek.common.Entity: void setPosition(megamek.common.Coords)>
<megamek.common.Entity: void setProne(boolean)>
<megamek.common.Entity: void setRapidFire()>
<megamek.common.Entity: void setRemovalCondition(int)>
<megamek.common.Entity: void setSalvage(boolean)>
<megamek.common.Entity: void setSecondaryFacing(int)>
<megamek.common.Entity: void setSource(java.lang.String)>
<megamek.common.Entity: void setSpotlight(boolean)>
<megamek.common.Entity: void setSpotlightState(boolean)>
<megamek.common.Entity: void setStructureType(int)>
<megamek.common.Entity: void setStructureType(java.lang.String)>
<megamek.common.Entity: void setStuck(boolean)>
<megamek.common.Entity: void setSwarmAttackerId(int)>
<megamek.common.Entity: void setSwarmTargetId(int)>
<megamek.common.Entity: void setTechLevel(int)>
<megamek.common.Entity: void setTransportId(int)>
<megamek.common.Entity: void setWeaponHit(megamek.common.Mounted)>
<megamek.common.Entity: void setWeight(float)>
<megamek.common.Entity: void setYear(int)>
<megamek.common.EntityMovementMode: megamek.common.EntityMovementMode getMode(java.lang.String)>
<megamek.common.EntityMovementMode: megamek.common.EntityMovementMode[] values()>
<megamek.common.EntityMovementMode: void <clinit>()>
<megamek.common.EntityMovementMode: void <init>(java.lang.String,int,java.lang.String[])>
<megamek.common.EntityMovementType: megamek.common.EntityMovementType[] values()>
<megamek.common.EntityMovementType: void <clinit>()>
<megamek.common.EntityMovementType: void <init>(java.lang.String,int)>
<megamek.common.EntityWeightClass: float getClassLimit(int)>
<megamek.common.EntityWeightClass: int getWeightClass(float)>
<megamek.common.EntityWeightClass: void <clinit>()>
<megamek.common.EquipmentMode: megamek.common.EquipmentMode getMode(java.lang.String)>
<megamek.common.EquipmentMode: void <clinit>()>
<megamek.common.EquipmentMode: void <init>(java.lang.String)>
<megamek.common.EquipmentType: double getArmorCost(int)>
<megamek.common.EquipmentType: double getArmorPointMultiplier(int,boolean)>
<megamek.common.EquipmentType: double getArmorPointMultiplier(int,int)>
<megamek.common.EquipmentType: double getStructureCost(int)>
<megamek.common.EquipmentType: int getArmorType(java.lang.String)>
<megamek.common.EquipmentType: int getStructureType(java.lang.String)>
<megamek.common.EquipmentType: java.lang.String getArmorTypeName(int)>
<megamek.common.EquipmentType: java.lang.String getStructureTypeName(int)>
<megamek.common.EquipmentType: java.util.Enumeration getAllTypes()>
<megamek.common.EquipmentType: megamek.common.EquipmentType get(java.lang.String)>
<megamek.common.EquipmentType: void <clinit>()>
<megamek.common.EquipmentType: void <init>()>
<megamek.common.EquipmentType: void addLookupName(java.lang.String)>
<megamek.common.EquipmentType: void addType(megamek.common.EquipmentType)>
<megamek.common.EquipmentType: void initializeTypes()>
<megamek.common.EquipmentType: void setInstantModeSwitch(boolean)>
<megamek.common.EquipmentType: void setInternalName(java.lang.String)>
<megamek.common.EquipmentType: void setModes(java.lang.String[])>
<megamek.common.EquipmentType: void writeEquipmentDatabase(java.io.File)>
<megamek.common.EquipmentType: void writeEquipmentExtendedDatabase(java.io.File)>
<megamek.common.Flare: void <clinit>()>
<megamek.common.FuelTank: void <init>(megamek.common.Coords,megamek.common.IBoard,int,int)>
<megamek.common.Game$1: boolean accept(megamek.common.Entity)>
<megamek.common.Game$1: void <init>(megamek.common.Game,megamek.common.Coords,megamek.common.Entity)>
<megamek.common.Game$2: boolean accept(megamek.common.Entity)>
<megamek.common.Game$2: void <init>(megamek.common.Game,megamek.common.Coords,megamek.common.Entity)>
<megamek.common.Game$3: boolean hasMoreElements()>
<megamek.common.Game$3: java.lang.Object nextElement()>
<megamek.common.Game$3: megamek.common.Entity nextElement()>
<megamek.common.Game$3: void <init>(megamek.common.Game,megamek.common.EntitySelector)>
<megamek.common.Game$5: void <clinit>()>
<megamek.common.Game: boolean checkForMagneticClamp()>
<megamek.common.Game: boolean containsMinefield(megamek.common.Coords)>
<megamek.common.Game: boolean containsVibrabomb(megamek.common.Minefield)>
<megamek.common.Game: boolean gameTimerIsExpired()>
<megamek.common.Game: boolean hasMoreTurns()>
<megamek.common.Game: boolean isDeploymentComplete()>
<megamek.common.Game: boolean isEntityStranded(megamek.common.Entity)>
<megamek.common.Game: boolean isForceVictory()>
<megamek.common.Game: boolean isOutOfGame(int)>
<megamek.common.Game: boolean isOutOfGame(megamek.common.Entity)>
<megamek.common.Game: boolean isPhaseSimultaneous()>
<megamek.common.Game: boolean isPositionIlluminated(megamek.common.Coords)>
<megamek.common.Game: boolean shouldDeployForRound(int)>
<megamek.common.Game: boolean shouldDeployThisRound()>
<megamek.common.Game: int actionsSize()>
<megamek.common.Game: int getEntitiesOwnedBy(megamek.common.Player)>
<megamek.common.Game: int getFirstEntityNum(megamek.common.GameTurn)>
<megamek.common.Game: int getInfantryLeft(int)>
<megamek.common.Game: int getLiveDeployedEntitiesOwnedBy(megamek.common.Player)>
<megamek.common.Game: int getNextEntityId()>
<megamek.common.Game: int getNoOfEntities()>
<megamek.common.Game: int getNoOfPlayers()>
<megamek.common.Game: int getNoOfTeams()>
<megamek.common.Game: int getProtomechsLeft(int)>
<megamek.common.Game: int getRoundCount()>
<megamek.common.Game: int getSelectedEntityCount(megamek.common.EntitySelector)>
<megamek.common.Game: int getTurnIndex()>
<megamek.common.Game: int getVehiclesLeft(int)>
<megamek.common.Game: int getVictoryPlayerId()>
<megamek.common.Game: int getVictoryTeam()>
<megamek.common.Game: java.util.Enumeration getActions()>
<megamek.common.Game: java.util.Enumeration getAttacks()>
<megamek.common.Game: java.util.Enumeration getCharges()>
<megamek.common.Game: java.util.Enumeration getControlRolls()>
<megamek.common.Game: java.util.Enumeration getDevastatedEntities()>
<megamek.common.Game: java.util.Enumeration getEnemyEntities(megamek.common.Coords,megamek.common.Entity)>
<megamek.common.Game: java.util.Enumeration getEntities()>
<megamek.common.Game: java.util.Enumeration getEntities(megamek.common.Coords)>
<megamek.common.Game: java.util.Enumeration getExtremeGravityPSRs()>
<megamek.common.Game: java.util.Enumeration getFriendlyEntities(megamek.common.Coords,megamek.common.Entity)>
<megamek.common.Game: java.util.Enumeration getGraveyardEntities()>
<megamek.common.Game: java.util.Enumeration getMinedCoords()>
<megamek.common.Game: java.util.Enumeration getPSRs()>
<megamek.common.Game: java.util.Enumeration getPlayers()>
<megamek.common.Game: java.util.Enumeration getRams()>
<megamek.common.Game: java.util.Enumeration getRetreatedEntities()>
<megamek.common.Game: java.util.Enumeration getSelectedEntities(megamek.common.EntitySelector)>
<megamek.common.Game: java.util.Enumeration getTeams()>
<megamek.common.Game: java.util.Enumeration getTeleMissileAttacks()>
<megamek.common.Game: java.util.Enumeration getTurns()>
<megamek.common.Game: java.util.HashMap getVictoryContext()>
<megamek.common.Game: java.util.Hashtable getPositionMap()>
<megamek.common.Game: java.util.Vector ageFlares()>
<megamek.common.Game: java.util.Vector getAttacksVector()>
<megamek.common.Game: java.util.Vector getEntitiesToDeployForRound(int)>
<megamek.common.Game: java.util.Vector getEntitiesVector()>
<megamek.common.Game: java.util.Vector getFlares()>
<megamek.common.Game: java.util.Vector getGameListeners()>
<megamek.common.Game: java.util.Vector getGunEmplacements(megamek.common.Coords)>
<megamek.common.Game: java.util.Vector getMinefields(megamek.common.Coords)>
<megamek.common.Game: java.util.Vector getOutOfGameEntitiesVector()>
<megamek.common.Game: java.util.Vector getPlayersVector()>
<megamek.common.Game: java.util.Vector getTeamsVector()>
<megamek.common.Game: java.util.Vector getTurnVector()>
<megamek.common.Game: java.util.Vector getVibrabombs()>
<megamek.common.Game: megamek.common.Entity getAffaTarget(megamek.common.Coords,megamek.common.Entity)>
<megamek.common.Game: megamek.common.Entity getEntity(int)>
<megamek.common.Game: megamek.common.Entity getFirstEntity()>
<megamek.common.Game: megamek.common.Entity getFirstEntity(megamek.common.GameTurn)>
<megamek.common.Game: megamek.common.Entity getOutOfGameEntity(int)>
<megamek.common.Game: megamek.common.GameTurn changeToNextTurn()>
<megamek.common.Game: megamek.common.GameTurn getTurn()>
<megamek.common.Game: megamek.common.GameTurn removeFirstTurnFor(megamek.common.Entity)>
<megamek.common.Game: megamek.common.IBoard getBoard()>
<megamek.common.Game: megamek.common.IGame$Phase getLastPhase()>
<megamek.common.Game: megamek.common.IGame$Phase getPhase()>
<megamek.common.Game: megamek.common.PlanetaryConditions getPlanetaryConditions()>
<megamek.common.Game: megamek.common.Player getPlayer(int)>
<megamek.common.Game: megamek.common.Targetable getTarget(int,int)>
<megamek.common.Game: megamek.common.options.GameOptions getOptions()>
<megamek.common.Game: megamek.server.victory.Victory getVictory()>
<megamek.common.Game: void <clinit>()>
<megamek.common.Game: void <init>()>
<megamek.common.Game: void addAction(megamek.common.actions.EntityAction)>
<megamek.common.Game: void addAttack(megamek.common.weapons.AttackHandler)>
<megamek.common.Game: void addControlRoll(megamek.common.PilotingRollData)>
<megamek.common.Game: void addEntity(int,megamek.common.Entity)>
<megamek.common.Game: void addGameListener(megamek.common.event.GameListener)>
<megamek.common.Game: void addPSR(megamek.common.PilotingRollData)>
<megamek.common.Game: void addReports(java.util.Vector)>
<megamek.common.Game: void addTeleMissileAttack(megamek.common.actions.AttackAction)>
<megamek.common.Game: void checkForCompleteDeployment()>
<megamek.common.Game: void clearAllReports()>
<megamek.common.Game: void clearDeploymentThisRound()>
<megamek.common.Game: void createVictoryConditions()>
<megamek.common.Game: void incrementRoundCount()>
<megamek.common.Game: void insertNextTurn(megamek.common.GameTurn)>
<megamek.common.Game: void moveToGraveyard(int)>
<megamek.common.Game: void processGameEvent(megamek.common.event.GameEvent)>
<megamek.common.Game: void purgeGameListeners()>
<megamek.common.Game: void removeArtyAutoHitHexes()>
<megamek.common.Game: void removeEntity(int,int)>
<megamek.common.Game: void removeMinefield(megamek.common.Minefield)>
<megamek.common.Game: void removeMinefieldHelper(megamek.common.Minefield)>
<megamek.common.Game: void removeMinefields()>
<megamek.common.Game: void removePlayer(int)>
<megamek.common.Game: void removeTurnFor(megamek.common.Entity)>
<megamek.common.Game: void removeVibrabomb(megamek.common.Minefield)>
<megamek.common.Game: void reset()>
<megamek.common.Game: void resetActions()>
<megamek.common.Game: void resetArtilleryAttacks()>
<megamek.common.Game: void resetAttacks()>
<megamek.common.Game: void resetCharges()>
<megamek.common.Game: void resetControlRolls()>
<megamek.common.Game: void resetExtremeGravityPSRs(megamek.common.Entity)>
<megamek.common.Game: void resetPSRs()>
<megamek.common.Game: void resetPSRs(megamek.common.Entity)>
<megamek.common.Game: void resetRams()>
<megamek.common.Game: void resetTagInfo()>
<megamek.common.Game: void resetTeleMissileAttacks()>
<megamek.common.Game: void resetTurnIndex()>
<megamek.common.Game: void setAttacksVector(java.util.Vector)>
<megamek.common.Game: void setBoard(megamek.common.IBoard)>
<megamek.common.Game: void setDeploymentComplete(boolean)>
<megamek.common.Game: void setForceVictory(boolean)>
<megamek.common.Game: void setLastPhase(megamek.common.IGame$Phase)>
<megamek.common.Game: void setOutOfGameEntitiesVector(java.util.Vector)>
<megamek.common.Game: void setPhase(megamek.common.IGame$Phase)>
<megamek.common.Game: void setTurnVector(java.util.Vector)>
<megamek.common.Game: void setVictoryContext(java.util.HashMap)>
<megamek.common.Game: void setVictoryPlayerId(int)>
<megamek.common.Game: void setVictoryTeam(int)>
<megamek.common.Game: void setupRoundDeployment()>
<megamek.common.Game: void setupTeams()>
<megamek.common.GameReports: void <init>()>
<megamek.common.GameReports: void add(int,java.util.Vector)>
<megamek.common.GameReports: void clear()>
<megamek.common.GameTurn$EntityClassTurn: void <init>(int,int)>
<megamek.common.GameTurn$SpecificEntityTurn: void <init>(int,int)>
<megamek.common.GameTurn$UnitNumberTurn: void <init>(int,char)>
<megamek.common.GameTurn$UnloadStrandedTurn: void <init>(java.util.Enumeration)>
<megamek.common.GameTurn: void <init>(int)>
<megamek.common.GunEmplacement: boolean doomedInVacuum()>
<megamek.common.GunEmplacement: boolean hasRearArmor(int)>
<megamek.common.GunEmplacement: double getCost(boolean)>
<megamek.common.GunEmplacement: int calculateBattleValue()>
<megamek.common.GunEmplacement: int calculateBattleValue(boolean,boolean)>
<megamek.common.GunEmplacement: int getHeatCapacity()>
<megamek.common.GunEmplacement: int getWalkMP(boolean,boolean)>
<megamek.common.GunEmplacement: int locations()>
<megamek.common.GunEmplacement: int[] getNoOfSlots()>
<megamek.common.GunEmplacement: java.lang.String[] getLocationAbbrs()>
<megamek.common.GunEmplacement: java.lang.String[] getLocationNames()>
<megamek.common.GunEmplacement: void <clinit>()>
<megamek.common.GunEmplacement: void <init>()>
<megamek.common.GunEmplacement: void addEquipment(megamek.common.Mounted,int,boolean)>
<megamek.common.HeavyVehicleBay: void <init>(int,int)>
<megamek.common.Hex: boolean containsTerrain(int)>
<megamek.common.Hex: boolean containsTerrain(int,int)>
<megamek.common.Hex: boolean containsTerrainExit(int,int)>
<megamek.common.Hex: boolean isIgnitable()>
<megamek.common.Hex: int ceiling()>
<megamek.common.Hex: int depth()>
<megamek.common.Hex: int floor()>
<megamek.common.Hex: int getBogDownModifier(megamek.common.EntityMovementMode,boolean)>
<megamek.common.Hex: int getElevation()>
<megamek.common.Hex: int getFireTurn()>
<megamek.common.Hex: int getIgnitionModifier()>
<megamek.common.Hex: int getUnstuckModifier(int)>
<megamek.common.Hex: int surface()>
<megamek.common.Hex: int terrainLevel(int)>
<megamek.common.Hex: int terrainPilotingModifier(megamek.common.EntityMovementMode)>
<megamek.common.Hex: int terrainsPresent()>
<megamek.common.Hex: megamek.common.ITerrain getTerrain(int)>
<megamek.common.Hex: void <init>()>
<megamek.common.Hex: void <init>(int)>
<megamek.common.Hex: void <init>(int,java.lang.String,java.lang.String,megamek.common.Coords)>
<megamek.common.Hex: void <init>(int,megamek.common.ITerrain[],java.lang.String,megamek.common.Coords)>
<megamek.common.Hex: void addTerrain(megamek.common.ITerrain)>
<megamek.common.Hex: void clearExits()>
<megamek.common.Hex: void removeAllTerrains()>
<megamek.common.Hex: void removeTerrain(int)>
<megamek.common.Hex: void setElevation(int)>
<megamek.common.Hex: void setExits(megamek.common.IHex,int,boolean)>
<megamek.common.Hex: void setTheme(java.lang.String)>
<megamek.common.HexTarget: boolean isAirborne()>
<megamek.common.HexTarget: boolean isAirborneVTOL()>
<megamek.common.HexTarget: boolean isImmobile()>
<megamek.common.HexTarget: boolean isOffBoard()>
<megamek.common.HexTarget: int absHeight()>
<megamek.common.HexTarget: int coordsToId(megamek.common.Coords)>
<megamek.common.HexTarget: int getElevation()>
<megamek.common.HexTarget: int getHeight()>
<megamek.common.HexTarget: int getTargetId()>
<megamek.common.HexTarget: int getTargetType()>
<megamek.common.HexTarget: int sideTable(megamek.common.Coords)>
<megamek.common.HexTarget: int sideTable(megamek.common.Coords,boolean)>
<megamek.common.HexTarget: java.lang.String getDisplayName()>
<megamek.common.HexTarget: megamek.common.Coords getPosition()>
<megamek.common.HexTarget: megamek.common.Coords idToCoords(int)>
<megamek.common.HexTarget: void <init>(megamek.common.Coords,megamek.common.IBoard,int)>
<megamek.common.HitData: boolean isCapital()>
<megamek.common.HitData: boolean isFallDamage()>
<megamek.common.HitData: boolean isRear()>
<megamek.common.HitData: boolean rolledBoxCars()>
<megamek.common.HitData: int getCapMisCritMod()>
<megamek.common.HitData: int getEffect()>
<megamek.common.HitData: int getGeneralDamageType()>
<megamek.common.HitData: int getLocation()>
<megamek.common.HitData: int getMotiveMod()>
<megamek.common.HitData: int getSingleAV()>
<megamek.common.HitData: int getSpecCritMod()>
<megamek.common.HitData: int glancingMod()>
<megamek.common.HitData: megamek.common.HitData getUndoneLocation()>
<megamek.common.HitData: void <init>(int)>
<megamek.common.HitData: void <init>(int,boolean)>
<megamek.common.HitData: void <init>(int,boolean,int)>
<megamek.common.HitData: void <init>(int,boolean,int,boolean,int)>
<megamek.common.HitData: void <init>(int,boolean,int,boolean,int,boolean,int)>
<megamek.common.HitData: void <init>(int,boolean,int,boolean,int,boolean,int,int)>
<megamek.common.HitData: void makeFallDamage(boolean)>
<megamek.common.HitData: void setCapital(boolean)>
<megamek.common.HitData: void setEffect(int)>
<megamek.common.IGame$Phase: boolean isDuringOrAfter(megamek.common.IGame$Phase)>
<megamek.common.IGame$Phase: megamek.common.IGame$Phase[] values()>
<megamek.common.IGame$Phase: void <clinit>()>
<megamek.common.IGame$Phase: void <init>(java.lang.String,int)>
<megamek.common.INarcPod: boolean isImmobile()>
<megamek.common.INarcPod: int getElevation()>
<megamek.common.INarcPod: int getTargetId()>
<megamek.common.INarcPod: int getTargetType()>
<megamek.common.INarcPod: java.lang.String getDisplayName()>
<megamek.common.INarcPod: java.lang.String toString()>
<megamek.common.INarcPod: megamek.common.Coords getPosition()>
<megamek.common.INarcPod: megamek.common.INarcPod idToInstance(int)>
<megamek.common.INarcPod: void <init>(int,int,int)>
<megamek.common.IdealHex: boolean isIntersectedBy(double,double,double,double)>
<megamek.common.IdealHex: int turns(double,double,double,double,double,double)>
<megamek.common.IdealHex: megamek.common.IdealHex get(megamek.common.Coords)>
<megamek.common.IdealHex: void <clinit>()>
<megamek.common.IdealHex: void <init>(megamek.common.Coords)>
<megamek.common.IdealHex: void ensureCacheSize(int,int)>
<megamek.common.Infantry$1: void <clinit>()>
<megamek.common.Infantry: boolean canAttackMeks()>
<megamek.common.Infantry: boolean hasActiveFieldArtillery()>
<megamek.common.Infantry: boolean hasDEST()>
<megamek.common.Infantry: boolean hasRearArmor(int)>
<megamek.common.Infantry: boolean hasSneakCamo()>
<megamek.common.Infantry: boolean hasSneakECM()>
<megamek.common.Infantry: boolean hasSneakIR()>
<megamek.common.Infantry: boolean isAntiMek()>
<megamek.common.Infantry: boolean isArmorEncumbering()>
<megamek.common.Infantry: boolean isMechanized()>
<megamek.common.Infantry: boolean isPlatoon()>
<megamek.common.Infantry: boolean loadWeapon(megamek.common.Mounted,megamek.common.Mounted)>
<megamek.common.Infantry: double getCost(boolean)>
<megamek.common.Infantry: double getDamageDivisor()>
<megamek.common.Infantry: double getDamagePerTrooper()>
<megamek.common.Infantry: float getWeight()>
<megamek.common.Infantry: int calculateBattleValue()>
<megamek.common.Infantry: int calculateBattleValue(boolean,boolean)>
<megamek.common.Infantry: int getDependentLocation(int)>
<megamek.common.Infantry: int getDugIn()>
<megamek.common.Infantry: int getHeatCapacity()>
<megamek.common.Infantry: int getInternal(int)>
<megamek.common.Infantry: int getJumpMP(boolean)>
<megamek.common.Infantry: int getOInternal(int)>
<megamek.common.Infantry: int getRunMP(boolean,boolean)>
<megamek.common.Infantry: int getSecondaryN()>
<megamek.common.Infantry: int getShootingStrength()>
<megamek.common.Infantry: int getSquadN()>
<megamek.common.Infantry: int getSquadSize()>
<megamek.common.Infantry: int getWalkMP(boolean,boolean)>
<megamek.common.Infantry: int locations()>
<megamek.common.Infantry: int[] getNoOfSlots()>
<megamek.common.Infantry: java.lang.String getArmorDesc()>
<megamek.common.Infantry: java.lang.String[] getLocationAbbrs()>
<megamek.common.Infantry: java.lang.String[] getLocationNames()>
<megamek.common.Infantry: megamek.common.HitData getTransferLocation(megamek.common.HitData)>
<megamek.common.Infantry: megamek.common.HitData rollHitLocation(int,int)>
<megamek.common.Infantry: megamek.common.PilotingRollData addEntityBonuses(megamek.common.PilotingRollData)>
<megamek.common.Infantry: megamek.common.weapons.infantry.InfantryWeapon getPrimaryWeapon()>
<megamek.common.Infantry: megamek.common.weapons.infantry.InfantryWeapon getSecondaryWeapon()>
<megamek.common.Infantry: void <clinit>()>
<megamek.common.Infantry: void <init>()>
<megamek.common.Infantry: void applyDamage()>
<megamek.common.Infantry: void autoSetInternal()>
<megamek.common.Infantry: void initializeInternal(int,int)>
<megamek.common.Infantry: void restore()>
<megamek.common.Infantry: void setAntiMek(boolean)>
<megamek.common.Infantry: void setArmorEncumbering(boolean)>
<megamek.common.Infantry: void setDEST(boolean)>
<megamek.common.Infantry: void setDamageDivisor(double)>
<megamek.common.Infantry: void setInternal(int,int)>
<megamek.common.Infantry: void setMovementMode(megamek.common.EntityMovementMode)>
<megamek.common.Infantry: void setPrimaryWeapon(megamek.common.weapons.infantry.InfantryWeapon)>
<megamek.common.Infantry: void setSecondaryN(int)>
<megamek.common.Infantry: void setSecondaryWeapon(megamek.common.weapons.infantry.InfantryWeapon)>
<megamek.common.Infantry: void setSneakCamo(boolean)>
<megamek.common.Infantry: void setSneakECM(boolean)>
<megamek.common.Infantry: void setSneakIR(boolean)>
<megamek.common.Infantry: void setSpaceSuit(boolean)>
<megamek.common.Infantry: void setSquadN(int)>
<megamek.common.Infantry: void setSquadSize(int)>
<megamek.common.InfantryBay: void <init>(int,int)>
<megamek.common.InfernoTracker$Inferno: void <init>(int,int)>
<megamek.common.InfernoTracker: void <clinit>()>
<megamek.common.InfernoTracker: void <init>()>
<megamek.common.InitiativeRoll: void <init>()>
<megamek.common.Jumpship: boolean hasHPG()>
<megamek.common.Jumpship: boolean hasLF()>
<megamek.common.Jumpship: boolean hasWeaponInArc(int)>
<megamek.common.Jumpship: boolean loadWeapon(megamek.common.Mounted,megamek.common.Mounted)>
<megamek.common.Jumpship: double getAccumulatedThrust()>
<megamek.common.Jumpship: double getArmorWeight(int)>
<megamek.common.Jumpship: double getBVTypeModifier()>
<megamek.common.Jumpship: double getCost(boolean)>
<megamek.common.Jumpship: double getFuelPerTon()>
<megamek.common.Jumpship: int calculateBattleValue(boolean,boolean)>
<megamek.common.Jumpship: int getAdjacentArcCCW(int)>
<megamek.common.Jumpship: int getAdjacentArcCW(int)>
<megamek.common.Jumpship: int getArcswGuns()>
<megamek.common.Jumpship: int getEscapePods()>
<megamek.common.Jumpship: int getGravDeck()>
<megamek.common.Jumpship: int getGravDeckHuge()>
<megamek.common.Jumpship: int getGravDeckLarge()>
<megamek.common.Jumpship: int getKFIntegrity()>
<megamek.common.Jumpship: int getLifeBoats()>
<megamek.common.Jumpship: int getNCrew()>
<megamek.common.Jumpship: int getNPassenger()>
<megamek.common.Jumpship: int getRunMP(boolean,boolean)>
<megamek.common.Jumpship: int getSailIntegrity()>
<megamek.common.Jumpship: int getWeaponArc(int)>
<megamek.common.Jumpship: int locations()>
<megamek.common.Jumpship: java.lang.String[] getLocationAbbrs()>
<megamek.common.Jumpship: java.lang.String[] getLocationNames()>
<megamek.common.Jumpship: void <clinit>()>
<megamek.common.Jumpship: void <init>()>
<megamek.common.Jumpship: void autoSetThresh()>
<megamek.common.Jumpship: void initializeKFIntegrity()>
<megamek.common.Jumpship: void initializeSailIntegrity()>
<megamek.common.Jumpship: void initializeThresh(int)>
<megamek.common.Jumpship: void setEngine(megamek.common.Engine)>
<megamek.common.Jumpship: void setEscapePods(int)>
<megamek.common.Jumpship: void setGravDeck(int)>
<megamek.common.Jumpship: void setGravDeckHuge(int)>
<megamek.common.Jumpship: void setGravDeckLarge(int)>
<megamek.common.Jumpship: void setHPG(boolean)>
<megamek.common.Jumpship: void setKFIntegrity(int)>
<megamek.common.Jumpship: void setLF(boolean)>
<megamek.common.Jumpship: void setLifeBoats(int)>
<megamek.common.Jumpship: void setNCrew(int)>
<megamek.common.Jumpship: void setNPassenger(int)>
<megamek.common.Jumpship: void setSailIntegrity(int)>
<megamek.common.Jumpship: void setThresh(int,int)>
<megamek.common.LandAirMech: int getJumpHeat(int)>
<megamek.common.LandAirMech: int getJumpMP()>
<megamek.common.LandAirMech: int getOriginalJumpMP()>
<megamek.common.LandAirMech: int getOriginalWalkMP()>
<megamek.common.LandAirMech: void <init>(int,int)>
<megamek.common.LargeSupportTank: int locations()>
<megamek.common.LargeSupportTank: java.lang.String[] getLocationAbbrs()>
<megamek.common.LargeSupportTank: java.lang.String[] getLocationNames()>
<megamek.common.LargeSupportTank: void <clinit>()>
<megamek.common.LargeSupportTank: void <init>()>
<megamek.common.LightVehicleBay: void <init>(int,int)>
<megamek.common.LocationFullException: void <init>(java.lang.String)>
<megamek.common.LosEffects$AttackInfo: void <init>()>
<megamek.common.LosEffects: boolean canSee()>
<megamek.common.LosEffects: boolean isAttackerCover()>
<megamek.common.LosEffects: boolean isBlockedByWater()>
<megamek.common.LosEffects: boolean isDeadZone(megamek.common.IGame,megamek.common.LosEffects$AttackInfo)>
<megamek.common.LosEffects: int dividedLeftBetter(java.util.ArrayList,megamek.common.IGame,megamek.common.LosEffects$AttackInfo,boolean,megamek.common.LosEffects)>
<megamek.common.LosEffects: int getHeavySmoke()>
<megamek.common.LosEffects: int getLightSmoke()>
<megamek.common.LosEffects: int getTargetCover()>
<megamek.common.LosEffects: megamek.common.Building getThruBldg()>
<megamek.common.LosEffects: megamek.common.LosEffects calculateLos(megamek.common.IGame,int,megamek.common.Targetable)>
<megamek.common.LosEffects: megamek.common.LosEffects calculateLos(megamek.common.IGame,int,megamek.common.Targetable,boolean)>
<megamek.common.LosEffects: megamek.common.LosEffects calculateLos(megamek.common.IGame,megamek.common.LosEffects$AttackInfo)>
<megamek.common.LosEffects: megamek.common.LosEffects losDivided(megamek.common.IGame,megamek.common.LosEffects$AttackInfo)>
<megamek.common.LosEffects: megamek.common.LosEffects losForCoords(megamek.common.IGame,megamek.common.LosEffects$AttackInfo,megamek.common.Coords,megamek.common.Building)>
<megamek.common.LosEffects: megamek.common.LosEffects losStraight(megamek.common.IGame,megamek.common.LosEffects$AttackInfo)>
<megamek.common.LosEffects: megamek.common.LosEffects$AttackInfo buildAttackInfo(megamek.common.Coords,megamek.common.Coords,int,int,int,int)>
<megamek.common.LosEffects: megamek.common.ToHitData losModifiers(megamek.common.IGame)>
<megamek.common.LosEffects: megamek.common.ToHitData losModifiers(megamek.common.IGame,int)>
<megamek.common.LosEffects: void <init>()>
<megamek.common.LosEffects: void add(megamek.common.LosEffects)>
<megamek.common.LosEffects: void setMinimumWaterDepth(int)>
<megamek.common.LosEffects: void setTargetCover(int)>
<megamek.common.LosEffects: void setThruBldg(megamek.common.Building)>
<megamek.common.MMRandom$CryptoRandom$1: void <init>(megamek.common.MMRandom$CryptoRandom)>
<megamek.common.MMRandom$CryptoRandom: int randomInt(int)>
<megamek.common.MMRandom$CryptoRandom: void <init>()>
<megamek.common.MMRandom$Pool36Random: megamek.common.Roll d6(int)>
<megamek.common.MMRandom$Pool36Random: void <init>()>
<megamek.common.MMRandom$Pool36Random: void initPool()>
<megamek.common.MMRandom$Pool36Random: void shufflePool()>
<megamek.common.MMRandom$SunRandom: int randomInt(int)>
<megamek.common.MMRandom$SunRandom: void <init>()>
<megamek.common.MMRandom: megamek.common.MMRandom generate(int)>
<megamek.common.MMRandom: megamek.common.Roll d6()>
<megamek.common.MMRandom: megamek.common.Roll d6(int)>
<megamek.common.MMRandom: void <init>()>
<megamek.common.MMRoll: int getIntValue()>
<megamek.common.MMRoll: java.lang.String getReport()>
<megamek.common.MMRoll: void <init>(megamek.common.MMRandom,int)>
<megamek.common.MMRoll: void <init>(megamek.common.MMRandom,int,int)>
<megamek.common.MMRoll: void addRoll(megamek.common.MMRandom)>
<megamek.common.MMShuffle: int getIntValue()>
<megamek.common.MMShuffle: java.lang.String getReport()>
<megamek.common.MMShuffle: void <init>(int,int)>
<megamek.common.MMShuffle: void setDeal(int)>
<megamek.common.MapSettings: int getAlgorithmToUse()>
<megamek.common.MapSettings: int getBoardHeight()>
<megamek.common.MapSettings: int getBoardWidth()>
<megamek.common.MapSettings: int getCityBlocks()>
<megamek.common.MapSettings: int getCityDensity()>
<megamek.common.MapSettings: int getCityMaxCF()>
<megamek.common.MapSettings: int getCityMaxFloors()>
<megamek.common.MapSettings: int getCityMinCF()>
<megamek.common.MapSettings: int getCityMinFloors()>
<megamek.common.MapSettings: int getCliffs()>
<megamek.common.MapSettings: int getFxMod()>
<megamek.common.MapSettings: int getHilliness()>
<megamek.common.MapSettings: int getInvertNegativeTerrain()>
<megamek.common.MapSettings: int getMapHeight()>
<megamek.common.MapSettings: int getMapWidth()>
<megamek.common.MapSettings: int getMaxCraters()>
<megamek.common.MapSettings: int getMaxForestSize()>
<megamek.common.MapSettings: int getMaxForestSpots()>
<megamek.common.MapSettings: int getMaxFortifiedSize()>
<megamek.common.MapSettings: int getMaxFortifiedSpots()>
<megamek.common.MapSettings: int getMaxIceSize()>
<megamek.common.MapSettings: int getMaxIceSpots()>
<megamek.common.MapSettings: int getMaxPavementSize()>
<megamek.common.MapSettings: int getMaxPavementSpots()>
<megamek.common.MapSettings: int getMaxPlantedFieldSize()>
<megamek.common.MapSettings: int getMaxPlantedFieldSpots()>
<megamek.common.MapSettings: int getMaxRadius()>
<megamek.common.MapSettings: int getMaxRoughSize()>
<megamek.common.MapSettings: int getMaxRoughSpots()>
<megamek.common.MapSettings: int getMaxRubbleSize()>
<megamek.common.MapSettings: int getMaxRubbleSpots()>
<megamek.common.MapSettings: int getMaxSandSize()>
<megamek.common.MapSettings: int getMaxSandSpots()>
<megamek.common.MapSettings: int getMaxSwampSize()>
<megamek.common.MapSettings: int getMaxSwampSpots()>
<megamek.common.MapSettings: int getMaxWaterSize()>
<megamek.common.MapSettings: int getMaxWaterSpots()>
<megamek.common.MapSettings: int getMedium()>
<megamek.common.MapSettings: int getMinCraters()>
<megamek.common.MapSettings: int getMinForestSize()>
<megamek.common.MapSettings: int getMinForestSpots()>
<megamek.common.MapSettings: int getMinFortifiedSize()>
<megamek.common.MapSettings: int getMinFortifiedSpots()>
<megamek.common.MapSettings: int getMinIceSize()>
<megamek.common.MapSettings: int getMinIceSpots()>
<megamek.common.MapSettings: int getMinPavementSize()>
<megamek.common.MapSettings: int getMinPavementSpots()>
<megamek.common.MapSettings: int getMinPlantedFieldSize()>
<megamek.common.MapSettings: int getMinPlantedFieldSpots()>
<megamek.common.MapSettings: int getMinRadius()>
<megamek.common.MapSettings: int getMinRoughSize()>
<megamek.common.MapSettings: int getMinRoughSpots()>
<megamek.common.MapSettings: int getMinRubbleSize()>
<megamek.common.MapSettings: int getMinRubbleSpots()>
<megamek.common.MapSettings: int getMinSandSize()>
<megamek.common.MapSettings: int getMinSandSpots()>
<megamek.common.MapSettings: int getMinSwampSize()>
<megamek.common.MapSettings: int getMinSwampSpots()>
<megamek.common.MapSettings: int getMinWaterSize()>
<megamek.common.MapSettings: int getMinWaterSpots()>
<megamek.common.MapSettings: int getMountainHeightMax()>
<megamek.common.MapSettings: int getMountainHeightMin()>
<megamek.common.MapSettings: int getMountainPeaks()>
<megamek.common.MapSettings: int getMountainStyle()>
<megamek.common.MapSettings: int getMountainWidthMax()>
<megamek.common.MapSettings: int getMountainWidthMin()>
<megamek.common.MapSettings: int getProbCrater()>
<megamek.common.MapSettings: int getProbDeep()>
<megamek.common.MapSettings: int getProbDrought()>
<megamek.common.MapSettings: int getProbFlood()>
<megamek.common.MapSettings: int getProbForestFire()>
<megamek.common.MapSettings: int getProbFreeze()>
<megamek.common.MapSettings: int getProbHeavy()>
<megamek.common.MapSettings: int getProbInvert()>
<megamek.common.MapSettings: int getProbRiver()>
<megamek.common.MapSettings: int getProbRoad()>
<megamek.common.MapSettings: int getRange()>
<megamek.common.MapSettings: int getTownSize()>
<megamek.common.MapSettings: java.lang.String getCityType()>
<megamek.common.MapSettings: java.lang.String getTheme()>
<megamek.common.MapSettings: java.util.ArrayList getBoardBuildings()>
<megamek.common.MapSettings: java.util.ArrayList getBoardsSelectedVector()>
<megamek.common.MapSettings: void <clinit>()>
<megamek.common.MapSettings: void <init>()>
<megamek.common.MapSettings: void <init>(int,int,int,int)>
<megamek.common.MapSettings: void replaceBoardWithRandom(java.lang.String)>
<megamek.common.MapSettings: void setBoardSize(int,int)>
<megamek.common.MapSettings: void setBoardsAvailableVector(java.util.ArrayList)>
<megamek.common.MapSettings: void setMapSize(int,int)>
<megamek.common.MapSettings: void setNullBoards(java.lang.String)>
<megamek.common.Mech$1: void <init>(megamek.common.Mech)>
<megamek.common.Mech: boolean addCockpit()>
<megamek.common.Mech: boolean addCompactGyro()>
<megamek.common.Mech: boolean addEngineCrits()>
<megamek.common.Mech: boolean addGyro()>
<megamek.common.Mech: boolean hasArmedMASC()>
<megamek.common.Mech: boolean hasArmedMASCAndSuperCharger()>
<megamek.common.Mech: boolean hasArmoredCockpit()>
<megamek.common.Mech: boolean hasArmoredEngine()>
<megamek.common.Mech: boolean hasArmoredGyro()>
<megamek.common.Mech: boolean hasCASEII(int)>
<megamek.common.Mech: boolean hasChameleonShield()>
<megamek.common.Mech: boolean hasDoubleHeatSinks()>
<megamek.common.Mech: boolean hasEiCockpit()>
<megamek.common.Mech: boolean hasFullHeadEject()>
<megamek.common.Mech: boolean hasIndustrialTSM()>
<megamek.common.Mech: boolean hasJumpBoosters()>
<megamek.common.Mech: boolean hasMASC()>
<megamek.common.Mech: boolean hasMASCAndSuperCharger()>
<megamek.common.Mech: boolean hasModularArmor()>
<megamek.common.Mech: boolean hasNullSig()>
<megamek.common.Mech: boolean hasRearArmor(int)>
<megamek.common.Mech: boolean hasTSM()>
<megamek.common.Mech: boolean hasVoidSig()>
<megamek.common.Mech: boolean isArm(int)>
<megamek.common.Mech: boolean isIndustrial()>
<megamek.common.Mech: boolean isPrimitive()>
<megamek.common.Mech: boolean isShutDown()>
<megamek.common.Mech: boolean isStalled()>
<megamek.common.Mech: boolean isStealthActive()>
<megamek.common.Mech: boolean legHasHipCrit(int)>
<megamek.common.Mech: boolean locationIsLeg(int)>
<megamek.common.Mech: double getActuatorCost()>
<megamek.common.Mech: double getArmoredComponentBV()>
<megamek.common.Mech: double getCost(boolean)>
<megamek.common.Mech: double getCost(java.lang.StringBuffer,boolean)>
<megamek.common.Mech: double getGyroMultiplier()>
<megamek.common.Mech: int calculateBattleValue()>
<megamek.common.Mech: int calculateBattleValue(boolean,boolean)>
<megamek.common.Mech: int calculateWalk()>
<megamek.common.Mech: int countBadLegs()>
<megamek.common.Mech: int countLegActuatorCrits(int)>
<megamek.common.Mech: int getActiveSinks()>
<megamek.common.Mech: int getArmor(int,boolean)>
<megamek.common.Mech: int getBARRating()>
<megamek.common.Mech: int getBattleForceArmorPoints()>
<megamek.common.Mech: int getBattleForcePoints()>
<megamek.common.Mech: int getBattleForceSize()>
<megamek.common.Mech: int getBattleForceStandardWeaponsDamage(int,int,boolean,boolean)>
<megamek.common.Mech: int getBattleForceStructurePoints()>
<megamek.common.Mech: int getCockpitType()>
<megamek.common.Mech: int getCockpitTypeForString(java.lang.String)>
<megamek.common.Mech: int getGyroType()>
<megamek.common.Mech: int getGyroTypeForString(java.lang.String)>
<megamek.common.Mech: int getHeatCapacity()>
<megamek.common.Mech: int getHeatCapacity(boolean)>
<megamek.common.Mech: int getInnerLocation(int)>
<megamek.common.Mech: int getJumpHeat(int)>
<megamek.common.Mech: int getJumpMP()>
<megamek.common.Mech: int getJumpMP(boolean)>
<megamek.common.Mech: int getJumpType()>
<megamek.common.Mech: int getNumberOfSinks()>
<megamek.common.Mech: int getOArmor(int,boolean)>
<megamek.common.Mech: int getOriginalRunMPwithoutMASC()>
<megamek.common.Mech: int getPartialWingHeatBonus()>
<megamek.common.Mech: int getPartialWingJumpBonus(megamek.common.Mounted)>
<megamek.common.Mech: int getRunHeat()>
<megamek.common.Mech: int getRunMP(boolean,boolean)>
<megamek.common.Mech: int getRunMPwithoutMASC(boolean,boolean)>
<megamek.common.Mech: int heatSinks()>
<megamek.common.Mech: int leastRestrictiveLoc(int,int)>
<megamek.common.Mech: int locations()>
<megamek.common.Mech: int mostRestrictiveLoc(int,int)>
<megamek.common.Mech: int restrictScore(int)>
<megamek.common.Mech: java.lang.String getBattleForceSpecialAbilites()>
<megamek.common.Mech: java.lang.String getCockpitTypeString()>
<megamek.common.Mech: java.lang.String getCockpitTypeString(int)>
<megamek.common.Mech: java.lang.String getGyroTypeString()>
<megamek.common.Mech: java.lang.String getGyroTypeString(int)>
<megamek.common.Mech: java.lang.String getRunMPasString()>
<megamek.common.Mech: long getBattleForceJumpPoints()>
<megamek.common.Mech: long getBattleForceMovementPoints()>
<megamek.common.Mech: void <clinit>()>
<megamek.common.Mech: void <init>(int,int)>
<megamek.common.Mech: void addClanCase()>
<megamek.common.Mech: void addCostDetails(double,java.lang.StringBuffer,double[])>
<megamek.common.Mech: void addEngineSinks(int,boolean)>
<megamek.common.Mech: void addEngineSinks(int,boolean,boolean)>
<megamek.common.Mech: void addEngineSinks(int,java.lang.String)>
<megamek.common.Mech: void addEngineSinks(java.lang.String,int)>
<megamek.common.Mech: void addEquipment(megamek.common.Mounted,int,boolean)>
<megamek.common.Mech: void autoSetInternal()>
<megamek.common.Mech: void initializeRearArmor(int,int)>
<megamek.common.Mech: void setArmor(int,int,boolean)>
<megamek.common.Mech: void setAutoEject(boolean)>
<megamek.common.Mech: void setCockpitType(int)>
<megamek.common.Mech: void setEngine(megamek.common.Engine)>
<megamek.common.Mech: void setFullHeadEject(boolean)>
<megamek.common.Mech: void setGyroType(int)>
<megamek.common.Mech: void setOmni(boolean)>
<megamek.common.MechBay: void <init>(int,int)>
<megamek.common.MechFileParser: megamek.common.Entity getEntity()>
<megamek.common.MechFileParser: void <clinit>()>
<megamek.common.MechFileParser: void <init>(java.io.File,java.lang.String)>
<megamek.common.MechFileParser: void <init>(java.io.File,java.lang.String,boolean)>
<megamek.common.MechFileParser: void parse(java.io.InputStream,java.lang.String,boolean)>
<megamek.common.MechFileParser: void postLoadInit(megamek.common.Entity)>
<megamek.common.MechSummaryCache$1: void <init>()>
<megamek.common.MechSummaryCache: megamek.common.MechSummary getMech(java.lang.String)>
<megamek.common.MechSummaryCache: megamek.common.MechSummaryCache getInstance()>
<megamek.common.MechSummaryCache: megamek.common.MechSummary[] getAllMechs()>
<megamek.common.MechSummaryCache: void <clinit>()>
<megamek.common.MechSummaryCache: void <init>()>
<megamek.common.MechSummaryCache: void block()>
<megamek.common.MechWarrior: void <init>(megamek.common.Entity)>
<megamek.common.MechWarrior: void setLanded(boolean)>
<megamek.common.MechWarrior: void setOriginalRideExternalId(int)>
<megamek.common.MechWarrior: void setOriginalRideId(int)>
<megamek.common.Messages: java.lang.String getString(java.lang.String)>
<megamek.common.Messages: void <clinit>()>
<megamek.common.Minefield: java.lang.String getDisplayableName(int)>
<megamek.common.Minefield: void <clinit>()>
<megamek.common.MinefieldTarget: boolean isImmobile()>
<megamek.common.MinefieldTarget: int coordsToId(megamek.common.Coords)>
<megamek.common.MinefieldTarget: int getElevation()>
<megamek.common.MinefieldTarget: int getTargetId()>
<megamek.common.MinefieldTarget: int getTargetType()>
<megamek.common.MinefieldTarget: java.lang.String getDisplayName()>
<megamek.common.MinefieldTarget: megamek.common.Coords getPosition()>
<megamek.common.MinefieldTarget: megamek.common.Coords idToCoords(int)>
<megamek.common.MinefieldTarget: void <init>(megamek.common.Coords,megamek.common.IBoard)>
<megamek.common.MiscType: megamek.common.MiscType createAdvancedFireControl()>
<megamek.common.MiscType: megamek.common.MiscType createArmoredChassis()>
<megamek.common.MiscType: megamek.common.MiscType createArmoredCowl()>
<megamek.common.MiscType: megamek.common.MiscType createArtemisV()>
<megamek.common.MiscType: megamek.common.MiscType createBAAPMount()>
<megamek.common.MiscType: megamek.common.MiscType createBAArmoredGlove()>
<megamek.common.MiscType: megamek.common.MiscType createBABasicManipulator()>
<megamek.common.MiscType: megamek.common.MiscType createBABasicManipulatorMineClearance()>
<megamek.common.MiscType: megamek.common.MiscType createBABattleClaw()>
<megamek.common.MiscType: megamek.common.MiscType createBABattleClawMagnets()>
<megamek.common.MiscType: megamek.common.MiscType createBABattleClawVibro()>
<megamek.common.MiscType: megamek.common.MiscType createBACargoLifter()>
<megamek.common.MiscType: megamek.common.MiscType createBACuttingTorch()>
<megamek.common.MiscType: megamek.common.MiscType createBAFireResistantArmor()>
<megamek.common.MiscType: megamek.common.MiscType createBAHeavyBattleClaw()>
<megamek.common.MiscType: megamek.common.MiscType createBAHeavyBattleClawMagnet()>
<megamek.common.MiscType: megamek.common.MiscType createBAHeavyBattleClawVibro()>
<megamek.common.MiscType: megamek.common.MiscType createBAIndustrialDrill()>
<megamek.common.MiscType: megamek.common.MiscType createBAMagneticClamp()>
<megamek.common.MiscType: megamek.common.MiscType createBASalvageArm()>
<megamek.common.MiscType: megamek.common.MiscType createBASpaceOperationsAdaptation()>
<megamek.common.MiscType: megamek.common.MiscType createBackhoe()>
<megamek.common.MiscType: megamek.common.MiscType createBasicFireControl()>
<megamek.common.MiscType: megamek.common.MiscType createBasicStealth()>
<megamek.common.MiscType: megamek.common.MiscType createBeagleActiveProbe()>
<megamek.common.MiscType: megamek.common.MiscType createBloodhoundActiveProbe()>
<megamek.common.MiscType: megamek.common.MiscType createBlueShield()>
<megamek.common.MiscType: megamek.common.MiscType createBridgeKit()>
<megamek.common.MiscType: megamek.common.MiscType createC3I()>
<megamek.common.MiscType: megamek.common.MiscType createC3S()>
<megamek.common.MiscType: megamek.common.MiscType createCLAES()>
<megamek.common.MiscType: megamek.common.MiscType createCLAPPod()>
<megamek.common.MiscType: megamek.common.MiscType createCLActiveProbe()>
<megamek.common.MiscType: megamek.common.MiscType createCLAngelECM()>
<megamek.common.MiscType: megamek.common.MiscType createCLArtemis()>
<megamek.common.MiscType: megamek.common.MiscType createCLBALightActiveProbe()>
<megamek.common.MiscType: megamek.common.MiscType createCLBuzzsaw()>
<megamek.common.MiscType: megamek.common.MiscType createCLCASE()>
<megamek.common.MiscType: megamek.common.MiscType createCLCASEII()>
<megamek.common.MiscType: megamek.common.MiscType createCLDoubleHeatSink()>
<megamek.common.MiscType: megamek.common.MiscType createCLECM()>
<megamek.common.MiscType: megamek.common.MiscType createCLHarJel()>
<megamek.common.MiscType: megamek.common.MiscType createCLHeadTurret()>
<megamek.common.MiscType: megamek.common.MiscType createCLImprovedJumpJet()>
<megamek.common.MiscType: megamek.common.MiscType createCLImprovedSensors()>
<megamek.common.MiscType: megamek.common.MiscType createCLLaserHeatSink()>
<megamek.common.MiscType: megamek.common.MiscType createCLLaserInsulator()>
<megamek.common.MiscType: megamek.common.MiscType createCLLightActiveProbe()>
<megamek.common.MiscType: megamek.common.MiscType createCLMASC()>
<megamek.common.MiscType: megamek.common.MiscType createCLMASS()>
<megamek.common.MiscType: megamek.common.MiscType createCLMastMount()>
<megamek.common.MiscType: megamek.common.MiscType createCLModularArmor()>
<megamek.common.MiscType: megamek.common.MiscType createCLPartialWing()>
<megamek.common.MiscType: megamek.common.MiscType createCLProtoMyomerBooster()>
<megamek.common.MiscType: megamek.common.MiscType createCLQuadTurret()>
<megamek.common.MiscType: megamek.common.MiscType createCLShoulderTurret()>
<megamek.common.MiscType: megamek.common.MiscType createCLSuperCharger()>
<megamek.common.MiscType: megamek.common.MiscType createCLTargComp()>
<megamek.common.MiscType: megamek.common.MiscType createCLUMU()>
<megamek.common.MiscType: megamek.common.MiscType createCLWreckingBall()>
<megamek.common.MiscType: megamek.common.MiscType createCargo1()>
<megamek.common.MiscType: megamek.common.MiscType createCargoContainer()>
<megamek.common.MiscType: megamek.common.MiscType createChainWhip()>
<megamek.common.MiscType: megamek.common.MiscType createChainsaw()>
<megamek.common.MiscType: megamek.common.MiscType createChameleonLightPolarizationShield()>
<megamek.common.MiscType: megamek.common.MiscType createClanDuneBuggyChassis()>
<megamek.common.MiscType: megamek.common.MiscType createClanFlotationHull()>
<megamek.common.MiscType: megamek.common.MiscType createClanFullyAmphibiousChassis()>
<megamek.common.MiscType: megamek.common.MiscType createClanLimitedAmphibiousChassis()>
<megamek.common.MiscType: megamek.common.MiscType createCombine()>
<megamek.common.MiscType: megamek.common.MiscType createCommercialArmor()>
<megamek.common.MiscType: megamek.common.MiscType createCommsGear1()>
<megamek.common.MiscType: megamek.common.MiscType createCommsGear10()>
<megamek.common.MiscType: megamek.common.MiscType createCommsGear11()>
<megamek.common.MiscType: megamek.common.MiscType createCommsGear12()>
<megamek.common.MiscType: megamek.common.MiscType createCommsGear13()>
<megamek.common.MiscType: megamek.common.MiscType createCommsGear14()>
<megamek.common.MiscType: megamek.common.MiscType createCommsGear15()>
<megamek.common.MiscType: megamek.common.MiscType createCommsGear2()>
<megamek.common.MiscType: megamek.common.MiscType createCommsGear3()>
<megamek.common.MiscType: megamek.common.MiscType createCommsGear4()>
<megamek.common.MiscType: megamek.common.MiscType createCommsGear5()>
<megamek.common.MiscType: megamek.common.MiscType createCommsGear6()>
<megamek.common.MiscType: megamek.common.MiscType createCommsGear7()>
<megamek.common.MiscType: megamek.common.MiscType createCommsGear8()>
<megamek.common.MiscType: megamek.common.MiscType createCommsGear9()>
<megamek.common.MiscType: megamek.common.MiscType createCompositeStructure()>
<megamek.common.MiscType: megamek.common.MiscType createCoolantSystem()>
<megamek.common.MiscType: megamek.common.MiscType createDemolitionCharge()>
<megamek.common.MiscType: megamek.common.MiscType createDualSaw()>
<megamek.common.MiscType: megamek.common.MiscType createEjectionSeat()>
<megamek.common.MiscType: megamek.common.MiscType createEndoComposite()>
<megamek.common.MiscType: megamek.common.MiscType createEndoSteel()>
<megamek.common.MiscType: megamek.common.MiscType createEndoSteelPrototype()>
<megamek.common.MiscType: megamek.common.MiscType createEnvironmentalSealing()>
<megamek.common.MiscType: megamek.common.MiscType createFerroFibrous()>
<megamek.common.MiscType: megamek.common.MiscType createFerroFibrousPrototype()>
<megamek.common.MiscType: megamek.common.MiscType createFerroLamellorArmor()>
<megamek.common.MiscType: megamek.common.MiscType createFrontDumper()>
<megamek.common.MiscType: megamek.common.MiscType createFuel1()>
<megamek.common.MiscType: megamek.common.MiscType createFuelHalf()>
<megamek.common.MiscType: megamek.common.MiscType createGECM()>
<megamek.common.MiscType: megamek.common.MiscType createGirderClub()>
<megamek.common.MiscType: megamek.common.MiscType createHalfCargo()>
<megamek.common.MiscType: megamek.common.MiscType createHalfLiquidCargo()>
<megamek.common.MiscType: megamek.common.MiscType createHardenedArmor()>
<megamek.common.MiscType: megamek.common.MiscType createHatchet()>
<megamek.common.MiscType: megamek.common.MiscType createHeatSink()>
<megamek.common.MiscType: megamek.common.MiscType createHeavyArmor()>
<megamek.common.MiscType: megamek.common.MiscType createHeavyFerroFibrous()>
<megamek.common.MiscType: megamek.common.MiscType createHeavyIndustrialArmor()>
<megamek.common.MiscType: megamek.common.MiscType createHitch()>
<megamek.common.MiscType: megamek.common.MiscType createIS1CompactHeatSink()>
<megamek.common.MiscType: megamek.common.MiscType createIS2CompactHeatSinks()>
<megamek.common.MiscType: megamek.common.MiscType createISAES()>
<megamek.common.MiscType: megamek.common.MiscType createISAPPod()>
<megamek.common.MiscType: megamek.common.MiscType createISAngelECM()>
<megamek.common.MiscType: megamek.common.MiscType createISApolloFCS()>
<megamek.common.MiscType: megamek.common.MiscType createISArtemis()>
<megamek.common.MiscType: megamek.common.MiscType createISBALightActiveProbe()>
<megamek.common.MiscType: megamek.common.MiscType createISBuzzsaw()>
<megamek.common.MiscType: megamek.common.MiscType createISCASE()>
<megamek.common.MiscType: megamek.common.MiscType createISCASEII()>
<megamek.common.MiscType: megamek.common.MiscType createISClaw()>
<megamek.common.MiscType: megamek.common.MiscType createISCollapsibleCommandModule()>
<megamek.common.MiscType: megamek.common.MiscType createISDoubleHeatSink()>
<megamek.common.MiscType: megamek.common.MiscType createISDuneBuggyChassis()>
<megamek.common.MiscType: megamek.common.MiscType createISEWEquipment()>
<megamek.common.MiscType: megamek.common.MiscType createISFlail()>
<megamek.common.MiscType: megamek.common.MiscType createISFlotationHull()>
<megamek.common.MiscType: megamek.common.MiscType createISFullyAmphibiousChassis()>
<megamek.common.MiscType: megamek.common.MiscType createISHarJel()>
<megamek.common.MiscType: megamek.common.MiscType createISHeadTurret()>
<megamek.common.MiscType: megamek.common.MiscType createISImprovedSensors()>
<megamek.common.MiscType: megamek.common.MiscType createISLance()>
<megamek.common.MiscType: megamek.common.MiscType createISLargeShield()>
<megamek.common.MiscType: megamek.common.MiscType createISLargeVibroblade()>
<megamek.common.MiscType: megamek.common.MiscType createISLaserInsulator()>
<megamek.common.MiscType: megamek.common.MiscType createISLimitedAmphibiousChassis()>
<megamek.common.MiscType: megamek.common.MiscType createISMASC()>
<megamek.common.MiscType: megamek.common.MiscType createISMASS()>
<megamek.common.MiscType: megamek.common.MiscType createISMastMount()>
<megamek.common.MiscType: megamek.common.MiscType createISMediumShield()>
<megamek.common.MiscType: megamek.common.MiscType createISMediumVibroblade()>
<megamek.common.MiscType: megamek.common.MiscType createISModularArmor()>
<megamek.common.MiscType: megamek.common.MiscType createISPPCCapacitor()>
<megamek.common.MiscType: megamek.common.MiscType createISPartialWing()>
<megamek.common.MiscType: megamek.common.MiscType createISQuadTurret()>
<megamek.common.MiscType: megamek.common.MiscType createISShoulderTurret()>
<megamek.common.MiscType: megamek.common.MiscType createISSmallShield()>
<megamek.common.MiscType: megamek.common.MiscType createISSmallVibroblade()>
<megamek.common.MiscType: megamek.common.MiscType createISSuperCharger()>
<megamek.common.MiscType: megamek.common.MiscType createISTHBAngelECM()>
<megamek.common.MiscType: megamek.common.MiscType createISTargComp()>
<megamek.common.MiscType: megamek.common.MiscType createISUMU()>
<megamek.common.MiscType: megamek.common.MiscType createISWreckingBall()>
<megamek.common.MiscType: megamek.common.MiscType createImprovedJumpJet()>
<megamek.common.MiscType: megamek.common.MiscType createImprovedStealth()>
<megamek.common.MiscType: megamek.common.MiscType createIndustrialArmor()>
<megamek.common.MiscType: megamek.common.MiscType createIndustrialStructure()>
<megamek.common.MiscType: megamek.common.MiscType createIndustrialTSM()>
<megamek.common.MiscType: megamek.common.MiscType createJumpBooster()>
<megamek.common.MiscType: megamek.common.MiscType createJumpJet()>
<megamek.common.MiscType: megamek.common.MiscType createLeftDumper()>
<megamek.common.MiscType: megamek.common.MiscType createLiftHoist()>
<megamek.common.MiscType: megamek.common.MiscType createLightFerroFibrous()>
<megamek.common.MiscType: megamek.common.MiscType createLightMinesweeper()>
<megamek.common.MiscType: megamek.common.MiscType createLimbClub()>
<megamek.common.MiscType: megamek.common.MiscType createLiquidCargo1()>
<megamek.common.MiscType: megamek.common.MiscType createMASH()>
<megamek.common.MiscType: megamek.common.MiscType createMASHExtraTheater()>
<megamek.common.MiscType: megamek.common.MiscType createMace()>
<megamek.common.MiscType: megamek.common.MiscType createMechSprayer()>
<megamek.common.MiscType: megamek.common.MiscType createMekStealth()>
<megamek.common.MiscType: megamek.common.MiscType createMimeticCamo()>
<megamek.common.MiscType: megamek.common.MiscType createMine()>
<megamek.common.MiscType: megamek.common.MiscType createNullSignatureSystem()>
<megamek.common.MiscType: megamek.common.MiscType createParafoil()>
<megamek.common.MiscType: megamek.common.MiscType createParamedicEquipment()>
<megamek.common.MiscType: megamek.common.MiscType createPileDriver()>
<megamek.common.MiscType: megamek.common.MiscType createReactive()>
<megamek.common.MiscType: megamek.common.MiscType createRearDumper()>
<megamek.common.MiscType: megamek.common.MiscType createReflective()>
<megamek.common.MiscType: megamek.common.MiscType createReinforcedStructure()>
<megamek.common.MiscType: megamek.common.MiscType createRemoteSensorDispenser()>
<megamek.common.MiscType: megamek.common.MiscType createRetractableBlade()>
<megamek.common.MiscType: megamek.common.MiscType createRightDumper()>
<megamek.common.MiscType: megamek.common.MiscType createRockCutter()>
<megamek.common.MiscType: megamek.common.MiscType createSalvageArm()>
<megamek.common.MiscType: megamek.common.MiscType createSearchlight()>
<megamek.common.MiscType: megamek.common.MiscType createSimpleCamo()>
<megamek.common.MiscType: megamek.common.MiscType createSingleHexECM()>
<megamek.common.MiscType: megamek.common.MiscType createSpikes()>
<megamek.common.MiscType: megamek.common.MiscType createSpotWelder()>
<megamek.common.MiscType: megamek.common.MiscType createStandard()>
<megamek.common.MiscType: megamek.common.MiscType createStandardStealth()>
<megamek.common.MiscType: megamek.common.MiscType createSword()>
<megamek.common.MiscType: megamek.common.MiscType createTHBBloodhoundActiveProbe()>
<megamek.common.MiscType: megamek.common.MiscType createTHBMace()>
<megamek.common.MiscType: megamek.common.MiscType createTSM()>
<megamek.common.MiscType: megamek.common.MiscType createTalons()>
<megamek.common.MiscType: megamek.common.MiscType createTankSprayer()>
<megamek.common.MiscType: megamek.common.MiscType createTracks()>
<megamek.common.MiscType: megamek.common.MiscType createTractorModification()>
<megamek.common.MiscType: megamek.common.MiscType createTreeClub()>
<megamek.common.MiscType: megamek.common.MiscType createVacuumProtection()>
<megamek.common.MiscType: megamek.common.MiscType createVibroShovel()>
<megamek.common.MiscType: megamek.common.MiscType createVoidSignatureSystem()>
<megamek.common.MiscType: megamek.common.MiscType createWatchdogECM()>
<megamek.common.MiscType: void <clinit>()>
<megamek.common.MiscType: void <init>()>
<megamek.common.MiscType: void initializeTypes()>
<megamek.common.Mounted: boolean isArmored()>
<megamek.common.Mounted: boolean isReady()>
<megamek.common.Mounted: boolean isRearMounted()>
<megamek.common.Mounted: boolean isSplitable()>
<megamek.common.Mounted: boolean isWeaponGroup()>
<megamek.common.Mounted: int getFoundCrits()>
<megamek.common.Mounted: int getLocation()>
<megamek.common.Mounted: java.lang.String getName()>
<megamek.common.Mounted: megamek.common.EquipmentType getType()>
<megamek.common.Mounted: megamek.common.Mounted getLinked()>
<megamek.common.Mounted: void <init>(megamek.common.Entity,megamek.common.EquipmentType)>
<megamek.common.Mounted: void addAmmoToBay(int)>
<megamek.common.Mounted: void addWeaponToBay(int)>
<megamek.common.Mounted: void setArmored(boolean)>
<megamek.common.Mounted: void setBodyMounted(boolean)>
<megamek.common.Mounted: void setByShot(boolean)>
<megamek.common.Mounted: void setFacing(int)>
<megamek.common.Mounted: void setFoundCrits(int)>
<megamek.common.Mounted: void setLinked(megamek.common.Mounted)>
<megamek.common.Mounted: void setLinkedBy(megamek.common.Mounted)>
<megamek.common.Mounted: void setLocation(int)>
<megamek.common.Mounted: void setLocation(int,boolean)>
<megamek.common.Mounted: void setNWeapons(int)>
<megamek.common.Mounted: void setSecondLocation(int)>
<megamek.common.Mounted: void setSecondLocation(int,boolean)>
<megamek.common.Mounted: void setShotsLeft(int)>
<megamek.common.Mounted: void setSplit(boolean)>
<megamek.common.Mounted: void setTurretMounted(boolean)>
<megamek.common.Mounted: void setWeaponGroup(boolean)>
<megamek.common.OffBoardDirection: megamek.common.OffBoardDirection[] values()>
<megamek.common.OffBoardDirection: void <clinit>()>
<megamek.common.OffBoardDirection: void <init>(java.lang.String,int,int)>
<megamek.common.PhysicalResult: void <init>()>
<megamek.common.Pilot: boolean hasEdgeRemaining()>
<megamek.common.Pilot: boolean isActive()>
<megamek.common.Pilot: boolean isDead()>
<megamek.common.Pilot: boolean isDoomed()>
<megamek.common.Pilot: boolean isEjected()>
<megamek.common.Pilot: boolean isKoThisRound()>
<megamek.common.Pilot: boolean isPilotingFatigued(int)>
<megamek.common.Pilot: boolean isUnconscious()>
<megamek.common.Pilot: double getBVImplantMultiplier()>
<megamek.common.Pilot: double getBVSkillMultiplier()>
<megamek.common.Pilot: double getBVSkillMultiplier(boolean)>
<megamek.common.Pilot: double getBVSkillMultiplier(int,int)>
<megamek.common.Pilot: int getHits()>
<megamek.common.Pilot: int getPiloting()>
<megamek.common.Pilot: int getPilotingFatigueTurn()>
<megamek.common.Pilot: int getToughness()>
<megamek.common.Pilot: java.lang.String getName()>
<megamek.common.Pilot: megamek.common.options.PilotOptions getOptions()>
<megamek.common.Pilot: void <clinit>()>
<megamek.common.Pilot: void <init>()>
<megamek.common.Pilot: void <init>(java.lang.String,int,int)>
<megamek.common.Pilot: void decreaseEdge()>
<megamek.common.Pilot: void setDoomed(boolean)>
<megamek.common.Pilot: void setEjected(boolean)>
<megamek.common.Pilot: void setHits(int)>
<megamek.common.Pilot: void setKoThisRound(boolean)>
<megamek.common.Pilot: void setUnconscious(boolean)>
<megamek.common.PilotingRollData: void <init>(int)>
<megamek.common.PilotingRollData: void <init>(int,int,int,java.lang.String)>
<megamek.common.PilotingRollData: void <init>(int,int,java.lang.String)>
<megamek.common.PilotingRollData: void <init>(int,int,java.lang.String,boolean)>
<megamek.common.PlanetaryConditions: boolean isSandBlowing()>
<megamek.common.PlanetaryConditions: boolean isVacuum()>
<megamek.common.PlanetaryConditions: float getGravity()>
<megamek.common.PlanetaryConditions: int getAtmosphere()>
<megamek.common.PlanetaryConditions: int getGravityPilotPenalty()>
<megamek.common.PlanetaryConditions: int getIgniteModifiers()>
<megamek.common.PlanetaryConditions: int getLight()>
<megamek.common.PlanetaryConditions: int getLightHeatBonus(int)>
<megamek.common.PlanetaryConditions: int getLightHitPenalty(boolean)>
<megamek.common.PlanetaryConditions: int getLightPilotPenalty()>
<megamek.common.PlanetaryConditions: int getMovementMods(megamek.common.Entity)>
<megamek.common.PlanetaryConditions: int getTemperature()>
<megamek.common.PlanetaryConditions: int getTemperatureDifference(int,int)>
<megamek.common.PlanetaryConditions: int getVisualRange(megamek.common.Entity,boolean)>
<megamek.common.PlanetaryConditions: int getWeather()>
<megamek.common.PlanetaryConditions: int getWeatherPilotPenalty()>
<megamek.common.PlanetaryConditions: int getWindDirection()>
<megamek.common.PlanetaryConditions: int getWindPilotPenalty(megamek.common.Entity)>
<megamek.common.PlanetaryConditions: int getWindStrength()>
<megamek.common.PlanetaryConditions: java.lang.String cannotStartFire()>
<megamek.common.PlanetaryConditions: java.lang.String getLightCurrentName()>
<megamek.common.PlanetaryConditions: java.lang.String getWeatherCurrentName()>
<megamek.common.PlanetaryConditions: java.lang.String getWindCurrentName()>
<megamek.common.PlanetaryConditions: java.lang.String getWindDirName()>
<megamek.common.PlanetaryConditions: java.lang.String whyDoomed(megamek.common.Entity)>
<megamek.common.PlanetaryConditions: void <clinit>()>
<megamek.common.PlanetaryConditions: void <init>()>
<megamek.common.PlanetaryConditions: void determineWind()>
<megamek.common.Player: void <clinit>()>
<megamek.common.Protomech: boolean hasMainGun()>
<megamek.common.Protomech: boolean hasMyomerBooster()>
<megamek.common.Protomech: boolean hasRearArmor(int)>
<megamek.common.Protomech: double getCost(boolean)>
<megamek.common.Protomech: int calculateBattleValue()>
<megamek.common.Protomech: int calculateBattleValue(boolean,boolean)>
<megamek.common.Protomech: int getArmor(int,boolean)>
<megamek.common.Protomech: int getCritsHit(int)>
<megamek.common.Protomech: int getHeatCapacity()>
<megamek.common.Protomech: int getInternal(int)>
<megamek.common.Protomech: int getJumpMP()>
<megamek.common.Protomech: int getNumberOfCriticals(int)>
<megamek.common.Protomech: int getRunMP(boolean,boolean)>
<megamek.common.Protomech: int getWalkMP(boolean,boolean)>
<megamek.common.Protomech: int locations()>
<megamek.common.Protomech: java.lang.String getLocationAbbr(int)>
<megamek.common.Protomech: java.lang.String[] getLocationAbbrs()>
<megamek.common.Protomech: java.lang.String[] getLocationNames()>
<megamek.common.Protomech: megamek.common.Mounted addEquipment(megamek.common.EquipmentType,int)>
<megamek.common.Protomech: megamek.common.Mounted addEquipment(megamek.common.EquipmentType,int,boolean,int)>
<megamek.common.Protomech: void <clinit>()>
<megamek.common.Protomech: void <init>()>
<megamek.common.Protomech: void addEquipment(megamek.common.Mounted,int,boolean,int)>
<megamek.common.Protomech: void autoSetInternal()>
<megamek.common.Protomech: void setEngine(megamek.common.Engine)>
<megamek.common.Protomech: void setHasMainGun(boolean)>
<megamek.common.Protomech: void setInternal(int,int,int,int,int)>
<megamek.common.QuadMech: boolean hasFunctionalLegAES()>
<megamek.common.QuadMech: boolean isArm(int)>
<megamek.common.QuadMech: boolean locationIsLeg(int)>
<megamek.common.QuadMech: double getArmActuatorCost()>
<megamek.common.QuadMech: double getLegActuatorCost()>
<megamek.common.QuadMech: int getRunMP(boolean,boolean)>
<megamek.common.QuadMech: int getRunMPwithoutMASC(boolean,boolean)>
<megamek.common.QuadMech: int getWalkMP(boolean,boolean)>
<megamek.common.QuadMech: int[] getNoOfSlots()>
<megamek.common.QuadMech: java.lang.String[] getLocationAbbrs()>
<megamek.common.QuadMech: java.lang.String[] getLocationNames()>
<megamek.common.QuadMech: void <clinit>()>
<megamek.common.QuadMech: void <init>()>
<megamek.common.QuadMech: void <init>(int,int)>
<megamek.common.QuadMech: void <init>(java.lang.String,java.lang.String)>
<megamek.common.QuadMech: void setInternal(int,int,int,int,int)>
<megamek.common.Report: boolean isValueObscured(int)>
<megamek.common.Report: int dataCount()>
<megamek.common.Report: void <init>()>
<megamek.common.Report: void <init>(int)>
<megamek.common.Report: void <init>(int,int)>
<megamek.common.Report: void <init>(megamek.common.Report)>
<megamek.common.Report: void add(int)>
<megamek.common.Report: void add(int,boolean)>
<megamek.common.Report: void add(java.lang.String)>
<megamek.common.Report: void add(java.lang.String,boolean)>
<megamek.common.Report: void addDesc(megamek.common.Entity)>
<megamek.common.Report: void addNewline(java.util.Vector)>
<megamek.common.Report: void addObscuredRecipient(java.lang.String)>
<megamek.common.Report: void choose(boolean)>
<megamek.common.Report: void hideData(int)>
<megamek.common.Report: void indent()>
<megamek.common.Report: void indent(int)>
<megamek.common.Report: void indentAll(java.util.Vector,int)>
<megamek.common.Roll: long getNextId()>
<megamek.common.Roll: void <clinit>()>
<megamek.common.Roll: void <init>(int,int)>
<megamek.common.Sensor: void <clinit>()>
<megamek.common.Sensor: void <init>(int)>
<megamek.common.SmallCraft: boolean hasWeaponInArc(int,boolean)>
<megamek.common.SmallCraft: boolean loadWeapon(megamek.common.Mounted,megamek.common.Mounted)>
<megamek.common.SmallCraft: double getArmorWeight()>
<megamek.common.SmallCraft: double getBVTypeModifier()>
<megamek.common.SmallCraft: double getCost(boolean)>
<megamek.common.SmallCraft: int getArcswGuns()>
<megamek.common.SmallCraft: int getNCrew()>
<megamek.common.SmallCraft: int getNPassenger()>
<megamek.common.SmallCraft: int getWeaponArc(int)>
<megamek.common.SmallCraft: int locations()>
<megamek.common.SmallCraft: java.lang.String[] getLocationAbbrs()>
<megamek.common.SmallCraft: java.lang.String[] getLocationNames()>
<megamek.common.SmallCraft: void <clinit>()>
<megamek.common.SmallCraft: void <init>()>
<megamek.common.SmallCraft: void setEngine(megamek.common.Engine)>
<megamek.common.SmallCraft: void setNCrew(int)>
<megamek.common.SmallCraft: void setNPassenger(int)>
<megamek.common.SmallCraftBay: java.util.Vector initializeRecoverySlots()>
<megamek.common.SmallCraftBay: void <init>(int,int)>
<megamek.common.SpaceStation: double getBVTypeModifier()>
<megamek.common.SpaceStation: double getCost(boolean)>
<megamek.common.SpaceStation: void <init>()>
<megamek.common.SupportTank: boolean hasBARArmor()>
<megamek.common.SupportTank: int getBARRating()>
<megamek.common.SupportTank: void <init>()>
<megamek.common.SupportTank: void setBARRating(int)>
<megamek.common.SupportVTOL: boolean hasBARArmor()>
<megamek.common.SupportVTOL: int getBARRating()>
<megamek.common.SupportVTOL: void <init>()>
<megamek.common.SupportVTOL: void setBARRating(int)>
<megamek.common.Tank$1: void <clinit>()>
<megamek.common.Tank: boolean doomedInVacuum()>
<megamek.common.Tank: boolean hasModularArmor()>
<megamek.common.Tank: boolean hasNoTurret()>
<megamek.common.Tank: boolean hasRearArmor(int)>
<megamek.common.Tank: boolean isStealthActive()>
<megamek.common.Tank: double getCost(boolean)>
<megamek.common.Tank: int calculateBattleValue()>
<megamek.common.Tank: int calculateBattleValue(boolean,boolean)>
<megamek.common.Tank: int getArmorType()>
<megamek.common.Tank: int getHeatCapacity()>
<megamek.common.Tank: int getStructureType()>
<megamek.common.Tank: int getSuspensionFactor()>
<megamek.common.Tank: int getWalkMP(boolean,boolean)>
<megamek.common.Tank: int locations()>
<megamek.common.Tank: int[] getNoOfSlots()>
<megamek.common.Tank: java.lang.String[] getLocationAbbrs()>
<megamek.common.Tank: java.lang.String[] getLocationNames()>
<megamek.common.Tank: void <clinit>()>
<megamek.common.Tank: void <init>()>
<megamek.common.Tank: void addEquipment(megamek.common.Mounted,int,boolean)>
<megamek.common.Tank: void autoSetInternal()>
<megamek.common.Tank: void setArmorType(int)>
<megamek.common.Tank: void setEngine(megamek.common.Engine)>
<megamek.common.Tank: void setHasNoTurret(boolean)>
<megamek.common.Tank: void setOmni(boolean)>
<megamek.common.Tank: void setStructureType(int)>
<megamek.common.TargetRoll$Modifier: void <init>(megamek.common.TargetRoll,int,java.lang.String)>
<megamek.common.TargetRoll$Modifier: void <init>(megamek.common.TargetRoll,int,java.lang.String,boolean)>
<megamek.common.TargetRoll: int getValue()>
<megamek.common.TargetRoll: java.lang.String getDesc()>
<megamek.common.TargetRoll: java.lang.String getLastPlainDesc()>
<megamek.common.TargetRoll: java.lang.String getValueAsString()>
<megamek.common.TargetRoll: void <init>()>
<megamek.common.TargetRoll: void <init>(int,java.lang.String)>
<megamek.common.TargetRoll: void <init>(int,java.lang.String,boolean)>
<megamek.common.TargetRoll: void addModifier(int,java.lang.String)>
<megamek.common.TargetRoll: void addModifier(int,java.lang.String,boolean)>
<megamek.common.TargetRoll: void addModifier(megamek.common.TargetRoll$Modifier)>
<megamek.common.TargetRoll: void append(megamek.common.TargetRoll)>
<megamek.common.TargetRoll: void append(megamek.common.TargetRoll,boolean)>
<megamek.common.TargetRoll: void recalculate()>
<megamek.common.TargetRoll: void removeAutos()>
<megamek.common.TargetRoll: void removeAutos(boolean)>
<megamek.common.Team: void <init>(int)>
<megamek.common.Team: void addPlayer(megamek.common.Player)>
<megamek.common.TechConstants: boolean isLegal(int,int)>
<megamek.common.TechConstants: boolean isLegal(int,int,boolean)>
<megamek.common.TechConstants: java.lang.String getLevelDisplayableName(int)>
<megamek.common.TechConstants: java.lang.String getLevelName(int)>
<megamek.common.TechConstants: java.lang.String getTechName(int)>
<megamek.common.TechConstants: void <clinit>()>
<megamek.common.TeleMissileTracker: java.util.Vector getMissiles()>
<megamek.common.TeleMissileTracker: void <init>()>
<megamek.common.Terrain: boolean exitsTo(megamek.common.ITerrain)>
<megamek.common.Terrain: boolean hasExitsSpecified()>
<megamek.common.Terrain: int getBogDownModifier(megamek.common.EntityMovementMode,boolean)>
<megamek.common.Terrain: int getExits()>
<megamek.common.Terrain: int getLevel()>
<megamek.common.Terrain: int getTerrainFactor()>
<megamek.common.Terrain: int getType()>
<megamek.common.Terrain: int getUnstuckModifier(int)>
<megamek.common.Terrain: int ignitionModifier()>
<megamek.common.Terrain: int levelFor(java.lang.String)>
<megamek.common.Terrain: int pilotingModifier(megamek.common.EntityMovementMode)>
<megamek.common.Terrain: void <init>(int,int)>
<megamek.common.Terrain: void <init>(int,int,boolean,int)>
<megamek.common.Terrain: void <init>(java.lang.String)>
<megamek.common.Terrain: void flipExits(boolean,boolean)>
<megamek.common.Terrain: void setExit(int,boolean)>
<megamek.common.Terrain: void setExits(int)>
<megamek.common.Terrain: void setTerrainFactor(int)>
<megamek.common.TerrainFactory: megamek.common.ITerrain createTerrain(int,int)>
<megamek.common.TerrainFactory: megamek.common.ITerrain createTerrain(int,int,boolean,int)>
<megamek.common.TerrainFactory: megamek.common.ITerrain createTerrain(java.lang.String)>
<megamek.common.TerrainFactory: void <init>()>
<megamek.common.Terrains: int getTerrainFactor(int,int)>
<megamek.common.Terrains: int getType(java.lang.String)>
<megamek.common.Terrains: java.util.Hashtable getHash()>
<megamek.common.Terrains: megamek.common.ITerrainFactory getTerrainFactory()>
<megamek.common.Terrains: void <clinit>()>
<megamek.common.ToHitData: void <init>()>
<megamek.common.ToHitData: void <init>(int,java.lang.String)>
<megamek.common.ToHitData: void <init>(int,java.lang.String,int,int)>
<megamek.common.ToHitData: void setHitTable(int)>
<megamek.common.ToHitData: void setSideTable(int)>
<megamek.common.TroopSpace: void <init>(double)>
<megamek.common.TurnOrdered$1: void <init>()>
<megamek.common.TurnOrdered: megamek.common.TurnVectors generateTurnOrder(java.util.Vector,megamek.common.IGame)>
<megamek.common.TurnOrdered: void <clinit>()>
<megamek.common.TurnOrdered: void <init>()>
<megamek.common.TurnOrdered: void rollInitAndResolveTies(java.util.Vector,java.util.Vector,boolean)>
<megamek.common.TurnOrdered: void rollInitiative(java.util.Vector,boolean)>
<megamek.common.TurnVectors: boolean hasMoreElements()>
<megamek.common.TurnVectors: int getEvenTurns()>
<megamek.common.TurnVectors: int getMin()>
<megamek.common.TurnVectors: int getTotalTurns()>
<megamek.common.TurnVectors: java.util.Enumeration getTurnTotalEnum()>
<megamek.common.TurnVectors: megamek.common.TurnOrdered nextElement()>
<megamek.common.TurnVectors: void <init>(int,int,int,int,int,int,int,int,int,int)>
<megamek.common.TurnVectors: void addAero(megamek.common.TurnOrdered)>
<megamek.common.TurnVectors: void addDropship(megamek.common.TurnOrdered)>
<megamek.common.TurnVectors: void addEven(megamek.common.TurnOrdered)>
<megamek.common.TurnVectors: void addJumpship(megamek.common.TurnOrdered)>
<megamek.common.TurnVectors: void addNormal(megamek.common.TurnOrdered)>
<megamek.common.TurnVectors: void addSmallCraft(megamek.common.TurnOrdered)>
<megamek.common.TurnVectors: void addSpaceStation(megamek.common.TurnOrdered)>
<megamek.common.TurnVectors: void addWarship(megamek.common.TurnOrdered)>
<megamek.common.VTOL: boolean doomedInVacuum()>
<megamek.common.VTOL: java.lang.String[] getLocationAbbrs()>
<megamek.common.VTOL: java.lang.String[] getLocationNames()>
<megamek.common.VTOL: void <clinit>()>
<megamek.common.VTOL: void <init>()>
<megamek.common.Warship: double getBVTypeModifier()>
<megamek.common.Warship: double getCost(boolean)>
<megamek.common.Warship: int getAdjacentArcCCW(int)>
<megamek.common.Warship: int getAdjacentArcCW(int)>
<megamek.common.Warship: int getKFIntegrity()>
<megamek.common.Warship: int getSailIntegrity()>
<megamek.common.Warship: int getWeaponArc(int)>
<megamek.common.Warship: int locations()>
<megamek.common.Warship: java.lang.String[] getLocationAbbrs()>
<megamek.common.Warship: java.lang.String[] getLocationNames()>
<megamek.common.Warship: void <clinit>()>
<megamek.common.Warship: void <init>()>
<megamek.common.Warship: void autoSetThresh()>
<megamek.common.Warship: void initializeKFIntegrity()>
<megamek.common.Warship: void initializeSailIntegrity()>
<megamek.common.Warship: void initializeThresh(int)>
<megamek.common.Warship: void setKFIntegrity(int)>
<megamek.common.Warship: void setSailIntegrity(int)>
<megamek.common.Warship: void setThresh(int,int)>
<megamek.common.WeaponComparator: void <init>()>
<megamek.common.WeaponType: void <clinit>()>
<megamek.common.WeaponType: void <init>()>
<megamek.common.WeaponType: void initializeTypes()>
<megamek.common.actions.AbstractAttackAction: int getTargetId()>
<megamek.common.actions.AbstractAttackAction: megamek.common.ToHitData nightModifiers(megamek.common.IGame,megamek.common.Targetable,megamek.common.AmmoType,megamek.common.Entity,boolean)>
<megamek.common.actions.AbstractAttackAction: void <init>(int,int)>
<megamek.common.actions.AbstractAttackAction: void <init>(int,int,int)>
<megamek.common.actions.AbstractEntityAction: int getEntityId()>
<megamek.common.actions.AbstractEntityAction: void <init>(int)>
<megamek.common.actions.BAVibroClawAttackAction: int getDamageFor(megamek.common.Entity)>
<megamek.common.actions.BrushOffAttackAction: int getDamageFor(megamek.common.Entity,int)>
<megamek.common.actions.BrushOffAttackAction: megamek.common.ToHitData toHit(megamek.common.IGame,int,megamek.common.Targetable,int)>
<megamek.common.actions.ChargeAttackAction: int getDamageFor(megamek.common.Entity)>
<megamek.common.actions.ChargeAttackAction: int getDamageFor(megamek.common.Entity,megamek.common.Entity,boolean,int)>
<megamek.common.actions.ChargeAttackAction: int getDamageFor(megamek.common.Entity,megamek.common.Entity,boolean,int,int)>
<megamek.common.actions.ChargeAttackAction: int getDamageTakenBy(megamek.common.Entity,megamek.common.Building,megamek.common.Coords)>
<megamek.common.actions.ChargeAttackAction: int getDamageTakenBy(megamek.common.Entity,megamek.common.Entity,boolean)>
<megamek.common.actions.ChargeAttackAction: int getDamageTakenBy(megamek.common.Entity,megamek.common.Entity,boolean,int)>
<megamek.common.actions.ClubAttackAction: int getDamageFor(megamek.common.Entity,megamek.common.Mounted,boolean)>
<megamek.common.actions.DfaAttackAction: boolean hasTalons(megamek.common.Entity)>
<megamek.common.actions.DfaAttackAction: int getDamageFor(megamek.common.Entity,boolean)>
<megamek.common.actions.DfaAttackAction: int getDamageTakenBy(megamek.common.Entity)>
<megamek.common.actions.GrappleAttackAction: megamek.common.ToHitData toHit(megamek.common.IGame,int,megamek.common.Targetable)>
<megamek.common.actions.GrappleAttackAction: megamek.common.ToHitData toHit(megamek.common.IGame,int,megamek.common.Targetable,int)>
<megamek.common.actions.GrappleAttackAction: void <init>(int,int)>
<megamek.common.actions.JumpJetAttackAction: int getDamageFor(megamek.common.Entity,int)>
<megamek.common.actions.KickAttackAction: int getDamageFor(megamek.common.Entity,int,boolean)>
<megamek.common.actions.LayExplosivesAttackAction: int getDamageFor(megamek.common.Entity)>
<megamek.common.actions.PhysicalAttackAction: java.lang.String toHitIsImpossible(megamek.common.IGame,megamek.common.Entity,megamek.common.Targetable)>
<megamek.common.actions.PhysicalAttackAction: void <init>(int,int)>
<megamek.common.actions.PhysicalAttackAction: void setCommonModifiers(megamek.common.ToHitData,megamek.common.IGame,megamek.common.Entity,megamek.common.Targetable)>
<megamek.common.actions.ProtomechPhysicalAttackAction: int getDamageFor(megamek.common.Entity)>
<megamek.common.actions.PunchAttackAction: int getDamageFor(megamek.common.Entity,int,boolean)>
<megamek.common.actions.RamAttackAction: int getDamageFor(megamek.common.Aero,megamek.common.Aero)>
<megamek.common.actions.RamAttackAction: int getDamageFor(megamek.common.Aero,megamek.common.Aero,megamek.common.Coords,int,int)>
<megamek.common.actions.RamAttackAction: int getDamageTakenBy(megamek.common.Aero,megamek.common.Aero)>
<megamek.common.actions.RamAttackAction: int getDamageTakenBy(megamek.common.Aero,megamek.common.Aero,megamek.common.Coords,int,int)>
<megamek.common.actions.TeleMissileAttackAction: int getDamageFor(megamek.common.Entity)>
<megamek.common.actions.TeleMissileAttackAction: void <init>(megamek.common.Entity,megamek.common.Targetable)>
<megamek.common.actions.ThrashAttackAction: int getDamageFor(megamek.common.Entity)>
<megamek.common.event.BoardEvent: int getType()>
<megamek.common.event.BoardEvent: void <init>(java.lang.Object,megamek.common.Coords,int)>
<megamek.common.event.GameBoardChangeEvent: void <init>(java.lang.Object)>
<megamek.common.event.GameBoardNewEvent: void <init>(java.lang.Object,megamek.common.IBoard,megamek.common.IBoard)>
<megamek.common.event.GameEntityChangeEvent: void <init>(java.lang.Object,megamek.common.Entity)>
<megamek.common.event.GameEntityChangeEvent: void <init>(java.lang.Object,megamek.common.Entity,java.util.Vector)>
<megamek.common.event.GameEntityEvent: void <init>(java.lang.Object,megamek.common.Entity,int)>
<megamek.common.event.GameEntityNewEvent: void <init>(java.lang.Object,megamek.common.Entity)>
<megamek.common.event.GameEntityNewOffboardEvent: void <init>(java.lang.Object)>
<megamek.common.event.GameEntityRemoveEvent: void <init>(java.lang.Object,megamek.common.Entity)>
<megamek.common.event.GameEvent: int getType()>
<megamek.common.event.GameEvent: void <init>(java.lang.Object,int)>
<megamek.common.event.GameNewActionEvent: void <init>(java.lang.Object,megamek.common.actions.EntityAction)>
<megamek.common.event.GamePhaseChangeEvent: void <init>(java.lang.Object,megamek.common.IGame$Phase,megamek.common.IGame$Phase)>
<megamek.common.event.GamePlayerChangeEvent: void <init>(java.lang.Object,megamek.common.Player)>
<megamek.common.event.GamePlayerEvent: void <init>(java.lang.Object,megamek.common.Player,int)>
<megamek.common.loaders.ArmorType: megamek.common.loaders.ArmorType getType(int)>
<megamek.common.loaders.ArmorType: void <clinit>()>
<megamek.common.loaders.ArmorType: void <init>(java.lang.String,int)>
<megamek.common.loaders.BLKAeroFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKAeroFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKAeroFile: void loadEquipment(megamek.common.Entity,java.lang.String,int)>
<megamek.common.loaders.BLKBattleArmorFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKBattleArmorFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKBattleArmorFile: void loadEquipment(megamek.common.Entity,java.lang.String,int)>
<megamek.common.loaders.BLKConvFighterFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKConvFighterFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKConvFighterFile: void loadEquipment(megamek.common.Entity,java.lang.String,int)>
<megamek.common.loaders.BLKDropshipFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKDropshipFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKDropshipFile: void loadEquipment(megamek.common.Dropship,java.lang.String,int)>
<megamek.common.loaders.BLKFile: int translateEngineCode(int)>
<megamek.common.loaders.BLKFile: void <init>()>
<megamek.common.loaders.BLKFile: void loadEquipment(megamek.common.Entity,java.lang.String,int)>
<megamek.common.loaders.BLKFile: void setTechLevel(megamek.common.Entity)>
<megamek.common.loaders.BLKGunEmplacementFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKGunEmplacementFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKInfantryFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKInfantryFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKJumpshipFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKJumpshipFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKJumpshipFile: void loadEquipment(megamek.common.Jumpship,java.lang.String,int)>
<megamek.common.loaders.BLKLargeSupportTankFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKLargeSupportTankFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKMechFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKMechFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKProtoFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKProtoFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKProtoFile: void loadEquipment(megamek.common.Protomech,java.lang.String,int)>
<megamek.common.loaders.BLKSmallCraftFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKSmallCraftFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKSmallCraftFile: void loadEquipment(megamek.common.Entity,java.lang.String,int)>
<megamek.common.loaders.BLKSpaceStationFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKSpaceStationFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKSpaceStationFile: void loadEquipment(megamek.common.SpaceStation,java.lang.String,int)>
<megamek.common.loaders.BLKSupportTankFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKSupportTankFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKSupportVTOLFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKSupportVTOLFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKTankFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKTankFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKVTOLFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKVTOLFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKWarshipFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.BLKWarshipFile: void <init>(megamek.common.util.BuildingBlock)>
<megamek.common.loaders.BLKWarshipFile: void loadEquipment(megamek.common.Entity,java.lang.String,int)>
<megamek.common.loaders.ChassisType: megamek.common.loaders.ChassisType getType(int)>
<megamek.common.loaders.ChassisType: void <clinit>()>
<megamek.common.loaders.ChassisType: void <init>(java.lang.String,int)>
<megamek.common.loaders.EngineType: megamek.common.loaders.EngineType getType(int)>
<megamek.common.loaders.EngineType: void <clinit>()>
<megamek.common.loaders.EngineType: void <init>(java.lang.String,int)>
<megamek.common.loaders.EntityLoadingException: void <init>(java.lang.String)>
<megamek.common.loaders.HMPType: void <init>(java.lang.String,int)>
<megamek.common.loaders.HMVArmorType: megamek.common.loaders.HMVArmorType getType(int)>
<megamek.common.loaders.HMVArmorType: void <clinit>()>
<megamek.common.loaders.HMVArmorType: void <init>(java.lang.String,int)>
<megamek.common.loaders.HMVEngineType: megamek.common.loaders.HMVEngineType getType(int)>
<megamek.common.loaders.HMVEngineType: void <clinit>()>
<megamek.common.loaders.HMVEngineType: void <init>(java.lang.String,int)>
<megamek.common.loaders.HMVMovementType: megamek.common.loaders.HMVMovementType getType(int)>
<megamek.common.loaders.HMVMovementType: void <clinit>()>
<megamek.common.loaders.HMVMovementType: void <init>(java.lang.String,int)>
<megamek.common.loaders.HMVTechType: megamek.common.loaders.HMVTechType getType(int)>
<megamek.common.loaders.HMVTechType: void <clinit>()>
<megamek.common.loaders.HMVTechType: void <init>(java.lang.String,int)>
<megamek.common.loaders.HMVType: boolean equals(java.lang.Object)>
<megamek.common.loaders.HMVType: void <init>(java.lang.String,int)>
<megamek.common.loaders.HMVWeaponLocation: megamek.common.loaders.HMVWeaponLocation getType(int)>
<megamek.common.loaders.HMVWeaponLocation: void <clinit>()>
<megamek.common.loaders.HMVWeaponLocation: void <init>(java.lang.String,int)>
<megamek.common.loaders.HeatSinkType: megamek.common.loaders.HeatSinkType getType(int)>
<megamek.common.loaders.HeatSinkType: void <clinit>()>
<megamek.common.loaders.HeatSinkType: void <init>(java.lang.String,int)>
<megamek.common.loaders.HmpFile: boolean isCockpit(long)>
<megamek.common.loaders.HmpFile: boolean isFootActuator(long)>
<megamek.common.loaders.HmpFile: boolean isFusionEngine(long)>
<megamek.common.loaders.HmpFile: boolean isGyro(long)>
<megamek.common.loaders.HmpFile: boolean isHandActuator(long)>
<megamek.common.loaders.HmpFile: boolean isJumpJet(long)>
<megamek.common.loaders.HmpFile: boolean isLifeSupport(long)>
<megamek.common.loaders.HmpFile: boolean isLowerArmActuator(long)>
<megamek.common.loaders.HmpFile: boolean isLowerLegActuator(long)>
<megamek.common.loaders.HmpFile: boolean isRearMounted(long)>
<megamek.common.loaders.HmpFile: boolean isSensor(long)>
<megamek.common.loaders.HmpFile: int readUnsignedShort(java.io.DataInputStream)>
<megamek.common.loaders.HmpFile: java.lang.String getCriticalName(java.lang.Long)>
<megamek.common.loaders.HmpFile: java.lang.String getCriticalName(long)>
<megamek.common.loaders.HmpFile: java.lang.String mutateATMAmmo(java.lang.String)>
<megamek.common.loaders.HmpFile: java.lang.String mutateLBXAmmo(java.lang.String)>
<megamek.common.loaders.HmpFile: long readUnsignedInt(java.io.DataInputStream)>
<megamek.common.loaders.HmpFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.HmpFile: short readUnsignedByte(java.io.DataInputStream)>
<megamek.common.loaders.HmpFile: void <clinit>()>
<megamek.common.loaders.HmpFile: void <init>(java.io.InputStream)>
<megamek.common.loaders.HmpFile: void compactCriticals(long[])>
<megamek.common.loaders.HmpFile: void removeArmActuators(megamek.common.Mech,long[],int)>
<megamek.common.loaders.HmpFile: void setupCriticals(megamek.common.Mech)>
<megamek.common.loaders.HmpFile: void setupCriticals(megamek.common.Mech,long[],int)>
<megamek.common.loaders.HmvFile: boolean containsOmni(byte[])>
<megamek.common.loaders.HmvFile: float readFloat(java.io.DataInputStream)>
<megamek.common.loaders.HmvFile: int readUnsignedShort(java.io.DataInputStream)>
<megamek.common.loaders.HmvFile: java.lang.String getAmmoName(java.lang.Long,megamek.common.loaders.HMVTechType)>
<megamek.common.loaders.HmvFile: java.lang.String getAmmoName(long,megamek.common.loaders.HMVTechType)>
<megamek.common.loaders.HmvFile: java.lang.String getEquipmentName(java.lang.Long,megamek.common.loaders.HMVTechType)>
<megamek.common.loaders.HmvFile: java.lang.String getEquipmentName(long,megamek.common.loaders.HMVTechType)>
<megamek.common.loaders.HmvFile: megamek.common.AmmoType getAmmoType(long,megamek.common.loaders.HMVTechType)>
<megamek.common.loaders.HmvFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.HmvFile: megamek.common.EquipmentType getEquipmentType(long,megamek.common.loaders.HMVTechType)>
<megamek.common.loaders.HmvFile: short readUnsignedByte(java.io.DataInputStream)>
<megamek.common.loaders.HmvFile: void <clinit>()>
<megamek.common.loaders.HmvFile: void <init>(java.io.InputStream)>
<megamek.common.loaders.HmvFile: void addEquipment(megamek.common.Tank,megamek.common.loaders.HMVWeaponLocation,int)>
<megamek.common.loaders.HmvFile: void addEquipmentType(megamek.common.EquipmentType,int,megamek.common.loaders.HMVWeaponLocation)>
<megamek.common.loaders.HmvFile: void addFailedEquipment(megamek.common.Tank)>
<megamek.common.loaders.InternalStructureType: megamek.common.loaders.InternalStructureType getType(int)>
<megamek.common.loaders.InternalStructureType: void <clinit>()>
<megamek.common.loaders.InternalStructureType: void <init>(java.lang.String,int)>
<megamek.common.loaders.MepFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.MepFile: void <init>(java.io.InputStream)>
<megamek.common.loaders.MepFile: void decodeArmorAndInternals(megamek.common.Mech,int,java.lang.String)>
<megamek.common.loaders.MepFile: void decodeRearArmor(megamek.common.Mech,int,java.lang.String)>
<megamek.common.loaders.MtfFile: boolean isProcessedComponent(java.lang.String)>
<megamek.common.loaders.MtfFile: boolean isValidLocation(java.lang.String)>
<megamek.common.loaders.MtfFile: int getArmorLocation(java.lang.String)>
<megamek.common.loaders.MtfFile: int getLocation(java.lang.String)>
<megamek.common.loaders.MtfFile: int weaponsList(java.lang.String)>
<megamek.common.loaders.MtfFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.MtfFile: void <clinit>()>
<megamek.common.loaders.MtfFile: void <init>(java.io.InputStream)>
<megamek.common.loaders.MtfFile: void compactCriticals(megamek.common.Mech)>
<megamek.common.loaders.MtfFile: void compactCriticals(megamek.common.Mech,int)>
<megamek.common.loaders.MtfFile: void parseCrits(megamek.common.Mech,int)>
<megamek.common.loaders.MtfFile: void readCrits(java.io.BufferedReader)>
<megamek.common.loaders.MyomerType: megamek.common.loaders.MyomerType getType(int)>
<megamek.common.loaders.MyomerType: void <clinit>()>
<megamek.common.loaders.MyomerType: void <init>(java.lang.String,int)>
<megamek.common.loaders.TdbFile: megamek.common.Entity getEntity()>
<megamek.common.loaders.TdbFile: void <init>(java.io.InputStream)>
<megamek.common.loaders.TdbFile: void compactCriticals(megamek.common.Mech)>
<megamek.common.loaders.TdbFile: void compactCriticals(megamek.common.Mech,int)>
<megamek.common.loaders.TdbFile: void parseBasicsNode(gd.xml.tiny.ParsedXML)>
<megamek.common.loaders.TdbFile: void parseCreatorNode(gd.xml.tiny.ParsedXML)>
<megamek.common.loaders.TdbFile: void parseCritNode(gd.xml.tiny.ParsedXML)>
<megamek.common.loaders.TdbFile: void parseCrits(megamek.common.Mech,int)>
<megamek.common.loaders.TdbFile: void parseMountedNode(gd.xml.tiny.ParsedXML)>
<megamek.common.loaders.TdbFile: void parseNode(gd.xml.tiny.ParsedXML)>
<megamek.common.loaders.TechType: megamek.common.loaders.TechType getType(int)>
<megamek.common.loaders.TechType: void <clinit>()>
<megamek.common.loaders.TechType: void <init>(java.lang.String,int)>
<megamek.common.net.ConnectionListenerAdapter: void <init>()>
<megamek.common.net.Packet: void <init>(int,java.lang.Object)>
<megamek.common.net.Packet: void <init>(int,java.lang.Object[])>
<megamek.common.options.AbstractOptions: boolean booleanOption(java.lang.String)>
<megamek.common.options.AbstractOptions: int intOption(java.lang.String)>
<megamek.common.options.AbstractOptions: megamek.common.options.IBasicOptionGroup addGroup(java.lang.String)>
<megamek.common.options.AbstractOptions: megamek.common.options.IBasicOptionGroup addGroup(java.lang.String,java.lang.String)>
<megamek.common.options.AbstractOptions: megamek.common.options.IOption getOption(java.lang.String)>
<megamek.common.options.AbstractOptions: void <init>()>
<megamek.common.options.AbstractOptions: void addOption(megamek.common.options.IBasicOptionGroup,java.lang.String,boolean)>
<megamek.common.options.AbstractOptions: void addOption(megamek.common.options.IBasicOptionGroup,java.lang.String,int)>
<megamek.common.options.AbstractOptions: void addOption(megamek.common.options.IBasicOptionGroup,java.lang.String,int,java.lang.Object)>
<megamek.common.options.AbstractOptions: void addOption(megamek.common.options.IBasicOptionGroup,java.lang.String,java.util.Vector)>
<megamek.common.options.AbstractOptionsInfo$OptionInfo: void <init>(megamek.common.options.AbstractOptionsInfo,java.lang.String)>
<megamek.common.options.AbstractOptionsInfo: megamek.common.options.IBasicOptionGroup addGroup(java.lang.String)>
<megamek.common.options.AbstractOptionsInfo: megamek.common.options.IBasicOptionGroup addGroup(java.lang.String,java.lang.String)>
<megamek.common.options.AbstractOptionsInfo: void <clinit>()>
<megamek.common.options.AbstractOptionsInfo: void <init>(java.lang.String)>
<megamek.common.options.AbstractOptionsInfo: void addOptionInfo(megamek.common.options.IBasicOptionGroup,java.lang.String)>
<megamek.common.options.AbstractOptionsInfo: void finish()>
<megamek.common.options.AbstractOptionsInfo: void setOptionInfo(java.lang.String,megamek.common.options.AbstractOptionsInfo$OptionInfo)>
<megamek.common.options.GameOptions$GameOptionsInfo: megamek.common.options.AbstractOptionsInfo getInstance()>
<megamek.common.options.GameOptions$GameOptionsInfo: void <clinit>()>
<megamek.common.options.GameOptions$GameOptionsInfo: void <init>()>
<megamek.common.options.GameOptions: java.util.Vector loadOptions()>
<megamek.common.options.GameOptions: java.util.Vector loadOptions(java.io.File)>
<megamek.common.options.GameOptions: megamek.common.options.AbstractOptionsInfo getOptionsInfoImp()>
<megamek.common.options.GameOptions: megamek.common.options.IOption parseOptionNode(gd.xml.tiny.ParsedXML)>
<megamek.common.options.GameOptions: void <init>()>
<megamek.common.options.GameOptions: void initialize()>
<megamek.common.options.Option: boolean isValidValue(java.lang.Object)>
<megamek.common.options.Option: void <init>(megamek.common.options.IOptions,java.lang.String,int,java.lang.Object)>
<megamek.common.options.OptionGroup: void <init>(java.lang.String)>
<megamek.common.options.OptionGroup: void <init>(java.lang.String,java.lang.String)>
<megamek.common.options.OptionGroup: void addOptionName(java.lang.String)>
<megamek.common.options.PilotOptions$PilotOptionsInfo: megamek.common.options.AbstractOptionsInfo getInstance()>
<megamek.common.options.PilotOptions$PilotOptionsInfo: void <clinit>()>
<megamek.common.options.PilotOptions$PilotOptionsInfo: void <init>()>
<megamek.common.options.PilotOptions: megamek.common.options.AbstractOptionsInfo getOptionsInfoImp()>
<megamek.common.options.PilotOptions: void <init>()>
<megamek.common.options.PilotOptions: void initialize()>
<megamek.common.options.Quirks$QuirksInfo: megamek.common.options.AbstractOptionsInfo getInstance()>
<megamek.common.options.Quirks$QuirksInfo: void <clinit>()>
<megamek.common.options.Quirks$QuirksInfo: void <init>()>
<megamek.common.options.Quirks: megamek.common.options.AbstractOptionsInfo getOptionsInfoImp()>
<megamek.common.options.Quirks: void <init>()>
<megamek.common.options.Quirks: void initialize()>
<megamek.common.options.WeaponQuirks$WeaponQuirksInfo: megamek.common.options.AbstractOptionsInfo getInstance()>
<megamek.common.options.WeaponQuirks$WeaponQuirksInfo: void <clinit>()>
<megamek.common.options.WeaponQuirks$WeaponQuirksInfo: void <init>()>
<megamek.common.options.WeaponQuirks: megamek.common.options.AbstractOptionsInfo getOptionsInfoImp()>
<megamek.common.options.WeaponQuirks: void <init>()>
<megamek.common.options.WeaponQuirks: void initialize()>
<megamek.common.preference.ClientPreferences: boolean defaultAutoejectDisabled()>
<megamek.common.preference.ClientPreferences: boolean getShowUnitId()>
<megamek.common.preference.ClientPreferences: boolean stampFilenames()>
<megamek.common.preference.ClientPreferences: int getBoardHeight()>
<megamek.common.preference.ClientPreferences: int getBoardWidth()>
<megamek.common.preference.ClientPreferences: int getLastServerPort()>
<megamek.common.preference.ClientPreferences: int getMapHeight()>
<megamek.common.preference.ClientPreferences: int getMapWidth()>
<megamek.common.preference.ClientPreferences: java.lang.String getGUIName()>
<megamek.common.preference.ClientPreferences: java.lang.String getLastServerPass()>
<megamek.common.preference.ClientPreferences: java.lang.String getLocaleString()>
<megamek.common.preference.ClientPreferences: java.lang.String getLogDirectory()>
<megamek.common.preference.ClientPreferences: java.lang.String getMechDirectory()>
<megamek.common.preference.ClientPreferences: java.lang.String getStampFormat()>
<megamek.common.preference.ClientPreferences: java.util.Locale getLocale()>
<megamek.common.preference.ClientPreferences: void <init>(megamek.common.preference.IPreferenceStore)>
<megamek.common.preference.ClientPreferences: void setLocale(java.lang.String)>
<megamek.common.preference.ClientPreferences: void setMekHitLocLog()>
<megamek.common.preference.PreferenceChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>
<megamek.common.preference.PreferenceManager: megamek.common.preference.IClientPreferences getClientPreferences()>
<megamek.common.preference.PreferenceManager: megamek.common.preference.IPreferenceStore getPreferenceStore(java.lang.String)>
<megamek.common.preference.PreferenceManager: megamek.common.preference.PreferenceManager getInstance()>
<megamek.common.preference.PreferenceManager: void <clinit>()>
<megamek.common.preference.PreferenceManager: void <init>()>
<megamek.common.preference.PreferenceManager: void load()>
<megamek.common.preference.PreferenceManager: void load(java.lang.String)>
<megamek.common.preference.PreferenceManager: void loadGroup(gd.xml.tiny.ParsedXML,megamek.common.preference.IPreferenceStore)>
<megamek.common.preference.PreferenceStore: boolean getBoolean(java.lang.String)>
<megamek.common.preference.PreferenceStore: boolean getBoolean(java.util.Properties,java.lang.String)>
<megamek.common.preference.PreferenceStore: int getInt(java.lang.String)>
<megamek.common.preference.PreferenceStore: int getInt(java.util.Properties,java.lang.String)>
<megamek.common.preference.PreferenceStore: java.lang.String getDefaultString(java.lang.String)>
<megamek.common.preference.PreferenceStore: java.lang.String getString(java.lang.String)>
<megamek.common.preference.PreferenceStore: java.lang.String getString(java.util.Properties,java.lang.String)>
<megamek.common.preference.PreferenceStore: void <init>()>
<megamek.common.preference.PreferenceStore: void firePropertyChangeEvent(java.lang.String,java.lang.Object,java.lang.Object)>
<megamek.common.preference.PreferenceStore: void put(java.util.Properties,java.lang.String,java.lang.String)>
<megamek.common.preference.PreferenceStore: void putValue(java.lang.String,java.lang.String)>
<megamek.common.preference.PreferenceStore: void setDefault(java.lang.String,boolean)>
<megamek.common.preference.PreferenceStore: void setDefault(java.lang.String,int)>
<megamek.common.preference.PreferenceStore: void setDefault(java.lang.String,java.lang.String)>
<megamek.common.preference.PreferenceStore: void setValue(java.lang.String,java.lang.String)>
<megamek.common.preference.PreferenceStore: void setValue(java.util.Properties,java.lang.String,boolean)>
<megamek.common.preference.PreferenceStore: void setValue(java.util.Properties,java.lang.String,int)>
<megamek.common.preference.PreferenceStore: void setValue(java.util.Properties,java.lang.String,java.lang.String)>
<megamek.common.preference.PreferenceStoreProxy: int getInt(java.lang.String)>
<megamek.common.preference.PreferenceStoreProxy: void <init>()>
<megamek.common.preference.PreferenceStoreProxy: void setDefault(java.lang.String,int)>
<megamek.common.preference.PreferenceStoreProxy: void setDefault(java.lang.String,java.lang.String)>
<megamek.common.util.AbstractCommandLineParser$ParseException: void <init>(java.lang.String)>
<megamek.common.util.AbstractCommandLineParser: int getToken()>
<megamek.common.util.AbstractCommandLineParser: java.lang.String getArgValue()>
<megamek.common.util.AbstractCommandLineParser: java.lang.String getTokenValue()>
<megamek.common.util.AbstractCommandLineParser: void <clinit>()>
<megamek.common.util.AbstractCommandLineParser: void <init>(java.lang.String[])>
<megamek.common.util.AbstractCommandLineParser: void error(java.lang.String)>
<megamek.common.util.AbstractCommandLineParser: void nextArg()>
<megamek.common.util.AbstractCommandLineParser: void nextToken()>
<megamek.common.util.AbstractCommandLineParser: void parse()>
<megamek.common.util.AbstractCommandLineParser: void setToken(int)>
<megamek.common.util.AbstractCommandLineParser: void setTokenValue(java.lang.String)>
<megamek.common.util.BoardUtilities$Point: void <init>(int,int)>
<megamek.common.util.BoardUtilities$Point: void <init>(megamek.common.util.BoardUtilities$Point)>
<megamek.common.util.BoardUtilities$Point: void setLocation(int,int)>
<megamek.common.util.BoardUtilities: boolean hexCouldBeCliff(megamek.common.IBoard,megamek.common.Coords)>
<megamek.common.util.BoardUtilities: double distance(megamek.common.util.BoardUtilities$Point,megamek.common.util.BoardUtilities$Point)>
<megamek.common.util.BoardUtilities: int craterProfile(double,int)>
<megamek.common.util.BoardUtilities: int middleValue(int,int,int,int)>
<megamek.common.util.BoardUtilities: int middleValue(int,int,int,int,int)>
<megamek.common.util.BoardUtilities: int normRNG(int)>
<megamek.common.util.BoardUtilities: java.util.HashSet extendRiverToSide(megamek.common.IBoard,megamek.common.util.BoardUtilities$Point,int,int,java.util.HashMap)>
<megamek.common.util.BoardUtilities: megamek.common.IBoard combine(int,int,int,int,megamek.common.IBoard[],int)>
<megamek.common.util.BoardUtilities: megamek.common.IBoard generateRandom(megamek.common.MapSettings)>
<megamek.common.util.BoardUtilities: void addCliffs(megamek.common.IBoard,int)>
<megamek.common.util.BoardUtilities: void addCraters(megamek.common.IBoard,int,int,int,int)>
<megamek.common.util.BoardUtilities: void addRiver(megamek.common.IBoard,java.util.HashMap)>
<megamek.common.util.BoardUtilities: void addWeatherConditions(megamek.common.IBoard,int,int)>
<megamek.common.util.BoardUtilities: void copyBoardInto(megamek.common.IHex[],int,int,int,megamek.common.IBoard)>
<megamek.common.util.BoardUtilities: void cutSteps(int,int,int,int[][])>
<megamek.common.util.BoardUtilities: void diagMid(megamek.common.util.BoardUtilities$Point,int,int,int,int,int[][])>
<megamek.common.util.BoardUtilities: void findAllUnused(megamek.common.IBoard,int,java.util.HashSet,java.util.HashSet,megamek.common.IHex,java.util.HashMap)>
<megamek.common.util.BoardUtilities: void findCliffNeighbours(megamek.common.IBoard,megamek.common.Coords,java.util.ArrayList,java.util.HashSet)>
<megamek.common.util.BoardUtilities: void flip(megamek.common.IBoard,boolean,boolean)>
<megamek.common.util.BoardUtilities: void generateElevation(int,int,int,int,int,int,int[][],int)>
<megamek.common.util.BoardUtilities: void generateMountain(megamek.common.IBoard,int,megamek.common.Coords,int,int)>
<megamek.common.util.BoardUtilities: void markRect(int,int,int,int[][],int)>
<megamek.common.util.BoardUtilities: void markSides(megamek.common.util.BoardUtilities$Point,megamek.common.util.BoardUtilities$Point,int,int,int[][],int)>
<megamek.common.util.BoardUtilities: void midPoint(int,int,int,int[][])>
<megamek.common.util.BoardUtilities: void midPointStep(double,int,int,int[][],int,boolean)>
<megamek.common.util.BoardUtilities: void placeBuilding(megamek.common.IBoard,megamek.common.util.BuildingTemplate)>
<megamek.common.util.BoardUtilities: void placeSomeTerrain(megamek.common.IBoard,int,int,int,int,java.util.HashMap,boolean)>
<megamek.common.util.BoardUtilities: void postProcessDeepFreeze(megamek.common.IHex[],int)>
<megamek.common.util.BoardUtilities: void postProcessDrought(megamek.common.IHex[],int)>
<megamek.common.util.BoardUtilities: void postProcessFlood(megamek.common.IHex[],int)>
<megamek.common.util.BoardUtilities: void postProcessForestFire(megamek.common.IHex[],int)>
<megamek.common.util.BuildingBlock: boolean exists(java.lang.String)>
<megamek.common.util.BuildingBlock: boolean readInputStream(java.io.InputStream)>
<megamek.common.util.BuildingBlock: float[] getDataAsFloat(java.lang.String)>
<megamek.common.util.BuildingBlock: int findEndIndex(java.lang.String)>
<megamek.common.util.BuildingBlock: int findStartIndex(java.lang.String)>
<megamek.common.util.BuildingBlock: int[] getDataAsInt(java.lang.String)>
<megamek.common.util.BuildingBlock: java.lang.String[] getDataAsString(java.lang.String)>
<megamek.common.util.BuildingBlock: java.util.Vector getDataAsVector(java.lang.String)>
<megamek.common.util.BuildingBlock: void <init>(java.io.InputStream)>
<megamek.common.util.BuildingTemplate: void <init>(int,java.util.ArrayList,int,int,int)>
<megamek.common.util.CityBuilder: boolean hexNeedsBridge(megamek.common.IHex)>
<megamek.common.util.CityBuilder: boolean isHexBuildable(megamek.common.IHex)>
<megamek.common.util.CityBuilder: int getBuildingTypeByCF(int)>
<megamek.common.util.CityBuilder: java.util.ArrayList buildTown(int,int,int,int)>
<megamek.common.util.CityBuilder: java.util.ArrayList generateCity(boolean)>
<megamek.common.util.CityBuilder: java.util.ArrayList placeBuildings(int)>
<megamek.common.util.CityBuilder: megamek.common.Coords extendRoad(megamek.common.Coords,int,int)>
<megamek.common.util.CityBuilder: megamek.common.Coords resumeAfterObstacle(megamek.common.Coords,int)>
<megamek.common.util.CityBuilder: megamek.common.Coords selectNextGrid(int,megamek.common.Coords)>
<megamek.common.util.CityBuilder: megamek.common.Coords tryToBuildBridge(megamek.common.Coords,int)>
<megamek.common.util.CityBuilder: void <init>(megamek.common.MapSettings,megamek.common.IBoard)>
<megamek.common.util.CityBuilder: void addBridge(megamek.common.IHex,int,int,int)>
<megamek.common.util.CityBuilder: void addGenericRoad()>
<megamek.common.util.CityBuilder: void addRoad(megamek.common.IHex,int,int)>
<megamek.common.util.CityBuilder: void buildGridCity(int,int,int)>
<megamek.common.util.CityBuilder: void buildHubCity(int,int,int)>
<megamek.common.util.CityBuilder: void buildMetroCity(int,int)>
<megamek.common.util.CityBuilder: void buildStraightRoad(megamek.common.Coords,int,int)>
<megamek.common.util.CityBuilder: void connectHexes(megamek.common.Coords,megamek.common.Coords,int)>
<megamek.common.util.LocaleParser$ParseException: void <init>(java.lang.String)>
<megamek.common.util.LocaleParser: boolean parse()>
<megamek.common.util.LocaleParser: boolean parse(java.lang.String)>
<megamek.common.util.LocaleParser: java.lang.String getCountry()>
<megamek.common.util.LocaleParser: java.lang.String getLanguage()>
<megamek.common.util.LocaleParser: java.lang.String getVariant()>
<megamek.common.util.LocaleParser: void <init>()>
<megamek.common.util.LocaleParser: void clear()>
<megamek.common.util.LocaleParser: void nextToken()>
<megamek.common.util.LocaleParser: void parseCountry()>
<megamek.common.util.LocaleParser: void parseLocale()>
<megamek.common.util.LocaleParser: void parseVariant()>
<megamek.common.util.StringUtil$1: void <init>()>
<megamek.common.util.StringUtil: java.lang.String addDateTimeStamp(java.lang.String)>
<megamek.common.util.StringUtil: java.lang.String makeLength(int,int)>
<megamek.common.util.StringUtil: java.lang.String makeLength(java.lang.String,int)>
<megamek.common.util.StringUtil: java.lang.String makeLength(java.lang.String,int,boolean)>
<megamek.common.util.StringUtil: java.util.Comparator stringComparator()>
<megamek.common.verifier.Armor: float getWeightArmor(int,float)>
<megamek.common.verifier.Armor: float getWeightArmor(int,int,int,float)>
<megamek.common.verifier.Armor: java.lang.String getShortName()>
<megamek.common.verifier.Armor: void <init>(int,int)>
<megamek.common.verifier.EntityVerifier: void <clinit>()>
<megamek.common.verifier.EntityVerifier: void <init>(java.io.File)>
<megamek.common.verifier.EntityVerifier: void readOptions(gd.xml.tiny.ParsedXML)>
<megamek.common.verifier.Structure: float getWeightStructure(float,float)>
<megamek.common.verifier.Structure: float getWeightStructure(int,float,float)>
<megamek.common.verifier.Structure: java.lang.String getShortName()>
<megamek.common.verifier.Structure: void <init>(int,int)>
<megamek.common.verifier.TestEntity: boolean correctWeight(java.lang.StringBuffer)>
<megamek.common.verifier.TestEntity: boolean correctWeight(java.lang.StringBuffer,boolean,boolean)>
<megamek.common.verifier.TestEntity: boolean hasFailedEquipment(java.lang.StringBuffer)>
<megamek.common.verifier.TestEntity: boolean hasIllegalEquipmentCombinations(java.lang.StringBuffer)>
<megamek.common.verifier.TestEntity: boolean hasIllegalTechLevels(java.lang.StringBuffer,boolean)>
<megamek.common.verifier.TestEntity: boolean hasMASC()>
<megamek.common.verifier.TestEntity: boolean ignoreFailedEquip(java.lang.String)>
<megamek.common.verifier.TestEntity: boolean showCorrectArmor()>
<megamek.common.verifier.TestEntity: boolean showCorrectCritical()>
<megamek.common.verifier.TestEntity: boolean showFailedEquip()>
<megamek.common.verifier.TestEntity: boolean showOverweightedEntity()>
<megamek.common.verifier.TestEntity: boolean showUnderweightedEntity()>
<megamek.common.verifier.TestEntity: boolean skip()>
<megamek.common.verifier.TestEntity: float calculateWeight()>
<megamek.common.verifier.TestEntity: float ceil(float,float)>
<megamek.common.verifier.TestEntity: float ceilMaxHalf(float,float)>
<megamek.common.verifier.TestEntity: float getArmoredComponentWeight()>
<megamek.common.verifier.TestEntity: float getMaxOverweight()>
<megamek.common.verifier.TestEntity: float getMinUnderweight()>
<megamek.common.verifier.TestEntity: float getWeight()>
<megamek.common.verifier.TestEntity: float getWeightAmmo()>
<megamek.common.verifier.TestEntity: float getWeightArmor()>
<megamek.common.verifier.TestEntity: float getWeightCarryingSpace()>
<megamek.common.verifier.TestEntity: float getWeightCeilingArmor()>
<megamek.common.verifier.TestEntity: float getWeightCeilingControls()>
<megamek.common.verifier.TestEntity: float getWeightCeilingEngine()>
<megamek.common.verifier.TestEntity: float getWeightCeilingGyro()>
<megamek.common.verifier.TestEntity: float getWeightCeilingPowerAmp()>
<megamek.common.verifier.TestEntity: float getWeightCeilingStructure()>
<megamek.common.verifier.TestEntity: float getWeightCeilingTurret()>
<megamek.common.verifier.TestEntity: float getWeightEngine()>
<megamek.common.verifier.TestEntity: float getWeightMiscEquip()>
<megamek.common.verifier.TestEntity: float getWeightStructure()>
<megamek.common.verifier.TestEntity: float getWeightWeapon()>
<megamek.common.verifier.TestEntity: int getPrintSize()>
<megamek.common.verifier.TestEntity: int getTotalOArmor()>
<megamek.common.verifier.TestEntity: java.lang.String getLocationAbbr(int)>
<megamek.common.verifier.TestEntity: java.lang.String makeWeightString(float)>
<megamek.common.verifier.TestEntity: java.lang.String printArmorLocation(int)>
<megamek.common.verifier.TestEntity: java.lang.String printShortMovement()>
<megamek.common.verifier.TestEntity: java.lang.String printTechLevel()>
<megamek.common.verifier.TestEntity: java.lang.String printWeightArmor()>
<megamek.common.verifier.TestEntity: java.lang.String printWeightCalculation()>
<megamek.common.verifier.TestEntity: java.lang.String printWeightCarryingSpace()>
<megamek.common.verifier.TestEntity: java.lang.String printWeightEngine()>
<megamek.common.verifier.TestEntity: java.lang.String printWeightHeatSinks()>
<megamek.common.verifier.TestEntity: java.lang.String printWeightStructure()>
<megamek.common.verifier.TestEntity: java.lang.StringBuffer printAmmo()>
<megamek.common.verifier.TestEntity: java.lang.StringBuffer printAmmo(java.lang.StringBuffer)>
<megamek.common.verifier.TestEntity: java.lang.StringBuffer printAmmo(java.lang.StringBuffer,int,int)>
<megamek.common.verifier.TestEntity: java.lang.StringBuffer printMiscEquip()>
<megamek.common.verifier.TestEntity: java.lang.StringBuffer printMiscEquip(java.lang.StringBuffer)>
<megamek.common.verifier.TestEntity: java.lang.StringBuffer printMiscEquip(java.lang.StringBuffer,int,int)>
<megamek.common.verifier.TestEntity: java.lang.StringBuffer printWeapon()>
<megamek.common.verifier.TestEntity: java.lang.StringBuffer printWeapon(java.lang.StringBuffer)>
<megamek.common.verifier.TestEntity: java.lang.StringBuffer printWeapon(java.lang.StringBuffer,int,int)>
<megamek.common.verifier.TestEntity: void <init>(megamek.common.verifier.TestEntityOption,megamek.common.Engine,megamek.common.verifier.Armor,megamek.common.verifier.Structure)>
<megamek.common.verifier.TestMech: boolean checkSystemCriticals(java.lang.StringBuffer)>
<megamek.common.verifier.TestMech: boolean correctArmor(java.lang.StringBuffer)>
<megamek.common.verifier.TestMech: boolean correctCriticals(java.lang.StringBuffer)>
<megamek.common.verifier.TestMech: boolean correctEntity(java.lang.StringBuffer,boolean)>
<megamek.common.verifier.TestMech: boolean correctMovement(java.lang.StringBuffer)>
<megamek.common.verifier.TestMech: boolean hasDoubleHeatSinks()>
<megamek.common.verifier.TestMech: float getArmoredComponentWeight()>
<megamek.common.verifier.TestMech: float getWeightCockpit()>
<megamek.common.verifier.TestMech: float getWeightControls()>
<megamek.common.verifier.TestMech: float getWeightGyro()>
<megamek.common.verifier.TestMech: float getWeightMisc()>
<megamek.common.verifier.TestMech: float getWeightPowerAmp()>
<megamek.common.verifier.TestMech: int getCountHeatSinks()>
<megamek.common.verifier.TestMech: int getWeightHeatSinks()>
<megamek.common.verifier.TestMech: java.lang.String printArmorLocProp(int,int)>
<megamek.common.verifier.TestMech: java.lang.String printWeightControls()>
<megamek.common.verifier.TestMech: java.lang.String printWeightMisc()>
<megamek.common.verifier.TestMech: megamek.common.Entity getEntity()>
<megamek.common.verifier.TestMech: megamek.common.verifier.Armor getArmor(megamek.common.Mech)>
<megamek.common.verifier.TestMech: megamek.common.verifier.Structure getStructure(megamek.common.Mech)>
<megamek.common.verifier.TestMech: void <init>(megamek.common.Mech,megamek.common.verifier.TestEntityOption,java.lang.String)>
<megamek.common.verifier.TestMech: void checkCriticalSlotsForEquipment(megamek.common.Entity,java.util.Vector,java.util.Vector,java.util.Vector)>
<megamek.common.verifier.TestTank: boolean correctEntity(java.lang.StringBuffer,boolean)>
<megamek.common.verifier.TestTank: boolean hasDoubleHeatSinks()>
<megamek.common.verifier.TestTank: float getTankPowerAmplifier()>
<megamek.common.verifier.TestTank: float getTankWeightLifting()>
<megamek.common.verifier.TestTank: float getTankWeightTurret()>
<megamek.common.verifier.TestTank: float getWeightControls()>
<megamek.common.verifier.TestTank: float getWeightMisc()>
<megamek.common.verifier.TestTank: float getWeightPowerAmp()>
<megamek.common.verifier.TestTank: int getCountHeatSinks()>
<megamek.common.verifier.TestTank: int getTankCountHeatLaserWeapons()>
<megamek.common.verifier.TestTank: int getWeightHeatSinks()>
<megamek.common.verifier.TestTank: java.lang.String printWeightControls()>
<megamek.common.verifier.TestTank: java.lang.String printWeightMisc()>
<megamek.common.verifier.TestTank: megamek.common.Entity getEntity()>
<megamek.common.verifier.TestTank: megamek.common.verifier.Armor getArmor(megamek.common.Tank)>
<megamek.common.verifier.TestTank: megamek.common.verifier.Structure getStructure(megamek.common.Tank)>
<megamek.common.verifier.TestTank: void <init>(megamek.common.Tank,megamek.common.verifier.TestEntityOption,java.lang.String)>
<megamek.common.verifier.TestXMLOption: boolean getContentAsBoolean(gd.xml.tiny.ParsedXML)>
<megamek.common.verifier.TestXMLOption: boolean ignoreFailedEquip(java.lang.String)>
<megamek.common.verifier.TestXMLOption: boolean showCorrectArmor()>
<megamek.common.verifier.TestXMLOption: boolean showCorrectCritical()>
<megamek.common.verifier.TestXMLOption: boolean showFailedEquip()>
<megamek.common.verifier.TestXMLOption: boolean showOverweightedEntity()>
<megamek.common.verifier.TestXMLOption: boolean showUnderweightedEntity()>
<megamek.common.verifier.TestXMLOption: boolean skip()>
<megamek.common.verifier.TestXMLOption: float getContentAsFloat(gd.xml.tiny.ParsedXML)>
<megamek.common.verifier.TestXMLOption: float getMaxOverweight()>
<megamek.common.verifier.TestXMLOption: float getMinUnderweight()>
<megamek.common.verifier.TestXMLOption: float getWeightCeilingArmor()>
<megamek.common.verifier.TestXMLOption: float getWeightCeilingControls()>
<megamek.common.verifier.TestXMLOption: float getWeightCeilingEngine()>
<megamek.common.verifier.TestXMLOption: float getWeightCeilingGyro()>
<megamek.common.verifier.TestXMLOption: float getWeightCeilingPowerAmp()>
<megamek.common.verifier.TestXMLOption: float getWeightCeilingStructure()>
<megamek.common.verifier.TestXMLOption: float getWeightCeilingTurret()>
<megamek.common.verifier.TestXMLOption: int getContentAsInteger(gd.xml.tiny.ParsedXML)>
<megamek.common.verifier.TestXMLOption: int getPrintSize()>
<megamek.common.verifier.TestXMLOption: java.lang.String getContent(gd.xml.tiny.ParsedXML)>
<megamek.common.verifier.TestXMLOption: void <init>()>
<megamek.common.verifier.TestXMLOption: void readCeilWeight(gd.xml.tiny.ParsedXML)>
<megamek.common.verifier.TestXMLOption: void readXMLOptions(gd.xml.tiny.ParsedXML)>
<megamek.common.weapons.AAAMissileWeapon: void <init>()>
<megamek.common.weapons.ACBayWeapon: void <init>()>
<megamek.common.weapons.ACWeapon: void <init>()>
<megamek.common.weapons.AR10BayWeapon: void <init>()>
<megamek.common.weapons.AR10Weapon: void <init>()>
<megamek.common.weapons.ASEWMissileWeapon: void <init>()>
<megamek.common.weapons.ASMissileWeapon: void <init>()>
<megamek.common.weapons.ATMBayWeapon: void <init>()>
<megamek.common.weapons.ATMWeapon: void <init>()>
<megamek.common.weapons.AdvancedSRMWeapon: void <init>()>
<megamek.common.weapons.AlamoMissileWeapon: void <init>()>
<megamek.common.weapons.AltitudeBombAttack: void <init>()>
<megamek.common.weapons.AmmoBayWeapon: void <init>()>
<megamek.common.weapons.AmmoWeapon: void <init>()>
<megamek.common.weapons.ArtilleryBayWeapon: void <init>()>
<megamek.common.weapons.ArtilleryCannonWeapon: void <init>()>
<megamek.common.weapons.ArtilleryWeapon: void <init>()>
<megamek.common.weapons.BAMGWeapon: void <init>()>
<megamek.common.weapons.BPodWeapon: void <init>()>
<megamek.common.weapons.BarracudaTWeapon: void <init>()>
<megamek.common.weapons.BarracudaWeapon: void <init>()>
<megamek.common.weapons.BayWeapon: void <init>()>
<megamek.common.weapons.BombArrowIV: void <init>()>
<megamek.common.weapons.BombISRL10: void <init>()>
<megamek.common.weapons.BombTAG: void <init>()>
<megamek.common.weapons.CLAMS: void <init>()>
<megamek.common.weapons.CLAPGaussRifle: void <init>()>
<megamek.common.weapons.CLATM12: void <init>()>
<megamek.common.weapons.CLATM3: void <init>()>
<megamek.common.weapons.CLATM6: void <init>()>
<megamek.common.weapons.CLATM9: void <init>()>
<megamek.common.weapons.CLAdvancedSRM1: void <init>()>
<megamek.common.weapons.CLAdvancedSRM1OS: void <init>()>
<megamek.common.weapons.CLAdvancedSRM2: void <init>()>
<megamek.common.weapons.CLAdvancedSRM2IOS: void <init>()>
<megamek.common.weapons.CLAdvancedSRM2OS: void <init>()>
<megamek.common.weapons.CLAdvancedSRM3: void <init>()>
<megamek.common.weapons.CLAdvancedSRM3OS: void <init>()>
<megamek.common.weapons.CLAdvancedSRM4: void <init>()>
<megamek.common.weapons.CLAdvancedSRM4IOS: void <init>()>
<megamek.common.weapons.CLAdvancedSRM4OS: void <init>()>
<megamek.common.weapons.CLAdvancedSRM5: void <init>()>
<megamek.common.weapons.CLAdvancedSRM5OS: void <init>()>
<megamek.common.weapons.CLAdvancedSRM6: void <init>()>
<megamek.common.weapons.CLAdvancedSRM6IOS: void <init>()>
<megamek.common.weapons.CLAdvancedSRM6OS: void <init>()>
<megamek.common.weapons.CLArrowIV: void <init>()>
<megamek.common.weapons.CLBAAPGaussRifle: void <init>()>
<megamek.common.weapons.CLBAFlamer: void <init>()>
<megamek.common.weapons.CLBAHeavyMG: void <init>()>
<megamek.common.weapons.CLBALightMG: void <init>()>
<megamek.common.weapons.CLBAMG: void <init>()>
<megamek.common.weapons.CLBPod: void <init>()>
<megamek.common.weapons.CLBearhunterSuperheavyAC: void <init>()>
<megamek.common.weapons.CLChemicalLaserWeapon: void <init>()>
<megamek.common.weapons.CLERFlamer: void <init>()>
<megamek.common.weapons.CLERLargeLaser: void <init>()>
<megamek.common.weapons.CLERLargePulseLaser: void <init>()>
<megamek.common.weapons.CLERMediumLaser: void <init>()>
<megamek.common.weapons.CLERMediumLaserPrototype: void <init>()>
<megamek.common.weapons.CLERMediumPulseLaser: void <init>()>
<megamek.common.weapons.CLERMicroLaser: void <init>()>
<megamek.common.weapons.CLERPPC: void <init>()>
<megamek.common.weapons.CLERSmallLaser: void <init>()>
<megamek.common.weapons.CLERSmallLaserPrototype: void <init>()>
<megamek.common.weapons.CLERSmallPulseLaser: void <init>()>
<megamek.common.weapons.CLFireExtinguisher: void <init>()>
<megamek.common.weapons.CLFlamer: void <init>()>
<megamek.common.weapons.CLFluidGun: void <init>()>
<megamek.common.weapons.CLGaussRifle: void <init>()>
<megamek.common.weapons.CLHAG20: void <init>()>
<megamek.common.weapons.CLHAG30: void <init>()>
<megamek.common.weapons.CLHAG40: void <init>()>
<megamek.common.weapons.CLHeavyGrenadeLauncher: void <init>()>
<megamek.common.weapons.CLHeavyLargeLaser: void <init>()>
<megamek.common.weapons.CLHeavyMG: void <init>()>
<megamek.common.weapons.CLHeavyMGA: void <init>()>
<megamek.common.weapons.CLHeavyMediumLaser: void <init>()>
<megamek.common.weapons.CLHeavyRecoillessRifle: void <init>()>
<megamek.common.weapons.CLHeavySmallLaser: void <init>()>
<megamek.common.weapons.CLImprovedHeavyLargeLaser: void <init>()>
<megamek.common.weapons.CLImprovedHeavyMediumLaser: void <init>()>
<megamek.common.weapons.CLImprovedHeavySmallLaser: void <init>()>
<megamek.common.weapons.CLLB10XAC: void <init>()>
<megamek.common.weapons.CLLB20XAC: void <init>()>
<megamek.common.weapons.CLLB20XACPrototype: void <init>()>
<megamek.common.weapons.CLLB2XAC: void <init>()>
<megamek.common.weapons.CLLB2XACPrototype: void <init>()>
<megamek.common.weapons.CLLB5XAC: void <init>()>
<megamek.common.weapons.CLLB5XACPrototype: void <init>()>
<megamek.common.weapons.CLLBXACPrototypeWeapon: void <init>()>
<megamek.common.weapons.CLLRM10: void <init>()>
<megamek.common.weapons.CLLRM10IOS: void <init>()>
<megamek.common.weapons.CLLRM10OS: void <init>()>
<megamek.common.weapons.CLLRM11: void <init>()>
<megamek.common.weapons.CLLRM12: void <init>()>
<megamek.common.weapons.CLLRM13: void <init>()>
<megamek.common.weapons.CLLRM14: void <init>()>
<megamek.common.weapons.CLLRM15: void <init>()>
<megamek.common.weapons.CLLRM15IOS: void <init>()>
<megamek.common.weapons.CLLRM15OS: void <init>()>
<megamek.common.weapons.CLLRM16: void <init>()>
<megamek.common.weapons.CLLRM17: void <init>()>
<megamek.common.weapons.CLLRM18: void <init>()>
<megamek.common.weapons.CLLRM19: void <init>()>
<megamek.common.weapons.CLLRM1: void <init>()>
<megamek.common.weapons.CLLRM1OS: void <init>()>
<megamek.common.weapons.CLLRM20: void <init>()>
<megamek.common.weapons.CLLRM20IOS: void <init>()>
<megamek.common.weapons.CLLRM20OS: void <init>()>
<megamek.common.weapons.CLLRM2: void <init>()>
<megamek.common.weapons.CLLRM2OS: void <init>()>
<megamek.common.weapons.CLLRM3: void <init>()>
<megamek.common.weapons.CLLRM3OS: void <init>()>
<megamek.common.weapons.CLLRM4: void <init>()>
<megamek.common.weapons.CLLRM4OS: void <init>()>
<megamek.common.weapons.CLLRM5: void <init>()>
<megamek.common.weapons.CLLRM5IOS: void <init>()>
<megamek.common.weapons.CLLRM5OS: void <init>()>
<megamek.common.weapons.CLLRM6: void <init>()>
<megamek.common.weapons.CLLRM7: void <init>()>
<megamek.common.weapons.CLLRM8: void <init>()>
<megamek.common.weapons.CLLRM9: void <init>()>
<megamek.common.weapons.CLLRT10: void <init>()>
<megamek.common.weapons.CLLRT10IOS: void <init>()>
<megamek.common.weapons.CLLRT10OS: void <init>()>
<megamek.common.weapons.CLLRT11: void <init>()>
<megamek.common.weapons.CLLRT12: void <init>()>
<megamek.common.weapons.CLLRT13: void <init>()>
<megamek.common.weapons.CLLRT14: void <init>()>
<megamek.common.weapons.CLLRT15: void <init>()>
<megamek.common.weapons.CLLRT15IOS: void <init>()>
<megamek.common.weapons.CLLRT15OS: void <init>()>
<megamek.common.weapons.CLLRT16: void <init>()>
<megamek.common.weapons.CLLRT17: void <init>()>
<megamek.common.weapons.CLLRT18: void <init>()>
<megamek.common.weapons.CLLRT19: void <init>()>
<megamek.common.weapons.CLLRT1: void <init>()>
<megamek.common.weapons.CLLRT20: void <init>()>
<megamek.common.weapons.CLLRT20IOS: void <init>()>
<megamek.common.weapons.CLLRT20OS: void <init>()>
<megamek.common.weapons.CLLRT2: void <init>()>
<megamek.common.weapons.CLLRT3: void <init>()>
<megamek.common.weapons.CLLRT4: void <init>()>
<megamek.common.weapons.CLLRT5: void <init>()>
<megamek.common.weapons.CLLRT5IOS: void <init>()>
<megamek.common.weapons.CLLRT5OS: void <init>()>
<megamek.common.weapons.CLLRT6: void <init>()>
<megamek.common.weapons.CLLRT7: void <init>()>
<megamek.common.weapons.CLLRT8: void <init>()>
<megamek.common.weapons.CLLRT9: void <init>()>
<megamek.common.weapons.CLLargeChemicalLaser: void <init>()>
<megamek.common.weapons.CLLargePulseLaser: void <init>()>
<megamek.common.weapons.CLLaserAMS: void <init>()>
<megamek.common.weapons.CLLightMG: void <init>()>
<megamek.common.weapons.CLLightMGA: void <init>()>
<megamek.common.weapons.CLLightRecoillessRifle: void <init>()>
<megamek.common.weapons.CLLightTAG: void <init>()>
<megamek.common.weapons.CLLongTom: void <init>()>
<megamek.common.weapons.CLLongTomCannon: void <init>()>
<megamek.common.weapons.CLMG: void <init>()>
<megamek.common.weapons.CLMGA: void <init>()>
<megamek.common.weapons.CLMPod: void <init>()>
<megamek.common.weapons.CLMediumChemicalLaser: void <init>()>
<megamek.common.weapons.CLMediumPulseLaser: void <init>()>
<megamek.common.weapons.CLMediumRecoillessRifle: void <init>()>
<megamek.common.weapons.CLMekMortar1: void <init>()>
<megamek.common.weapons.CLMekMortar2: void <init>()>
<megamek.common.weapons.CLMekMortar4: void <init>()>
<megamek.common.weapons.CLMekMortar8: void <init>()>
<megamek.common.weapons.CLMicroBomb: void <init>()>
<megamek.common.weapons.CLMicroPulseLaser: void <init>()>
<megamek.common.weapons.CLNailGun: void <init>()>
<megamek.common.weapons.CLNarc: void <init>()>
<megamek.common.weapons.CLNarcOS: void <init>()>
<megamek.common.weapons.CLPlasmaCannon: void <init>()>
<megamek.common.weapons.CLPlasmaRifle: void <init>()>
<megamek.common.weapons.CLProtoMechAC2: void <init>()>
<megamek.common.weapons.CLProtoMechAC4: void <init>()>
<megamek.common.weapons.CLProtoMechAC8: void <init>()>
<megamek.common.weapons.CLPrototypeRL10: void <init>()>
<megamek.common.weapons.CLPrototypeRL15: void <init>()>
<megamek.common.weapons.CLPrototypeRL20: void <init>()>
<megamek.common.weapons.CLPrototypeStreakSRMWeapon: void <init>()>
<megamek.common.weapons.CLPrototypeUACWeapon: void <init>()>
<megamek.common.weapons.CLRAC10: void <init>()>
<megamek.common.weapons.CLRAC20: void <init>()>
<megamek.common.weapons.CLRAC2: void <init>()>
<megamek.common.weapons.CLRAC5: void <init>()>
<megamek.common.weapons.CLRivetGun: void <init>()>
<megamek.common.weapons.CLSRM1: void <init>()>
<megamek.common.weapons.CLSRM1OS: void <init>()>
<megamek.common.weapons.CLSRM2: void <init>()>
<megamek.common.weapons.CLSRM2IOS: void <init>()>
<megamek.common.weapons.CLSRM2OS: void <init>()>
<megamek.common.weapons.CLSRM3: void <init>()>
<megamek.common.weapons.CLSRM3OS: void <init>()>
<megamek.common.weapons.CLSRM4: void <init>()>
<megamek.common.weapons.CLSRM4IOS: void <init>()>
<megamek.common.weapons.CLSRM4OS: void <init>()>
<megamek.common.weapons.CLSRM5: void <init>()>
<megamek.common.weapons.CLSRM5OS: void <init>()>
<megamek.common.weapons.CLSRM6: void <init>()>
<megamek.common.weapons.CLSRM6IOS: void <init>()>
<megamek.common.weapons.CLSRM6OS: void <init>()>
<megamek.common.weapons.CLSRT2: void <init>()>
<megamek.common.weapons.CLSRT2IOS: void <init>()>
<megamek.common.weapons.CLSRT2OS: void <init>()>
<megamek.common.weapons.CLSRT4: void <init>()>
<megamek.common.weapons.CLSRT4IOS: void <init>()>
<megamek.common.weapons.CLSRT4OS: void <init>()>
<megamek.common.weapons.CLSRT6: void <init>()>
<megamek.common.weapons.CLSRT6IOS: void <init>()>
<megamek.common.weapons.CLSRT6OS: void <init>()>
<megamek.common.weapons.CLSmallChemicalLaser: void <init>()>
<megamek.common.weapons.CLSmallLaser: void <init>()>
<megamek.common.weapons.CLSmallPulseLaser: void <init>()>
<megamek.common.weapons.CLSniper: void <init>()>
<megamek.common.weapons.CLSniperCannon: void <init>()>
<megamek.common.weapons.CLStreakLRM10: void <init>()>
<megamek.common.weapons.CLStreakLRM10IOS: void <init>()>
<megamek.common.weapons.CLStreakLRM10OS: void <init>()>
<megamek.common.weapons.CLStreakLRM15: void <init>()>
<megamek.common.weapons.CLStreakLRM15IOS: void <init>()>
<megamek.common.weapons.CLStreakLRM15OS: void <init>()>
<megamek.common.weapons.CLStreakLRM20: void <init>()>
<megamek.common.weapons.CLStreakLRM20IOS: void <init>()>
<megamek.common.weapons.CLStreakLRM20OS: void <init>()>
<megamek.common.weapons.CLStreakLRM5: void <init>()>
<megamek.common.weapons.CLStreakLRM5OS: void <init>()>
<megamek.common.weapons.CLStreakSRM1: void <init>()>
<megamek.common.weapons.CLStreakSRM2: void <init>()>
<megamek.common.weapons.CLStreakSRM2IOS: void <init>()>
<megamek.common.weapons.CLStreakSRM2OS: void <init>()>
<megamek.common.weapons.CLStreakSRM3: void <init>()>
<megamek.common.weapons.CLStreakSRM4: void <init>()>
<megamek.common.weapons.CLStreakSRM4IOS: void <init>()>
<megamek.common.weapons.CLStreakSRM4OS: void <init>()>
<megamek.common.weapons.CLStreakSRM4Prototype: void <init>()>
<megamek.common.weapons.CLStreakSRM5: void <init>()>
<megamek.common.weapons.CLStreakSRM6: void <init>()>
<megamek.common.weapons.CLStreakSRM6IOS: void <init>()>
<megamek.common.weapons.CLStreakSRM6OS: void <init>()>
<megamek.common.weapons.CLStreakSRM6Prototype: void <init>()>
<megamek.common.weapons.CLSupportPPC: void <init>()>
<megamek.common.weapons.CLTAG: void <init>()>
<megamek.common.weapons.CLThumper: void <init>()>
<megamek.common.weapons.CLThumperCannon: void <init>()>
<megamek.common.weapons.CLUAC10: void <init>()>
<megamek.common.weapons.CLUAC10Prototype: void <init>()>
<megamek.common.weapons.CLUAC20: void <init>()>
<megamek.common.weapons.CLUAC20Prototype: void <init>()>
<megamek.common.weapons.CLUAC2: void <init>()>
<megamek.common.weapons.CLUAC2Prototype: void <init>()>
<megamek.common.weapons.CLUAC5: void <init>()>
<megamek.common.weapons.CLVehicleFlamer: void <init>()>
<megamek.common.weapons.CLWERPPC: void <init>()>
<megamek.common.weapons.CapitalACBayWeapon: void <init>()>
<megamek.common.weapons.CapitalGaussBayWeapon: void <init>()>
<megamek.common.weapons.CapitalLaserBayWeapon: void <init>()>
<megamek.common.weapons.CapitalMissileBayWeapon: void <init>()>
<megamek.common.weapons.CapitalMissileWeapon: void <init>()>
<megamek.common.weapons.CapitalPPCBayWeapon: void <init>()>
<megamek.common.weapons.DiveBombAttack: void <init>()>
<megamek.common.weapons.ERFlamerWeapon: void <init>()>
<megamek.common.weapons.EnergyWeapon: void <init>()>
<megamek.common.weapons.EnhancedLRMWeapon: void <init>()>
<megamek.common.weapons.ExtendedLRMWeapon: void <init>()>
<megamek.common.weapons.FlamerWeapon: void <init>()>
<megamek.common.weapons.FluidGunWeapon: void <init>()>
<megamek.common.weapons.GaussWeapon: void <init>()>
<megamek.common.weapons.HAGWeapon: void <init>()>
<megamek.common.weapons.HVACWeapon: void <init>()>
<megamek.common.weapons.HeavyNGaussWeapon: void <init>()>
<megamek.common.weapons.HeavyNPPCWeapon: void <init>()>
<megamek.common.weapons.HeavySCCWeapon: void <init>()>
<megamek.common.weapons.ISAC10: void <init>()>
<megamek.common.weapons.ISAC10i: void <init>()>
<megamek.common.weapons.ISAC15: void <init>()>
<megamek.common.weapons.ISAC20: void <init>()>
<megamek.common.weapons.ISAC2: void <init>()>
<megamek.common.weapons.ISAC5: void <init>()>
<megamek.common.weapons.ISAMS: void <init>()>
<megamek.common.weapons.ISArrowIV: void <init>()>
<megamek.common.weapons.ISAutoGrenadeLauncher: void <init>()>
<megamek.common.weapons.ISBAFlamer: void <init>()>
<megamek.common.weapons.ISBAHeavyMG: void <init>()>
<megamek.common.weapons.ISBALightMG: void <init>()>
<megamek.common.weapons.ISBAMG: void <init>()>
<megamek.common.weapons.ISBAMagshotGaussRifle: void <init>()>
<megamek.common.weapons.ISBAPlasmaRifle: void <init>()>
<megamek.common.weapons.ISBATaser: void <init>()>
<megamek.common.weapons.ISBPod: void <init>()>
<megamek.common.weapons.ISBinaryLaserCannon: void <init>()>
<megamek.common.weapons.ISBombastLaser: void <init>()>
<megamek.common.weapons.ISC3M: void <init>()>
<megamek.common.weapons.ISCompactNarc: void <init>()>
<megamek.common.weapons.ISCruiseMissile120: void <init>()>
<megamek.common.weapons.ISCruiseMissile50: void <init>()>
<megamek.common.weapons.ISCruiseMissile70: void <init>()>
<megamek.common.weapons.ISCruiseMissile90: void <init>()>
<megamek.common.weapons.ISDavidLightGaussRifle: void <init>()>
<megamek.common.weapons.ISEHERPPC: void <init>()>
<megamek.common.weapons.ISERFlamer: void <init>()>
<megamek.common.weapons.ISERLargeLaser: void <init>()>
<megamek.common.weapons.ISERLargeLaserPrototype: void <init>()>
<megamek.common.weapons.ISERMediumLaser: void <init>()>
<megamek.common.weapons.ISERPPC: void <init>()>
<megamek.common.weapons.ISERSmallLaser: void <init>()>
<megamek.common.weapons.ISEnhancedLRM10: void <init>()>
<megamek.common.weapons.ISEnhancedLRM15: void <init>()>
<megamek.common.weapons.ISEnhancedLRM20: void <init>()>
<megamek.common.weapons.ISEnhancedLRM5: void <init>()>
<megamek.common.weapons.ISExtendedLRM10: void <init>()>
<megamek.common.weapons.ISExtendedLRM15: void <init>()>
<megamek.common.weapons.ISExtendedLRM20: void <init>()>
<megamek.common.weapons.ISExtendedLRM5: void <init>()>
<megamek.common.weapons.ISFireExtinguisher: void <init>()>
<megamek.common.weapons.ISFiredrakeNeedler: void <init>()>
<megamek.common.weapons.ISFlamer: void <init>()>
<megamek.common.weapons.ISFluidGun: void <init>()>
<megamek.common.weapons.ISGAC2: void <init>()>
<megamek.common.weapons.ISGAC4: void <init>()>
<megamek.common.weapons.ISGAC6: void <init>()>
<megamek.common.weapons.ISGAC8: void <init>()>
<megamek.common.weapons.ISGaussRifle: void <init>()>
<megamek.common.weapons.ISGaussRiflePrototype: void <init>()>
<megamek.common.weapons.ISGrandMaulerGaussCannon: void <init>()>
<megamek.common.weapons.ISHERPPC: void <init>()>
<megamek.common.weapons.ISHGaussRifle: void <init>()>
<megamek.common.weapons.ISHVAC10: void <init>()>
<megamek.common.weapons.ISHVAC2: void <init>()>
<megamek.common.weapons.ISHVAC5: void <init>()>
<megamek.common.weapons.ISHeavyFlamer: void <init>()>
<megamek.common.weapons.ISHeavyMG: void <init>()>
<megamek.common.weapons.ISHeavyMGA: void <init>()>
<megamek.common.weapons.ISHeavyMortar: void <init>()>
<megamek.common.weapons.ISHeavyPPC: void <init>()>
<megamek.common.weapons.ISHeavyRecoillessRifle: void <init>()>
<megamek.common.weapons.ISHeavyRifle: void <init>()>
<megamek.common.weapons.ISIHGaussRifle: void <init>()>
<megamek.common.weapons.ISImprovedNarc: void <init>()>
<megamek.common.weapons.ISImprovedNarcOS: void <init>()>
<megamek.common.weapons.ISKingDavidLightGaussRifle: void <init>()>
<megamek.common.weapons.ISLAC10: void <init>()>
<megamek.common.weapons.ISLAC20: void <init>()>
<megamek.common.weapons.ISLAC2: void <init>()>
<megamek.common.weapons.ISLAC5: void <init>()>
<megamek.common.weapons.ISLB10XAC: void <init>()>
<megamek.common.weapons.ISLB10XACPrototype: void <init>()>
<megamek.common.weapons.ISLB20XAC: void <init>()>
<megamek.common.weapons.ISLB2XAC: void <init>()>
<megamek.common.weapons.ISLB5XAC: void <init>()>
<megamek.common.weapons.ISLGaussRifle: void <init>()>
<megamek.common.weapons.ISLRM10: void <init>()>
<megamek.common.weapons.ISLRM10IOS: void <init>()>
<megamek.common.weapons.ISLRM10OS: void <init>()>
<megamek.common.weapons.ISLRM15: void <init>()>
<megamek.common.weapons.ISLRM15IOS: void <init>()>
<megamek.common.weapons.ISLRM15OS: void <init>()>
<megamek.common.weapons.ISLRM1: void <init>()>
<megamek.common.weapons.ISLRM1OS: void <init>()>
<megamek.common.weapons.ISLRM20: void <init>()>
<megamek.common.weapons.ISLRM20IOS: void <init>()>
<megamek.common.weapons.ISLRM20OS: void <init>()>
<megamek.common.weapons.ISLRM2: void <init>()>
<megamek.common.weapons.ISLRM2OS: void <init>()>
<megamek.common.weapons.ISLRM3: void <init>()>
<megamek.common.weapons.ISLRM3OS: void <init>()>
<megamek.common.weapons.ISLRM4: void <init>()>
<megamek.common.weapons.ISLRM4OS: void <init>()>
<megamek.common.weapons.ISLRM5: void <init>()>
<megamek.common.weapons.ISLRM5IOS: void <init>()>
<megamek.common.weapons.ISLRM5OS: void <init>()>
<megamek.common.weapons.ISLRT10: void <init>()>
<megamek.common.weapons.ISLRT10IOS: void <init>()>
<megamek.common.weapons.ISLRT10OS: void <init>()>
<megamek.common.weapons.ISLRT15: void <init>()>
<megamek.common.weapons.ISLRT15IOS: void <init>()>
<megamek.common.weapons.ISLRT15OS: void <init>()>
<megamek.common.weapons.ISLRT20: void <init>()>
<megamek.common.weapons.ISLRT20IOS: void <init>()>
<megamek.common.weapons.ISLRT20OS: void <init>()>
<megamek.common.weapons.ISLRT5: void <init>()>
<megamek.common.weapons.ISLRT5IOS: void <init>()>
<megamek.common.weapons.ISLRT5OS: void <init>()>
<megamek.common.weapons.ISLargeLaser: void <init>()>
<megamek.common.weapons.ISLargePulseLaser: void <init>()>
<megamek.common.weapons.ISLargeVariableSpeedPulseLaser: void <init>()>
<megamek.common.weapons.ISLargeXPulseLaser: void <init>()>
<megamek.common.weapons.ISLaserAMS: void <init>()>
<megamek.common.weapons.ISLaserAMSTHB: void <init>()>
<megamek.common.weapons.ISLightMG: void <init>()>
<megamek.common.weapons.ISLightMGA: void <init>()>
<megamek.common.weapons.ISLightMortar: void <init>()>
<megamek.common.weapons.ISLightPPC: void <init>()>
<megamek.common.weapons.ISLightRecoillessRifle: void <init>()>
<megamek.common.weapons.ISLightRifle: void <init>()>
<megamek.common.weapons.ISLightTAG: void <init>()>
<megamek.common.weapons.ISLongTom: void <init>()>
<megamek.common.weapons.ISLongTomCannon: void <init>()>
<megamek.common.weapons.ISMG: void <init>()>
<megamek.common.weapons.ISMGA: void <init>()>
<megamek.common.weapons.ISMML3: void <init>()>
<megamek.common.weapons.ISMML5: void <init>()>
<megamek.common.weapons.ISMML7: void <init>()>
<megamek.common.weapons.ISMML9: void <init>()>
<megamek.common.weapons.ISMPod: void <init>()>
<megamek.common.weapons.ISMRM10: void <init>()>
<megamek.common.weapons.ISMRM10IOS: void <init>()>
<megamek.common.weapons.ISMRM10OS: void <init>()>
<megamek.common.weapons.ISMRM1: void <init>()>
<megamek.common.weapons.ISMRM1OS: void <init>()>
<megamek.common.weapons.ISMRM20: void <init>()>
<megamek.common.weapons.ISMRM20IOS: void <init>()>
<megamek.common.weapons.ISMRM20OS: void <init>()>
<megamek.common.weapons.ISMRM2: void <init>()>
<megamek.common.weapons.ISMRM2OS: void <init>()>
<megamek.common.weapons.ISMRM30: void <init>()>
<megamek.common.weapons.ISMRM30IOS: void <init>()>
<megamek.common.weapons.ISMRM30OS: void <init>()>
<megamek.common.weapons.ISMRM3: void <init>()>
<megamek.common.weapons.ISMRM3OS: void <init>()>
<megamek.common.weapons.ISMRM40: void <init>()>
<megamek.common.weapons.ISMRM40IOS: void <init>()>
<megamek.common.weapons.ISMRM40OS: void <init>()>
<megamek.common.weapons.ISMRM4: void <init>()>
<megamek.common.weapons.ISMRM4OS: void <init>()>
<megamek.common.weapons.ISMRM5: void <init>()>
<megamek.common.weapons.ISMRM5OS: void <init>()>
<megamek.common.weapons.ISMagshotGaussRifle: void <init>()>
<megamek.common.weapons.ISMediumLaser: void <init>()>
<megamek.common.weapons.ISMediumPulseLaser: void <init>()>
<megamek.common.weapons.ISMediumPulseLaserPrototype: void <init>()>
<megamek.common.weapons.ISMediumRecoillessRifle: void <init>()>
<megamek.common.weapons.ISMediumRifle: void <init>()>
<megamek.common.weapons.ISMediumVariableSpeedPulseLaser: void <init>()>
<megamek.common.weapons.ISMediumXPulseLaser: void <init>()>
<megamek.common.weapons.ISMekMortar1: void <init>()>
<megamek.common.weapons.ISMekMortar2: void <init>()>
<megamek.common.weapons.ISMekMortar4: void <init>()>
<megamek.common.weapons.ISMekMortar8: void <init>()>
<megamek.common.weapons.ISMekTaser: void <init>()>
<megamek.common.weapons.ISMicroGrenadeLauncher: void <init>()>
<megamek.common.weapons.ISMineLauncher: void <init>()>
<megamek.common.weapons.ISNailGun: void <init>()>
<megamek.common.weapons.ISNarc: void <init>()>
<megamek.common.weapons.ISNarcOS: void <init>()>
<megamek.common.weapons.ISPPC: void <init>()>
<megamek.common.weapons.ISPlasmaRifle: void <init>()>
<megamek.common.weapons.ISRAC2: void <init>()>
<megamek.common.weapons.ISRAC5: void <init>()>
<megamek.common.weapons.ISRL10: void <init>()>
<megamek.common.weapons.ISRL15: void <init>()>
<megamek.common.weapons.ISRL1: void <init>()>
<megamek.common.weapons.ISRL20: void <init>()>
<megamek.common.weapons.ISRL2: void <init>()>
<megamek.common.weapons.ISRL3: void <init>()>
<megamek.common.weapons.ISRL4: void <init>()>
<megamek.common.weapons.ISRL5: void <init>()>
<megamek.common.weapons.ISRailGun: void <init>()>
<megamek.common.weapons.ISRivetGun: void <init>()>
<megamek.common.weapons.ISSRM1: void <init>()>
<megamek.common.weapons.ISSRM1OS: void <init>()>
<megamek.common.weapons.ISSRM2: void <init>()>
<megamek.common.weapons.ISSRM2IOS: void <init>()>
<megamek.common.weapons.ISSRM2OS: void <init>()>
<megamek.common.weapons.ISSRM3: void <init>()>
<megamek.common.weapons.ISSRM3OS: void <init>()>
<megamek.common.weapons.ISSRM4: void <init>()>
<megamek.common.weapons.ISSRM4IOS: void <init>()>
<megamek.common.weapons.ISSRM4OS: void <init>()>
<megamek.common.weapons.ISSRM5: void <init>()>
<megamek.common.weapons.ISSRM5OS: void <init>()>
<megamek.common.weapons.ISSRM6: void <init>()>
<megamek.common.weapons.ISSRM6IOS: void <init>()>
<megamek.common.weapons.ISSRM6OS: void <init>()>
<megamek.common.weapons.ISSRT2: void <init>()>
<megamek.common.weapons.ISSRT2IOS: void <init>()>
<megamek.common.weapons.ISSRT2OS: void <init>()>
<megamek.common.weapons.ISSRT4: void <init>()>
<megamek.common.weapons.ISSRT4IOS: void <init>()>
<megamek.common.weapons.ISSRT4OS: void <init>()>
<megamek.common.weapons.ISSRT6: void <init>()>
<megamek.common.weapons.ISSRT6IOS: void <init>()>
<megamek.common.weapons.ISSRT6OS: void <init>()>
<megamek.common.weapons.ISSilverBulletGauss: void <init>()>
<megamek.common.weapons.ISSmallLaser: void <init>()>
<megamek.common.weapons.ISSmallPulseLaser: void <init>()>
<megamek.common.weapons.ISSmallVariableSpeedPulseLaser: void <init>()>
<megamek.common.weapons.ISSmallXPulseLaser: void <init>()>
<megamek.common.weapons.ISSniper: void <init>()>
<megamek.common.weapons.ISSniperCannon: void <init>()>
<megamek.common.weapons.ISSnubNosePPC: void <init>()>
<megamek.common.weapons.ISStreakSRM2: void <init>()>
<megamek.common.weapons.ISStreakSRM2IOS: void <init>()>
<megamek.common.weapons.ISStreakSRM2OS: void <init>()>
<megamek.common.weapons.ISStreakSRM4: void <init>()>
<megamek.common.weapons.ISStreakSRM4IOS: void <init>()>
<megamek.common.weapons.ISStreakSRM4OS: void <init>()>
<megamek.common.weapons.ISStreakSRM6: void <init>()>
<megamek.common.weapons.ISStreakSRM6IOS: void <init>()>
<megamek.common.weapons.ISStreakSRM6OS: void <init>()>
<megamek.common.weapons.ISSupportPPC: void <init>()>
<megamek.common.weapons.ISTAG: void <init>()>
<megamek.common.weapons.ISTHBLB20XAC: void <init>()>
<megamek.common.weapons.ISTHBLB2XAC: void <init>()>
<megamek.common.weapons.ISTHBLB5XAC: void <init>()>
<megamek.common.weapons.ISTHBUAC10: void <init>()>
<megamek.common.weapons.ISTHBUAC20: void <init>()>
<megamek.common.weapons.ISTHBUAC2: void <init>()>
<megamek.common.weapons.ISThumper: void <init>()>
<megamek.common.weapons.ISThumperCannon: void <init>()>
<megamek.common.weapons.ISThunderBolt10: void <init>()>
<megamek.common.weapons.ISThunderBolt15: void <init>()>
<megamek.common.weapons.ISThunderBolt20: void <init>()>
<megamek.common.weapons.ISThunderBolt5: void <init>()>
<megamek.common.weapons.ISTsunamiGaussRifle: void <init>()>
<megamek.common.weapons.ISUAC10: void <init>()>
<megamek.common.weapons.ISUAC20: void <init>()>
<megamek.common.weapons.ISUAC2: void <init>()>
<megamek.common.weapons.ISUAC5: void <init>()>
<megamek.common.weapons.ISUAC5Prototype: void <init>()>
<megamek.common.weapons.ISVehicleFlamer: void <init>()>
<megamek.common.weapons.InfantryAttack: void <init>()>
<megamek.common.weapons.KillerWhaleTWeapon: void <init>()>
<megamek.common.weapons.KillerWhaleWeapon: void <init>()>
<megamek.common.weapons.KrakenTWeapon: void <init>()>
<megamek.common.weapons.KrakenWeapon: void <init>()>
<megamek.common.weapons.LAAMissileWeapon: void <init>()>
<megamek.common.weapons.LACWeapon: void <init>()>
<megamek.common.weapons.LBXACWeapon: void <init>()>
<megamek.common.weapons.LBXBayWeapon: void <init>()>
<megamek.common.weapons.LRMBayWeapon: void <init>()>
<megamek.common.weapons.LRMWeapon: void <init>()>
<megamek.common.weapons.LRTWeapon: void <init>()>
<megamek.common.weapons.LaserBayWeapon: void <init>()>
<megamek.common.weapons.LaserWeapon: void <init>()>
<megamek.common.weapons.LegAttack: void <init>()>
<megamek.common.weapons.LightNGaussWeapon: void <init>()>
<megamek.common.weapons.LightNPPCWeapon: void <init>()>
<megamek.common.weapons.LightSCCWeapon: void <init>()>
<megamek.common.weapons.MGWeapon: void <init>()>
<megamek.common.weapons.MMLBayWeapon: void <init>()>
<megamek.common.weapons.MMLWeapon: void <init>()>
<megamek.common.weapons.MPodWeapon: void <init>()>
<megamek.common.weapons.MRMBayWeapon: void <init>()>
<megamek.common.weapons.MRMWeapon: void <init>()>
<megamek.common.weapons.MantaRayWeapon: void <init>()>
<megamek.common.weapons.MediumNGaussWeapon: void <init>()>
<megamek.common.weapons.MediumNPPCWeapon: void <init>()>
<megamek.common.weapons.MediumSCCWeapon: void <init>()>
<megamek.common.weapons.MekMortarWeapon: void <init>()>
<megamek.common.weapons.MiscBayWeapon: void <init>()>
<megamek.common.weapons.MissileWeapon: void <init>()>
<megamek.common.weapons.NAC10Weapon: void <init>()>
<megamek.common.weapons.NAC20Weapon: void <init>()>
<megamek.common.weapons.NAC25Weapon: void <init>()>
<megamek.common.weapons.NAC30Weapon: void <init>()>
<megamek.common.weapons.NAC35Weapon: void <init>()>
<megamek.common.weapons.NAC40Weapon: void <init>()>
<megamek.common.weapons.NL35Weapon: void <init>()>
<megamek.common.weapons.NL45Weapon: void <init>()>
<megamek.common.weapons.NL55Weapon: void <init>()>
<megamek.common.weapons.NailRivetGunWeapon: void <init>()>
<megamek.common.weapons.NarcWeapon: void <init>()>
<megamek.common.weapons.NavalACWeapon: void <init>()>
<megamek.common.weapons.NavalGaussWeapon: void <init>()>
<megamek.common.weapons.NavalLaserWeapon: void <init>()>
<megamek.common.weapons.NavalPPCWeapon: void <init>()>
<megamek.common.weapons.PPCBayWeapon: void <init>()>
<megamek.common.weapons.PPCWeapon: void <init>()>
<megamek.common.weapons.PiranhaWeapon: void <init>()>
<megamek.common.weapons.PlasmaBayWeapon: void <init>()>
<megamek.common.weapons.PlasmaMFUKWeapon: void <init>()>
<megamek.common.weapons.PointDefenseBayWeapon: void <init>()>
<megamek.common.weapons.ProtoMechACWeapon: void <init>()>
<megamek.common.weapons.PrototypeRLWeapon: void <init>()>
<megamek.common.weapons.PulseLaserBayWeapon: void <init>()>
<megamek.common.weapons.PulseLaserWeapon: void <init>()>
<megamek.common.weapons.RACWeapon: void <init>()>
<megamek.common.weapons.RLBayWeapon: void <init>()>
<megamek.common.weapons.RLWeapon: void <init>()>
<megamek.common.weapons.RifleWeapon: void <init>()>
<megamek.common.weapons.SCCBayWeapon: void <init>()>
<megamek.common.weapons.SCL1Weapon: void <init>()>
<megamek.common.weapons.SCL2Weapon: void <init>()>
<megamek.common.weapons.SCL3Weapon: void <init>()>
<megamek.common.weapons.SCLBayWeapon: void <init>()>
<megamek.common.weapons.SRMBayWeapon: void <init>()>
<megamek.common.weapons.SRMWeapon: void <init>()>
<megamek.common.weapons.SRTWeapon: void <init>()>
<megamek.common.weapons.ScreenLauncherBayWeapon: void <init>()>
<megamek.common.weapons.ScreenLauncherWeapon: void <init>()>
<megamek.common.weapons.SpaceBombAttack: void <init>()>
<megamek.common.weapons.StingrayWeapon: void <init>()>
<megamek.common.weapons.StopSwarmAttack: void <init>()>
<megamek.common.weapons.StreakLRMWeapon: void <init>()>
<megamek.common.weapons.StreakSRMWeapon: void <init>()>
<megamek.common.weapons.SubCapitalCannonWeapon: void <init>()>
<megamek.common.weapons.SubCapitalLaserWeapon: void <init>()>
<megamek.common.weapons.SubCapitalMissileBayWeapon: void <init>()>
<megamek.common.weapons.SubCapitalMissileWeapon: void <init>()>
<megamek.common.weapons.SwarmAttack: void <init>()>
<megamek.common.weapons.SwordfishWeapon: void <init>()>
<megamek.common.weapons.TAGWeapon: void <init>()>
<megamek.common.weapons.ThunderBoltWeapon: void <init>()>
<megamek.common.weapons.UACWeapon: void <init>()>
<megamek.common.weapons.VariableSpeedPulseLaserWeapon: void <init>()>
<megamek.common.weapons.VehicleFlamerWeapon: void <init>()>
<megamek.common.weapons.Weapon: void <init>()>
<megamek.common.weapons.WhiteSharkTWeapon: void <init>()>
<megamek.common.weapons.WhiteSharkWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicAxeWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicBasicCrossbowWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicBlackjackWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicBokkenWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicCarbonReinforcedNailsWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicClanVibroSwordWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicCompoundBowWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicDaggerWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicDaikyuBowWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicDaoWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicDoubleStunStaffWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicHankyuBowWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicHatchetWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicHeavyCrossbowWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicImprovisedClubWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicKatanaWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicLongBowWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicMedusaWhipWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicMiniStunstickWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicMonowireWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicNeuralLashWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicNeuralWhipWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicNoDachiWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicNunchakuWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicPolearmWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicShortBowWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicShurikenWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicSingleStunStaffWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicStaffWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicStunstickWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicSwordWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicVibroAxeWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicVibroBladeWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicVibroKatanaWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicVibroSwordWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicWakizashiWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryArchaicWhipWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryGrenadeInfernoWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryGrenadeMicroWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryGrenadeMiniInfernoWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryGrenadeRAGWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryGrenadeStandardWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryInfernoSRMWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryLRMWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryLightSRMWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolAutoPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolBlazerPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolClanERLaserPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolClanGaussPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolClanPulseLaserPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolCoventryHandrocketGyrojetPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolDartGunWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolFlamerPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolFlarePistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolGyrojetPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolHawkEagleAutoPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolHoldOutLaserPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolHoldoutGyrojetPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolHoldoutNeedlerPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolHoldoutPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolLaserPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolMagnumAutoPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolMagnumRevolverWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolMakeshiftPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolMandrakeGaussPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolMartialEagleMachinePistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolMauserAutoPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolMauserNeedlerPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolMydronAutoPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolNakjimaLaserPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolNambuAutoPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolNeedlerPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolPaintGunPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolPulseLaserPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolRevolverWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolSeaEagleNeedlerPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolSerrekAutoPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolSonicStunnerWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolSpitballGasPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolSternsnachtPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolSternsnachtPythonAutoPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolStettaAutoPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolSunbeamLaserPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolSunbeamNovaLaserPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolTKEnforcerAutoPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolTranqGunWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPistolWhiteDwarfLaserPistolWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryPortableMGWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleAutoRifleWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleBlazerRifleWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleBoltActionSniperWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleBoltActionWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleClanERLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleClanMauserIICIASInfernoWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleClanMauserIICIASWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleClanPulseLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleEbonyAssaultLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleElephantGunWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleFederatedBarrettM42BInfernoWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleFederatedBarrettM42BWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleFederatedBarrettM61ALaserInfernoWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleFederatedBarrettM61ALaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleFederatedLongWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleGyrojetWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleGyroslugCarbineWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleGyroslugRifleWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleHeavyGyrojetGunWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleImperatorAX22AssaultWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleIntekLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleMGFlechetteNeedlerWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleMagnaLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleMakeshiftWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleMarxXXLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleMauser1200LSSWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleMauser960LaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleMauserG150Weapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleMaxellPL10LaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleMinolta9000Weapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleNeedlerWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRiflePulseLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleRadiumLaserSniperWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleShredderHeavyNeedlerWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleStarKingGyroslugCarbineWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleSunbeamStarfireERLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleTKAssaultWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleThunderstrokeIIWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleThunderstrokeWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryRifleZeusHeavyWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySMGClanGaussWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySMGGuntherMP20Weapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySMGImperator2894A1Weapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySMGKA23SubgunWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySMGRorynexRM3XXIWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySMGRuganWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySMGWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryShotgunAutomaticWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryShotgunAvengerCCWWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryShotgunBuccaneerGelGunWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryShotgunCeresCrowdbusterWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryShotgunCombatWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryShotgunDoubleBarrelWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryShotgunPumpActionWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryShotgunSawnoffDoubleBarrelWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryShotgunSawnoffPumpActionWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportAutoGrenadeLauncherInfernoWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportAutoGrenadeLauncherWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportClanBearhunterAutocannonWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportClanERHeavyLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportClanERLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportClanSemiPortableERLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportClanSemiPortableHeavyLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportClanSemiPortablePulseLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportCompactGrenadeLauncherWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportDavidLightGaussRifleWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportDragonsbaneDisposablePulseLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportERHeavyLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportERLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportFiredrakeNeedlerWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportGrandMaulerGaussCannonWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportGrenadeLauncherInfernoWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportGrenadeLauncherWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportHeavyAutoGrenadeLauncherInfernoWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportHeavyAutoGrenadeLauncherWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportHeavyFlamerWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportHeavyGrenadeLauncherInfernoWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportHeavyGrenadeLauncherWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportHeavyLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportHeavyMachineGunWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportHeavyMortarInfernoWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportHeavyMortarWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportHeavyPPCWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportHeavyPulseLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportHeavyRecoillessRifleInfernoWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportHeavyRecoillessRifleWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportHeavySRMWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportHellboreAssaultLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportKingDavidLightGaussRifleWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportLAWWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportLightMachineGunWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportLightMortarInfernoWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportLightMortarWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportLightRecoillessRifleInfernoWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportLightRecoillessRifleWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportMagshotGaussRifleWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportMediumRecoillessRifleInfernoWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportMediumRecoillessRifleWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportMk1LightAAWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportMk2PortableAAWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportOneShotMRMWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportPortableAutocannonWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportPortableFlamerWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportPortablePPCWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportPortablePlasmaWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportPulseLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportSemiPortableLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportStandardSRMWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportTsunamiHeavyGaussRifleWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportUltraHeavyLaserWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantrySupportVLAWWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryTWFlamerWeapon: void <init>()>
<megamek.common.weapons.infantry.InfantryWeapon: void <init>()>
<megamek.server.DedicatedServer$CommandLineParser: int getPort()>
<megamek.server.DedicatedServer$CommandLineParser: java.lang.String getGameFilename()>
<megamek.server.DedicatedServer$CommandLineParser: void <init>(java.lang.String[])>
<megamek.server.DedicatedServer$CommandLineParser: void parsePort()>
<megamek.server.DedicatedServer$CommandLineParser: void start()>
<megamek.server.DedicatedServer: void displayMessage(java.lang.String)>
<megamek.server.DedicatedServer: void start(java.lang.String[])>
<megamek.server.DynamicTerrainProcessor: void <init>(megamek.server.Server)>
<megamek.server.ElevatorProcessor: void <init>(megamek.server.Server)>
<megamek.server.FireProcessor: void <init>(megamek.server.Server)>
<megamek.server.GeyserProcessor: void <init>(megamek.server.Server)>
<megamek.server.QuicksandProcessor: void <init>(megamek.server.Server)>
<megamek.server.ScreenProcessor: void <init>(megamek.server.Server)>
<megamek.server.Server$11: void <init>(megamek.server.Server)>
<megamek.server.Server$12: boolean accept(megamek.common.Entity)>
<megamek.server.Server$12: void <init>(megamek.server.Server)>
<megamek.server.Server$13: boolean accept(megamek.common.Entity)>
<megamek.server.Server$13: void <init>(megamek.server.Server)>
<megamek.server.Server$14: boolean accept(megamek.common.Entity)>
<megamek.server.Server$14: void <init>(megamek.server.Server)>
<megamek.server.Server$15: boolean accept(megamek.common.Entity)>
<megamek.server.Server$15: void <init>(megamek.server.Server)>
<megamek.server.Server$16: void <clinit>()>
<megamek.server.Server$1: void <init>(megamek.server.Server)>
<megamek.server.Server$2: boolean accept(megamek.common.Entity)>
<megamek.server.Server$2: void <init>(megamek.server.Server,int,int,char)>
<megamek.server.Server$3: boolean accept(megamek.common.Entity)>
<megamek.server.Server$3: void <init>(megamek.server.Server,megamek.common.Player)>
<megamek.server.Server$4: boolean accept(megamek.common.Entity)>
<megamek.server.Server$4: void <init>(megamek.server.Server)>
<megamek.server.Server$5: boolean accept(megamek.common.Entity)>
<megamek.server.Server$5: void <init>(megamek.server.Server,megamek.common.Player)>
<megamek.server.Server$6: boolean accept(megamek.common.Entity)>
<megamek.server.Server$6: void <init>(megamek.server.Server)>
<megamek.server.Server$DamageType: megamek.server.Server$DamageType[] values()>
<megamek.server.Server$DamageType: void <clinit>()>
<megamek.server.Server$DamageType: void <init>(java.lang.String,int)>
<megamek.server.Server: boolean canSee(megamek.common.Player,megamek.common.Entity)>
<megamek.server.Server: boolean canShelter(megamek.common.Coords,megamek.common.Coords,int)>
<megamek.server.Server: boolean checkBuildingCollapseWhileMoving(megamek.common.Building,megamek.common.Entity,megamek.common.Coords)>
<megamek.server.Server: boolean checkCrash(megamek.common.Entity,megamek.common.Coords,int)>
<megamek.server.Server: boolean checkEngineExplosion(megamek.common.Entity,java.util.Vector,int)>
<megamek.server.Server: boolean checkForCollapse(megamek.common.Building,java.util.Hashtable,megamek.common.Coords,boolean)>
<megamek.server.Server: boolean checkIgnition(megamek.common.Coords,megamek.common.TargetRoll,boolean,int,java.util.Vector)>
<megamek.server.Server: boolean checkVibrabombs(megamek.common.Entity,megamek.common.Coords,boolean,java.util.Vector)>
<megamek.server.Server: boolean checkVibrabombs(megamek.common.Entity,megamek.common.Coords,boolean,megamek.common.Coords,megamek.common.Coords,java.util.Vector)>
<megamek.server.Server: boolean clearMinefield(megamek.common.Minefield,megamek.common.Entity,int,int,java.util.Vector)>
<megamek.server.Server: boolean doBlind()>
<megamek.server.Server: boolean doSkillCheckInPlace(megamek.common.Entity,megamek.common.PilotingRollData)>
<megamek.server.Server: boolean enterMinefield(megamek.common.Entity,megamek.common.Coords,int,boolean,java.util.Vector)>
<megamek.server.Server: boolean enterMinefield(megamek.common.Entity,megamek.common.Coords,int,boolean,java.util.Vector,int)>
<megamek.server.Server: boolean isOffboardPlayable()>
<megamek.server.Server: boolean isPhasePlayable(megamek.common.IGame$Phase)>
<megamek.server.Server: boolean isPlayerForcedVictory()>
<megamek.server.Server: boolean isReportingPhase()>
<megamek.server.Server: boolean isSheltered()>
<megamek.server.Server: boolean loadGame(java.io.File)>
<megamek.server.Server: boolean passBuildingWall(megamek.common.Entity,megamek.common.Building,megamek.common.Coords,megamek.common.Coords,int,java.lang.String,boolean,megamek.common.EntityMovementType)>
<megamek.server.Server: boolean tryIgniteHex(megamek.common.Coords,int,boolean,boolean,megamek.common.TargetRoll,boolean,int,java.util.Vector)>
<megamek.server.Server: boolean tryIgniteHex(megamek.common.Coords,int,boolean,boolean,megamek.common.TargetRoll,int,java.util.Vector)>
<megamek.server.Server: boolean unloadUnit(megamek.common.Entity,megamek.common.Targetable,megamek.common.Coords,int,int)>
<megamek.server.Server: boolean victory()>
<megamek.server.Server: int doSkillCheckWhileMoving(megamek.common.Entity,megamek.common.Coords,megamek.common.Coords,megamek.common.PilotingRollData,boolean)>
<megamek.server.Server: int getFreeEntityId()>
<megamek.server.Server: java.lang.String createMotd()>
<megamek.server.Server: java.lang.String getColorForPlayer(megamek.common.Player)>
<megamek.server.Server: java.lang.String getDetailedVictoryReport()>
<megamek.server.Server: java.util.ArrayList scanForBoards(int,int)>
<megamek.server.Server: java.util.ArrayList scanForBoardsInDir(java.lang.String,java.lang.String,int,int)>
<megamek.server.Server: java.util.Vector abandonEntity(megamek.common.Entity)>
<megamek.server.Server: java.util.Vector applyCriticalHit(megamek.common.Entity,int,megamek.common.CriticalSlot,boolean)>
<megamek.server.Server: java.util.Vector applyCriticalHit(megamek.common.Entity,int,megamek.common.CriticalSlot,boolean,int,boolean)>
<megamek.server.Server: java.util.Vector breachCheck(megamek.common.Entity,int,megamek.common.IHex)>
<megamek.server.Server: java.util.Vector breachCheck(megamek.common.Entity,int,megamek.common.IHex,boolean)>
<megamek.server.Server: java.util.Vector breachLocation(megamek.common.Entity,int,megamek.common.IHex,boolean)>
<megamek.server.Server: java.util.Vector checkFatalThresholds(int)>
<megamek.server.Server: java.util.Vector checkQuickSand(megamek.common.Coords)>
<megamek.server.Server: java.util.Vector crashVTOLorWiGE(megamek.common.Tank)>
<megamek.server.Server: java.util.Vector crashVTOLorWiGE(megamek.common.Tank,boolean,int,megamek.common.Coords,int,int)>
<megamek.server.Server: java.util.Vector criticalAero(megamek.common.Aero,int,int,java.lang.String,int,int,boolean)>
<megamek.server.Server: java.util.Vector criticalEntity(megamek.common.Entity,int,int)>
<megamek.server.Server: java.util.Vector criticalEntity(megamek.common.Entity,int,int,boolean,boolean)>
<megamek.server.Server: java.util.Vector criticalGunEmplacement(java.util.Vector,megamek.common.Building,megamek.common.Coords)>
<megamek.server.Server: java.util.Vector criticalTank(megamek.common.Tank,int,int)>
<megamek.server.Server: java.util.Vector damageBuilding(megamek.common.Building,int,java.lang.String,megamek.common.Coords)>
<megamek.server.Server: java.util.Vector damageBuilding(megamek.common.Building,int,megamek.common.Coords)>
<megamek.server.Server: java.util.Vector damageCrew(megamek.common.Entity,int)>
<megamek.server.Server: java.util.Vector damageEntity(megamek.common.Entity,megamek.common.HitData,int)>
<megamek.server.Server: java.util.Vector damageEntity(megamek.common.Entity,megamek.common.HitData,int,boolean)>
<megamek.server.Server: java.util.Vector damageEntity(megamek.common.Entity,megamek.common.HitData,int,boolean,megamek.server.Server$DamageType,boolean)>
<megamek.server.Server: java.util.Vector damageEntity(megamek.common.Entity,megamek.common.HitData,int,boolean,megamek.server.Server$DamageType,boolean,boolean)>
<megamek.server.Server: java.util.Vector damageEntity(megamek.common.Entity,megamek.common.HitData,int,boolean,megamek.server.Server$DamageType,boolean,boolean,boolean)>
<megamek.server.Server: java.util.Vector damageEntity(megamek.common.Entity,megamek.common.HitData,int,boolean,megamek.server.Server$DamageType,boolean,boolean,boolean,boolean,boolean)>
<megamek.server.Server: java.util.Vector deliverInfernoMissiles(megamek.common.Entity,megamek.common.Targetable,int)>
<megamek.server.Server: java.util.Vector deliverInfernoMissiles(megamek.common.Entity,megamek.common.Targetable,int,int)>
<megamek.server.Server: java.util.Vector destroyEntity(megamek.common.Entity,java.lang.String)>
<megamek.server.Server: java.util.Vector destroyEntity(megamek.common.Entity,java.lang.String,boolean)>
<megamek.server.Server: java.util.Vector destroyEntity(megamek.common.Entity,java.lang.String,boolean,boolean)>
<megamek.server.Server: java.util.Vector doEntityDisplacement(megamek.common.Entity,megamek.common.Coords,megamek.common.Coords,megamek.common.PilotingRollData)>
<megamek.server.Server: java.util.Vector doEntityDisplacementBogDownCheck(megamek.common.Entity,megamek.common.Coords,int)>
<megamek.server.Server: java.util.Vector doEntityDisplacementMinefieldCheck(megamek.common.Entity,megamek.common.Coords,megamek.common.Coords,int)>
<megamek.server.Server: java.util.Vector doEntityFall(megamek.common.Entity,megamek.common.Coords,int,int,megamek.common.PilotingRollData)>
<megamek.server.Server: java.util.Vector doEntityFall(megamek.common.Entity,megamek.common.Coords,int,megamek.common.PilotingRollData)>
<megamek.server.Server: java.util.Vector doEntityFall(megamek.common.Entity,megamek.common.PilotingRollData)>
<megamek.server.Server: java.util.Vector doEntityFallsInto(megamek.common.Entity,megamek.common.Coords,megamek.common.Coords,megamek.common.PilotingRollData)>
<megamek.server.Server: java.util.Vector doEntityFallsInto(megamek.common.Entity,megamek.common.Coords,megamek.common.Coords,megamek.common.PilotingRollData,boolean)>
<megamek.server.Server: java.util.Vector doExtremeGravityDamage(megamek.common.Entity,int)>
<megamek.server.Server: java.util.Vector doSetLocationsExposure(megamek.common.Entity,megamek.common.IHex,boolean,int)>
<megamek.server.Server: java.util.Vector ejectEntity(megamek.common.Entity,boolean)>
<megamek.server.Server: java.util.Vector explodeAmmoFromHeat(megamek.common.Entity)>
<megamek.server.Server: java.util.Vector explodeEquipment(megamek.common.Entity,int,int)>
<megamek.server.Server: java.util.Vector explodeEquipment(megamek.common.Entity,int,megamek.common.Mounted)>
<megamek.server.Server: java.util.Vector explodeInfernoAmmoFromHeat(megamek.common.Entity)>
<megamek.server.Server: java.util.Vector explodeVTOLorWiGE(megamek.common.Tank)>
<megamek.server.Server: java.util.Vector filterEntities(megamek.common.Player,java.util.Vector)>
<megamek.server.Server: java.util.Vector filterReportVector(java.util.Vector,megamek.common.Player)>
<megamek.server.Server: java.util.Vector meltIceAndSnow(megamek.common.Coords,int)>
<megamek.server.Server: java.util.Vector oneCriticalEntity(megamek.common.Entity,int)>
<megamek.server.Server: java.util.Vector processCrash(megamek.common.Entity,int,megamek.common.Coords)>
<megamek.server.Server: java.util.Vector resolveBlowingSandDamage()>
<megamek.server.Server: java.util.Vector resolveControl(megamek.common.Entity)>
<megamek.server.Server: java.util.Vector resolveControlRolls()>
<megamek.server.Server: java.util.Vector resolveCrewDamage(megamek.common.Entity,int)>
<megamek.server.Server: java.util.Vector resolveIceBroken(megamek.common.Coords)>
<megamek.server.Server: java.util.Vector resolvePilotingRolls()>
<megamek.server.Server: java.util.Vector resolvePilotingRolls(megamek.common.Entity)>
<megamek.server.Server: java.util.Vector resolvePilotingRolls(megamek.common.Entity,boolean,megamek.common.Coords,megamek.common.Coords)>
<megamek.server.Server: java.util.Vector tryClearHex(megamek.common.Coords,int,int)>
<megamek.server.Server: java.util.Vector vehicleMotiveDamage(megamek.common.Tank,int)>
<megamek.server.Server: java.util.Vector whoCanSee(megamek.common.Entity)>
<megamek.server.Server: megamek.common.IGame getGame()>
<megamek.server.Server: megamek.common.PhysicalResult preTreatPhysicalAttack(megamek.common.actions.AbstractAttackAction)>
<megamek.server.Server: megamek.common.PilotingRollData getKickPushPSR(megamek.common.Entity,megamek.common.Entity,megamek.common.Entity,java.lang.String)>
<megamek.server.Server: megamek.common.Player getPlayer(int)>
<megamek.server.Server: megamek.common.Report filterReport(megamek.common.Report,megamek.common.Player,boolean)>
<megamek.server.Server: megamek.common.net.IConnection getClient(int)>
<megamek.server.Server: megamek.common.net.IConnection getConnection(int)>
<megamek.server.Server: megamek.common.net.Packet createAddEntityPacket(int)>
<megamek.server.Server: megamek.common.net.Packet createArtilleryPacket(megamek.common.Player)>
<megamek.server.Server: megamek.common.net.Packet createBoardPacket()>
<megamek.server.Server: megamek.common.net.Packet createCollapseBuildingPacket(java.util.Vector)>
<megamek.server.Server: megamek.common.net.Packet createCollapseBuildingPacket(megamek.common.Coords)>
<megamek.server.Server: megamek.common.net.Packet createEndOfGamePacket()>
<megamek.server.Server: megamek.common.net.Packet createEntitiesPacket()>
<megamek.server.Server: megamek.common.net.Packet createEntityPacket(int,java.util.Vector)>
<megamek.server.Server: megamek.common.net.Packet createFilteredEntitiesPacket(megamek.common.Player)>
<megamek.server.Server: megamek.common.net.Packet createFlarePacket()>
<megamek.server.Server: megamek.common.net.Packet createFullEntitiesPacket()>
<megamek.server.Server: megamek.common.net.Packet createHexChangePacket(megamek.common.Coords,megamek.common.IHex)>
<megamek.server.Server: megamek.common.net.Packet createMapSettingsPacket()>
<megamek.server.Server: megamek.common.net.Packet createMineChangePacket(megamek.common.Coords)>
<megamek.server.Server: megamek.common.net.Packet createPlanetaryConditionsPacket()>
<megamek.server.Server: megamek.common.net.Packet createPlayerDonePacket(int)>
<megamek.server.Server: megamek.common.net.Packet createPlayerUpdatePacket(int)>
<megamek.server.Server: megamek.common.net.Packet createRemoveEntityPacket(int,int)>
<megamek.server.Server: megamek.common.net.Packet createReportPacket(megamek.common.Player)>
<megamek.server.Server: megamek.common.net.Packet createSpecialHexDisplayPacket(int)>
<megamek.server.Server: megamek.common.net.Packet createTacticalGeniusReportPacket()>
<megamek.server.Server: megamek.common.net.Packet createTurnIndexPacket()>
<megamek.server.Server: megamek.common.net.Packet createTurnVectorPacket()>
<megamek.server.Server: megamek.common.net.Packet createUpdateBuildingCFPacket(java.util.Vector)>
<megamek.server.Server: megamek.server.Server getServerInstance()>
<megamek.server.Server: void <clinit>()>
<megamek.server.Server: void <init>(java.lang.String,int)>
<megamek.server.Server: void addMovementHeat()>
<megamek.server.Server: void addNewLines()>
<megamek.server.Server: void addObservers(java.util.Vector)>
<megamek.server.Server: void addReport(java.util.Vector)>
<megamek.server.Server: void addReport(megamek.common.Report)>
<megamek.server.Server: void addTeammates(java.util.Vector,megamek.common.Player)>
<megamek.server.Server: void applyBoardSettings()>
<megamek.server.Server: void applyBuildingDamage()>
<megamek.server.Server: void applySecondaryNuclearEffects(megamek.common.Entity,megamek.common.Coords,java.util.Vector)>
<megamek.server.Server: void assignAMS()>
<megamek.server.Server: void autoSave()>
<megamek.server.Server: void calculatePlayerBVs()>
<megamek.server.Server: void cancelVictory()>
<megamek.server.Server: void changePhase(megamek.common.IGame$Phase)>
<megamek.server.Server: void changeToNextTurn()>
<megamek.server.Server: void checkAeroCrits(java.util.Vector,megamek.common.Aero,megamek.common.HitData,int,boolean,boolean,boolean,boolean)>
<megamek.server.Server: void checkBreakSpikes(megamek.common.Entity,int)>
<megamek.server.Server: void checkEntityExchange()>
<megamek.server.Server: void checkExplodeIndustrialZone(megamek.common.Coords,java.util.Vector)>
<megamek.server.Server: void checkForAtmosphereDeath()>
<megamek.server.Server: void checkForBlueShieldDamage()>
<megamek.server.Server: void checkForConditionDeath()>
<megamek.server.Server: void checkForFlamingDamage()>
<megamek.server.Server: void checkForIndustrialCrit()>
<megamek.server.Server: void checkForIndustrialEndOfTurn()>
<megamek.server.Server: void checkForIndustrialUnstall()>
<megamek.server.Server: void checkForIndustrialWaterDeath()>
<megamek.server.Server: void checkForObservers()>
<megamek.server.Server: void checkForPSRFromDamage()>
<megamek.server.Server: void checkForSpaceDeath()>
<megamek.server.Server: void checkForSuffocation()>
<megamek.server.Server: void checkForTeleMissileAttacks()>
<megamek.server.Server: void cleanupPhysicalAttacks()>
<megamek.server.Server: void clearDetonatedMines(megamek.common.Coords,int)>
<megamek.server.Server: void clearReports()>
<megamek.server.Server: void collapseBuilding(megamek.common.Building,java.util.Hashtable,megamek.common.Coords)>
<megamek.server.Server: void collapseBuilding(megamek.common.Building,java.util.Hashtable,megamek.common.Coords,boolean)>
<megamek.server.Server: void creditKill(megamek.common.Entity,megamek.common.Entity)>
<megamek.server.Server: void damageInfantryIn(megamek.common.Building,int,megamek.common.Coords)>
<megamek.server.Server: void determineTurnOrder(megamek.common.IGame$Phase)>
<megamek.server.Server: void determineTurnOrderIUI(megamek.common.IGame$Phase)>
<megamek.server.Server: void doAllAssaultDrops()>
<megamek.server.Server: void doAssaultDrop(megamek.common.Entity)>
<megamek.server.Server: void doExplosion(int,int,boolean,megamek.common.Coords,boolean,java.util.Vector,java.util.Vector)>
<megamek.server.Server: void doExplosion(int[],boolean,megamek.common.Coords,boolean,java.util.Vector,java.util.Vector,int)>
<megamek.server.Server: void doFlamingDamage(megamek.common.Entity)>
<megamek.server.Server: void doFusionEngineExplosion(int,megamek.common.Coords,java.util.Vector,java.util.Vector)>
<megamek.server.Server: void doMagmaDamage(megamek.common.Entity,boolean)>
<megamek.server.Server: void doNuclearExplosion(megamek.common.Coords,int,int,int,int,java.util.Vector)>
<megamek.server.Server: void doNuclearExplosion(megamek.common.Coords,int,java.util.Vector)>
<megamek.server.Server: void doTryUnstuck()>
<megamek.server.Server: void endCurrentPhase()>
<megamek.server.Server: void endCurrentTurn(megamek.common.Entity)>
<megamek.server.Server: void entityAllUpdate()>
<megamek.server.Server: void entityUpdate(int)>
<megamek.server.Server: void entityUpdate(int,java.util.Vector)>
<megamek.server.Server: void executePhase(megamek.common.IGame$Phase)>
<megamek.server.Server: void explodeVibrabomb(megamek.common.Minefield,java.util.Vector,boolean)>
<megamek.server.Server: void handleAttacks()>
<megamek.server.Server: void ignite(megamek.common.Coords,boolean,java.util.Vector)>
<megamek.server.Server: void incrementAndSendGameRound()>
<megamek.server.Server: void prepareForPhase(megamek.common.IGame$Phase)>
<megamek.server.Server: void prepareVictoryReport()>
<megamek.server.Server: void registerCommand(megamek.server.commands.ServerCommand)>
<megamek.server.Server: void removeDeadAttacks()>
<megamek.server.Server: void removeDuplicateAttacks(int)>
<megamek.server.Server: void removeMinefield(megamek.common.Minefield)>
<megamek.server.Server: void removeMinefield(megamek.common.Player,megamek.common.Minefield)>
<megamek.server.Server: void reportGhostTargetRolls()>
<megamek.server.Server: void reportLargeCraftECCMRolls()>
<megamek.server.Server: void reportRoll(megamek.common.Roll)>
<megamek.server.Server: void resetActivePlayersDone()>
<megamek.server.Server: void resetEntityPhase(megamek.common.IGame$Phase)>
<megamek.server.Server: void resetEntityRound()>
<megamek.server.Server: void resetGame()>
<megamek.server.Server: void resetMines()>
<megamek.server.Server: void resetPlayersDone()>
<megamek.server.Server: void resolveAeroElevationLoss()>
<megamek.server.Server: void resolveAllButWeaponAttacks()>
<megamek.server.Server: void resolveAmmoDumps()>
<megamek.server.Server: void resolveBAVibroClawAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolveBreakGrappleAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolveBrushOffAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolveChargeAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolveChargeDamage(megamek.common.Entity,megamek.common.Entity,megamek.common.ToHitData,int,boolean,boolean)>
<megamek.server.Server: void resolveClearMinefield(megamek.common.Entity,megamek.common.Minefield)>
<megamek.server.Server: void resolveClubAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolveCrewWakeUp()>
<megamek.server.Server: void resolveDfaAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolveFindClub(megamek.common.Entity)>
<megamek.server.Server: void resolveFortify()>
<megamek.server.Server: void resolveGrappleAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolveGrappleAttack(megamek.common.PhysicalResult,int,int)>
<megamek.server.Server: void resolveHeat()>
<megamek.server.Server: void resolveJumpJetAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolveKickAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolveLayExplosivesAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolveMechWarriorPickUp()>
<megamek.server.Server: void resolveOnlyWeaponAttacks()>
<megamek.server.Server: void resolvePhysicalAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolvePhysicalAttacks()>
<megamek.server.Server: void resolveProtoAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolvePunchAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolvePushAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolveRamAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolveRamDamage(megamek.common.Aero,megamek.common.Aero,megamek.common.ToHitData,boolean,boolean)>
<megamek.server.Server: void resolveScheduledNukes()>
<megamek.server.Server: void resolveSinkVees()>
<megamek.server.Server: void resolveTeleMissileAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolveThrashAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolveTripAttack(megamek.common.PhysicalResult,int)>
<megamek.server.Server: void resolveUnjam(megamek.common.Entity)>
<megamek.server.Server: void resolveVeeINarcPodRemoval()>
<megamek.server.Server: void revealMinefield(megamek.common.Minefield)>
<megamek.server.Server: void revealMinefield(megamek.common.Team,megamek.common.Minefield)>
<megamek.server.Server: void rollInitiative()>
<megamek.server.Server: void saveGame(java.lang.String,boolean)>
<megamek.server.Server: void send(int,megamek.common.net.Packet)>
<megamek.server.Server: void send(megamek.common.net.Packet)>
<megamek.server.Server: void sendChangedCFBuildings(java.util.Vector)>
<megamek.server.Server: void sendChangedHex(megamek.common.Coords)>
<megamek.server.Server: void sendChangedMines(megamek.common.Coords)>
<megamek.server.Server: void sendChat(java.lang.String,java.lang.String)>
<megamek.server.Server: void sendGhostSkipMessage(megamek.common.Player)>
<megamek.server.Server: void sendReport()>
<megamek.server.Server: void sendReport(boolean)>
<megamek.server.Server: void sendServerChat(java.lang.String)>
<megamek.server.Server: void sendSpecialHexDisplayPackets()>
<megamek.server.Server: void sendTurnErrorSkipMessage(megamek.common.Player)>
<megamek.server.Server: void sendVisibilityIndicator(megamek.common.Entity)>
<megamek.server.Server: void setGame(megamek.common.IGame)>
<megamek.server.Server: void setIneligible(megamek.common.IGame$Phase)>
<megamek.server.Server: void transmitAllPlayerDones()>
<megamek.server.Server: void transmitAllPlayerUpdates()>
<megamek.server.Server: void triggerAPPod(megamek.common.Entity,int)>
<megamek.server.Server: void triggerBPod(megamek.common.Entity,int,megamek.common.Entity)>
<megamek.server.Server: void updateVisibilityIndicator()>
<megamek.server.Server: void writeInitiativeReport(boolean)>
<megamek.server.SmokeProcessor: void <init>(megamek.server.Server)>
<megamek.server.UnitStatusFormatter: java.lang.String format(megamek.common.Entity)>
<megamek.server.UnitStatusFormatter: java.lang.String formatAmmo(megamek.common.Entity)>
<megamek.server.UnitStatusFormatter: java.lang.String formatArmor(megamek.common.Entity)>
<megamek.server.UnitStatusFormatter: java.lang.String formatArmorBattleArmor(megamek.common.BattleArmor)>
<megamek.server.UnitStatusFormatter: java.lang.String formatArmorGunEmplacement(megamek.common.GunEmplacement)>
<megamek.server.UnitStatusFormatter: java.lang.String formatArmorInfantry(megamek.common.Infantry)>
<megamek.server.UnitStatusFormatter: java.lang.String formatArmorMech(megamek.common.Mech)>
<megamek.server.UnitStatusFormatter: java.lang.String formatArmorProtomech(megamek.common.Protomech)>
<megamek.server.UnitStatusFormatter: java.lang.String formatArmorTank(megamek.common.Tank)>
<megamek.server.UnitStatusFormatter: java.lang.String formatCrits(megamek.common.Entity)>
<megamek.server.UnitStatusFormatter: java.lang.String formatHeader(megamek.common.Entity)>
<megamek.server.UnitStatusFormatter: java.lang.String renderArmor(int)>
<megamek.server.UnitStatusFormatter: java.lang.String renderArmor(int,int)>
<megamek.server.WeatherProcessor: void <init>(megamek.server.Server)>
<megamek.server.commands.AddBotCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.CheckBVCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.DefeatCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.ExportListCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.FixElevationCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.HelpCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.KickCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.ListSavesCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.LoadGameCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.LocalLoadGameCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.LocalSaveGameCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.NukeCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.ResetCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.RollCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.RulerCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.SaveGameCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.SeeAllCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.ServerCommand: java.lang.String getName()>
<megamek.server.commands.ServerCommand: void <init>(megamek.server.Server,java.lang.String,java.lang.String)>
<megamek.server.commands.ShowEntityCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.ShowTileCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.ShowValidTargetsCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.SkipCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.TeamCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.VictoryCommand: void <init>(megamek.server.Server)>
<megamek.server.commands.WhoCommand: void <init>(megamek.server.Server)>
<megamek.server.victory.AbstractBVVictory: void <init>()>
<megamek.server.victory.BVDestroyedVictory: void <init>(int)>
<megamek.server.victory.BVRatioVictory: void <init>(int)>
<megamek.server.victory.CheckVictory: megamek.server.victory.Victory$Result victory(megamek.common.IGame,java.util.HashMap)>
<megamek.server.victory.CheckVictory: void <clinit>()>
<megamek.server.victory.CheckVictory: void <init>(megamek.server.victory.Victory)>
<megamek.server.victory.EnemyCmdrDestroyedVictory: void <init>()>
<megamek.server.victory.ForceVictory: megamek.server.victory.Victory$Result victory(megamek.common.IGame,java.util.HashMap)>
<megamek.server.victory.ForceVictory: void <init>()>
<megamek.server.victory.LastManStandingVictory: megamek.server.victory.Victory$Result victory(megamek.common.IGame,java.util.HashMap)>
<megamek.server.victory.LastManStandingVictory: void <init>()>
<megamek.server.victory.NoodleVictory: megamek.server.victory.Victory$Result victory(megamek.common.IGame,java.util.HashMap)>
<megamek.server.victory.NoodleVictory: void <init>()>
<megamek.server.victory.NoodleVictory: void construct(megamek.common.IGame)>
<megamek.server.victory.SimpleDrawResult: void <init>()>
<megamek.server.victory.SimpleNoResult: void <init>()>
<megamek.server.victory.SimpleResult: void <init>(boolean,int,int)>
<megamek.server.victory.SpaghettiVictory: megamek.server.victory.Victory$Result victory(megamek.common.IGame,java.util.HashMap)>
<megamek.server.victory.SpaghettiVictory: void <init>()>
<megamek.server.victory.SpaghettiVictoryFactory: megamek.server.victory.Victory createVictory(java.lang.String)>
<megamek.server.victory.SpaghettiVictoryFactory: void <init>()>
<megamek.server.victory.SummingThresholdVictory: megamek.server.victory.Victory$Result victory(megamek.common.IGame,java.util.HashMap)>
<megamek.server.victory.SummingThresholdVictory: void <init>(int,megamek.server.victory.Victory[])>
<megamek.server.victory.VictoryResult: boolean isDraw()>
<megamek.server.victory.VictoryResult: boolean victory()>
<megamek.server.victory.VictoryResult: double getPlayerScore(int)>
<megamek.server.victory.VictoryResult: double getTeamScore(int)>
<megamek.server.victory.VictoryResult: int getWinningPlayer()>
<megamek.server.victory.VictoryResult: int getWinningTeam()>
<megamek.server.victory.VictoryResult: int[] getPlayers()>
<megamek.server.victory.VictoryResult: int[] getTeams()>
<megamek.server.victory.VictoryResult: int[] intify(java.lang.Integer[])>
<megamek.server.victory.VictoryResult: java.util.ArrayList getReports()>
<megamek.server.victory.VictoryResult: void <init>(boolean)>
<megamek.server.victory.VictoryResult: void addPlayerScore(int,double)>
<megamek.server.victory.VictoryResult: void addReport(megamek.common.Report)>
<megamek.server.victory.VictoryResult: void addTeamScore(int,double)>
<megamek.server.victory.VictoryResult: void setVictory(boolean)>
<megamek.server.victory.VictoryResult: void updateHiScore()>
