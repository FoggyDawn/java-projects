<com.jcraft.jogg.Packet: void <init>()>
<com.jcraft.jogg.Page: int bos()>
<com.jcraft.jogg.Page: int continued()>
<com.jcraft.jogg.Page: int crc_entry(int)>
<com.jcraft.jogg.Page: int eos()>
<com.jcraft.jogg.Page: int pageno()>
<com.jcraft.jogg.Page: int serialno()>
<com.jcraft.jogg.Page: int version()>
<com.jcraft.jogg.Page: long granulepos()>
<com.jcraft.jogg.Page: void <clinit>()>
<com.jcraft.jogg.Page: void <init>()>
<com.jcraft.jogg.Page: void checksum()>
<com.jcraft.jogg.StreamState: int packetout(com.jcraft.jogg.Packet)>
<com.jcraft.jogg.StreamState: int pagein(com.jcraft.jogg.Page)>
<com.jcraft.jogg.StreamState: int reset()>
<com.jcraft.jogg.StreamState: void <init>()>
<com.jcraft.jogg.StreamState: void body_expand(int)>
<com.jcraft.jogg.StreamState: void init()>
<com.jcraft.jogg.StreamState: void init(int)>
<com.jcraft.jogg.StreamState: void lacing_expand(int)>
<com.jcraft.jogg.SyncState: int buffer(int)>
<com.jcraft.jogg.SyncState: int pageout(com.jcraft.jogg.Page)>
<com.jcraft.jogg.SyncState: int pageseek(com.jcraft.jogg.Page)>
<com.jcraft.jogg.SyncState: int wrote(int)>
<com.jcraft.jogg.SyncState: void <init>()>
<com.jcraft.jogg.SyncState: void init()>
<java.awt.Color: void <clinit>()>
<java.awt.Color: void <init>(int,boolean)>
<java.awt.Component: int getHeight()>
<java.awt.Component: int getWidth()>
<java.awt.Component: void <clinit>()>
<java.awt.Component: void <init>()>
<java.awt.Component: void setLocation(int,int)>
<java.awt.Component: void setVisible(boolean)>
<java.awt.Dimension: boolean equals(java.lang.Object)>
<java.awt.Dimension: void <init>(int,int)>
<java.awt.Font: java.awt.Font createFont(int,java.io.InputStream)>
<java.awt.Font: java.awt.Font decode(java.lang.String)>
<java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>
<java.awt.Point: void <init>(int,int)>
<java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>
<java.awt.Window: void dispose()>
<java.awt.Window: void pack()>
<java.beans.PropertyChangeSupport: void <init>(java.lang.Object)>
<java.beans.PropertyChangeSupport: void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>
<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,boolean,boolean)>
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.io.BufferedInputStream: void close()>
<java.io.BufferedReader: java.lang.String readLine()>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.ByteArrayInputStream: void <init>(byte[])>
<java.io.File: boolean canRead()>
<java.io.File: boolean canWrite()>
<java.io.File: boolean createNewFile()>
<java.io.File: boolean delete()>
<java.io.File: boolean exists()>
<java.io.File: boolean isDirectory()>
<java.io.File: boolean isFile()>
<java.io.File: boolean mkdir()>
<java.io.File: java.io.File getParentFile()>
<java.io.File: java.io.File[] listFiles()>
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>
<java.io.File: java.lang.String getAbsolutePath()>
<java.io.File: java.lang.String getName()>
<java.io.File: java.lang.String getPath()>
<java.io.File: java.net.URI toURI()>
<java.io.File: void <clinit>()>
<java.io.File: void <init>(java.io.File,java.lang.String)>
<java.io.File: void <init>(java.lang.String)>
<java.io.File: void <init>(java.net.URI)>
<java.io.FileInputStream: int read(byte[],int,int)>
<java.io.FileInputStream: void <init>(java.io.File)>
<java.io.FileInputStream: void close()>
<java.io.FileWriter: void <init>(java.io.File)>
<java.io.IOException: void <init>(java.lang.String)>
<java.io.InputStream: void <init>()>
<java.io.InputStreamReader: void <init>(java.io.InputStream)>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
<java.io.ObjectInputStream: java.lang.Object readObject()>
<java.io.ObjectInputStream: void <init>(java.io.InputStream)>
<java.io.OutputStreamWriter: void write(java.lang.String,int,int)>
<java.io.PrintWriter: void <init>(java.io.OutputStream)>
<java.io.PrintWriter: void flush()>
<java.io.PrintWriter: void println(java.lang.String)>
<java.io.StringReader: void <init>(java.lang.String)>
<java.io.StringWriter: java.lang.String toString()>
<java.io.StringWriter: void <init>()>
<java.lang.AbstractStringBuilder: int length()>
<java.lang.Boolean: boolean parseBoolean(java.lang.String)>
<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
<java.lang.Boolean: java.lang.String toString(boolean)>
<java.lang.Boolean: void <clinit>()>
<java.lang.Character: boolean isJavaIdentifierPart(char)>
<java.lang.Character: boolean isWhitespace(char)>
<java.lang.Character: void <clinit>()>
<java.lang.Character: void <init>(char)>
<java.lang.Class: boolean isEnum()>
<java.lang.Class: boolean isInstance(java.lang.Object)>
<java.lang.Class: boolean isPrimitive()>
<java.lang.Class: java.lang.Class forName(java.lang.String)>
<java.lang.Class: java.lang.Object cast(java.lang.Object)>
<java.lang.Class: java.lang.String getName()>
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
<java.lang.Class: java.net.URL getResource(java.lang.String)>
<java.lang.Class: void <clinit>()>
<java.lang.Double: java.lang.Double valueOf(java.lang.String)>
<java.lang.Double: void <clinit>()>
<java.lang.Enum: int ordinal()>
<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
<java.lang.Enum: java.lang.String toString()>
<java.lang.Enum: void <init>(java.lang.String,int)>
<java.lang.Exception: void <init>()>
<java.lang.Exception: void <init>(java.lang.String)>
<java.lang.Float: float parseFloat(java.lang.String)>
<java.lang.Float: java.lang.Float valueOf(java.lang.String)>
<java.lang.Float: void <clinit>()>
<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.lang.Integer: int parseInt(java.lang.String)>
<java.lang.Integer: int parseInt(java.lang.String,int)>
<java.lang.Integer: java.lang.Integer decode(java.lang.String)>
<java.lang.Integer: java.lang.Integer valueOf(int)>
<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>
<java.lang.Integer: java.lang.String toString(int)>
<java.lang.Integer: java.lang.String toString(int,int)>
<java.lang.Integer: void <clinit>()>
<java.lang.Integer: void <init>(int)>
<java.lang.Integer: void <init>(java.lang.String)>
<java.lang.Long: long parseLong(java.lang.String)>
<java.lang.Math: double pow(double,double)>
<java.lang.Math: int round(float)>
<java.lang.NullPointerException: void <init>(java.lang.String)>
<java.lang.Object: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.Class getClass()>
<java.lang.Object: java.lang.Object clone()>
<java.lang.Object: void <clinit>()>
<java.lang.Object: void <init>()>
<java.lang.Object: void wait()>
<java.lang.Runtime: java.lang.Runtime getRuntime()>
<java.lang.RuntimeException: void <init>(java.lang.String)>
<java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<java.lang.String: boolean equals(java.lang.Object)>
<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.lang.String: boolean startsWith(java.lang.String)>
<java.lang.String: char charAt(int)>
<java.lang.String: int indexOf(int)>
<java.lang.String: int indexOf(java.lang.String)>
<java.lang.String: int indexOf(java.lang.String,int)>
<java.lang.String: int lastIndexOf(int)>
<java.lang.String: int length()>
<java.lang.String: java.lang.String concat(java.lang.String)>
<java.lang.String: java.lang.String substring(int)>
<java.lang.String: java.lang.String substring(int,int)>
<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
<java.lang.String: java.lang.String valueOf(char)>
<java.lang.String: java.lang.String valueOf(int)>
<java.lang.String: void <clinit>()>
<java.lang.String: void <init>()>
<java.lang.String: void <init>(char[])>
<java.lang.String: void <init>(java.lang.String)>
<java.lang.StringBuffer: int length()>
<java.lang.StringBuffer: java.lang.String toString()>
<java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<java.lang.StringBuffer: void <init>()>
<java.lang.StringBuffer: void <init>(int)>
<java.lang.StringBuffer: void <init>(java.lang.String)>
<java.lang.StringBuilder: java.lang.String toString()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.StringBuilder: void <init>()>
<java.lang.StringBuilder: void <init>(java.lang.String)>
<java.lang.System: java.lang.String getProperty(java.lang.String)>
<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<java.lang.System: void <clinit>()>
<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.lang.System: void exit(int)>
<java.lang.Thread: java.lang.Thread currentThread()>
<java.lang.Thread: void <clinit>()>
<java.lang.Thread: void <init>()>
<java.lang.Thread: void <init>(java.lang.String)>
<java.lang.Thread: void dumpStack()>
<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
<java.lang.Thread: void setPriority(int)>
<java.lang.Thread: void start()>
<java.lang.Throwable: java.lang.String getMessage()>
<java.lang.Throwable: java.lang.String toString()>
<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
<java.lang.Throwable: void printStackTrace()>
<java.lang.UnsupportedOperationException: void <init>()>
<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.lang.ref.WeakReference: void <init>(java.lang.Object)>
<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<java.lang.reflect.Method: java.lang.String getName()>
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>
<java.net.ServerSocket: void <init>(int)>
<java.net.ServerSocket: void close()>
<java.net.Socket: java.io.InputStream getInputStream()>
<java.net.Socket: java.io.OutputStream getOutputStream()>
<java.net.Socket: java.net.InetAddress getLocalAddress()>
<java.net.Socket: void <init>()>
<java.net.Socket: void close()>
<java.net.Socket: void connect(java.net.SocketAddress,int)>
<java.net.URI: java.lang.String getPath()>
<java.net.URI: java.lang.String getScheme()>
<java.net.URI: java.lang.String getSchemeSpecificPart()>
<java.net.URI: java.net.URL toURL()>
<java.net.URI: void <init>(java.lang.String)>
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<java.security.SecureRandom: void <init>()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.AbstractList: java.util.Iterator iterator()>
<java.util.AbstractSequentialList: java.util.Iterator iterator()>
<java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.ArrayList: boolean addAll(java.util.Collection)>
<java.util.ArrayList: boolean contains(java.lang.Object)>
<java.util.ArrayList: boolean isEmpty()>
<java.util.ArrayList: boolean remove(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>
<java.util.ArrayList: int size()>
<java.util.ArrayList: java.lang.Object get(int)>
<java.util.ArrayList: java.lang.Object remove(int)>
<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>
<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.ArrayList: void <init>()>
<java.util.ArrayList: void <init>(int)>
<java.util.ArrayList: void <init>(java.util.Collection)>
<java.util.ArrayList: void add(int,java.lang.Object)>
<java.util.ArrayList: void clear()>
<java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.Arrays: void fill(char[],char)>
<java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>
<java.util.Collections: java.util.List singletonList(java.lang.Object)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<java.util.EnumMap: boolean containsKey(java.lang.Object)>
<java.util.EnumMap: java.lang.Object get(java.lang.Object)>
<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>
<java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.EnumMap: java.util.Collection values()>
<java.util.EnumMap: void <init>(java.lang.Class)>
<java.util.HashMap: boolean containsKey(java.lang.Object)>
<java.util.HashMap: boolean isEmpty()>
<java.util.HashMap: int size()>
<java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.HashMap: java.util.Collection values()>
<java.util.HashMap: java.util.Set entrySet()>
<java.util.HashMap: java.util.Set keySet()>
<java.util.HashMap: void <init>()>
<java.util.HashMap: void <init>(int)>
<java.util.HashMap: void clear()>
<java.util.HashMap: void putAll(java.util.Map)>
<java.util.HashSet: boolean add(java.lang.Object)>
<java.util.HashSet: boolean isEmpty()>
<java.util.HashSet: java.util.Iterator iterator()>
<java.util.HashSet: void <init>()>
<java.util.HashSet: void <init>(java.util.Collection)>
<java.util.HashSet: void clear()>
<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<java.util.LinkedHashMap: void <init>()>
<java.util.LinkedList: boolean add(java.lang.Object)>
<java.util.LinkedList: java.lang.Object poll()>
<java.util.LinkedList: void <init>()>
<java.util.Locale: java.lang.String getCountry()>
<java.util.Locale: java.lang.String getLanguage()>
<java.util.Locale: java.lang.String getVariant()>
<java.util.Locale: java.util.Locale getDefault()>
<java.util.Locale: void <clinit>()>
<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<java.util.Locale: void setDefault(java.util.Locale)>
<java.util.NoSuchElementException: void <init>(java.lang.String)>
<java.util.Properties: java.lang.String getProperty(java.lang.String)>
<java.util.Properties: java.util.Enumeration propertyNames()>
<java.util.Properties: void <init>()>
<java.util.Properties: void load(java.io.InputStream)>
<java.util.Random: int nextInt(int)>
<java.util.Random: long nextLong()>
<java.util.Random: void <init>(long)>
<java.util.StringTokenizer: boolean hasMoreTokens()>
<java.util.StringTokenizer: java.lang.String nextToken()>
<java.util.StringTokenizer: void <init>(java.lang.String)>
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>
<java.util.Timer: void <init>(boolean)>
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>
<java.util.TimerTask: void <init>()>
<java.util.UUID: java.util.UUID fromString(java.lang.String)>
<java.util.UUID: java.util.UUID randomUUID()>
<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.WeakHashMap: void <init>()>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool()>
<java.util.concurrent.LinkedBlockingQueue: void <init>()>
<java.util.jar.JarFile: java.util.Enumeration entries()>
<java.util.jar.JarFile: void <init>(java.io.File)>
<java.util.logging.Formatter: void <init>()>
<java.util.logging.Handler: void <clinit>()>
<java.util.logging.Handler: void <init>()>
<java.util.logging.Handler: void setFormatter(java.util.logging.Formatter)>
<java.util.logging.Level: java.util.logging.Level parse(java.lang.String)>
<java.util.logging.Level: void <clinit>()>
<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<java.util.zip.ZipFile: void close()>
<javax.sound.sampled.AudioFormat: void <init>(float,int,int,boolean,boolean)>
<javax.sound.sampled.AudioInputStream: void <init>(java.io.InputStream,javax.sound.sampled.AudioFormat,long)>
<javax.sound.sampled.AudioSystem: javax.sound.sampled.AudioInputStream getAudioInputStream(java.io.File)>
<javax.sound.sampled.AudioSystem: javax.sound.sampled.Mixer getMixer(javax.sound.sampled.Mixer$Info)>
<javax.sound.sampled.AudioSystem: javax.sound.sampled.Mixer$Info[] getMixerInfo()>
<javax.swing.AbstractAction: boolean isEnabled()>
<javax.swing.AbstractAction: java.lang.Object getValue(java.lang.String)>
<javax.swing.AbstractAction: void <init>(java.lang.String)>
<javax.swing.AbstractAction: void putValue(java.lang.String,java.lang.Object)>
<javax.swing.AbstractAction: void setEnabled(boolean)>
<javax.swing.ImageIcon: void <init>(java.awt.Image)>
<javax.swing.JLabel: void <init>(javax.swing.Icon)>
<javax.swing.JWindow: java.awt.Container getContentPane()>
<javax.swing.JWindow: void <init>()>
<javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int)>
<javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(java.lang.String)>
<javax.swing.SwingUtilities: void invokeLater(java.lang.Runnable)>
<javax.swing.UIManager: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.swing.UIManager: javax.swing.UIDefaults getDefaults()>
<javax.swing.UIManager: void setLookAndFeel(javax.swing.LookAndFeel)>
<javax.swing.filechooser.FileSystemView: javax.swing.filechooser.FileSystemView getFileSystemView()>
<javax.swing.plaf.metal.DefaultMetalTheme: void <clinit>()>
<javax.swing.plaf.metal.DefaultMetalTheme: void <init>()>
<javax.swing.plaf.metal.MetalLookAndFeel: void <clinit>()>
<javax.swing.plaf.metal.MetalLookAndFeel: void <init>()>
<javax.swing.plaf.metal.MetalLookAndFeel: void setCurrentTheme(javax.swing.plaf.metal.MetalTheme)>
<javax.swing.plaf.metal.MetalTheme: void <clinit>()>
<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>
<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>
<javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>
<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>
<javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>
<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>
<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>
<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>
<net.sf.freecol.FreeCol$1: void <init>(java.util.logging.Logger)>
<net.sf.freecol.FreeCol$2: void <init>(net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.FreeCol: boolean checkJavaVersion()>
<net.sf.freecol.FreeCol: int getDefaultPort()>
<net.sf.freecol.FreeCol: java.lang.String getRevision()>
<net.sf.freecol.FreeCol: java.lang.String getVersion()>
<net.sf.freecol.FreeCol: java.lang.String readVersion(java.lang.Class)>
<net.sf.freecol.FreeCol: java.util.Locale getLocale()>
<net.sf.freecol.FreeCol: void <clinit>()>
<net.sf.freecol.FreeCol: void handleArgs(java.lang.String[])>
<net.sf.freecol.FreeCol: void initLogging()>
<net.sf.freecol.FreeCol: void main(java.lang.String[])>
<net.sf.freecol.FreeCol: void printUsage()>
<net.sf.freecol.FreeCol: void setSavegame(java.lang.String)>
<net.sf.freecol.FreeCol: void startServer()>
<net.sf.freecol.client.ClientOptions$1: void <init>()>
<net.sf.freecol.client.ClientOptions$2: void <init>()>
<net.sf.freecol.client.ClientOptions$3: void <init>()>
<net.sf.freecol.client.ClientOptions$4: void <init>()>
<net.sf.freecol.client.ClientOptions$5: void <init>()>
<net.sf.freecol.client.ClientOptions$6: void <init>(net.sf.freecol.client.ClientOptions)>
<net.sf.freecol.client.ClientOptions: int getDisplayTileText()>
<net.sf.freecol.client.ClientOptions: java.lang.String getXMLElementTagName()>
<net.sf.freecol.client.ClientOptions: java.util.List getActiveMods()>
<net.sf.freecol.client.ClientOptions: void <clinit>()>
<net.sf.freecol.client.ClientOptions: void <init>()>
<net.sf.freecol.client.ClientOptions: void addDefaultOptions()>
<net.sf.freecol.client.ClientOptions: void loadOptions(java.io.File)>
<net.sf.freecol.client.ClientOptions: void loadOptions(java.io.InputStream)>
<net.sf.freecol.client.ClientOptions: void updateOptions(java.io.File)>
<net.sf.freecol.client.ClientOptions: void updateOptions(java.io.InputStream)>
<net.sf.freecol.client.FreeColClient$1: void <init>(net.sf.freecol.client.FreeColClient,java.awt.Dimension,boolean,boolean,java.io.File)>
<net.sf.freecol.client.FreeColClient$2: void <init>(net.sf.freecol.client.FreeColClient,java.io.File)>
<net.sf.freecol.client.FreeColClient: boolean currentPlayerIsMyPlayer()>
<net.sf.freecol.client.FreeColClient: net.sf.freecol.client.ClientOptions getClientOptions()>
<net.sf.freecol.client.FreeColClient: net.sf.freecol.common.model.Game getGame()>
<net.sf.freecol.client.FreeColClient: void <clinit>()>
<net.sf.freecol.client.FreeColClient: void <init>(java.io.File,java.awt.Dimension,boolean,java.lang.String,boolean,java.lang.String)>
<net.sf.freecol.client.FreeColClient: void loadClientOptions(java.io.File)>
<net.sf.freecol.client.Worker: void <clinit>()>
<net.sf.freecol.client.Worker: void <init>()>
<net.sf.freecol.client.control.ConnectController: void <clinit>()>
<net.sf.freecol.client.control.ConnectController: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.control.InGameController$1: void <init>()>
<net.sf.freecol.client.control.InGameController: void <clinit>()>
<net.sf.freecol.client.control.InGameController: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.control.InGameInputHandler: void <clinit>()>
<net.sf.freecol.client.control.InGameInputHandler: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.control.InputHandler: void <clinit>()>
<net.sf.freecol.client.control.InputHandler: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.control.MapEditorController: void <clinit>()>
<net.sf.freecol.client.control.MapEditorController: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.control.PreGameController: void <clinit>()>
<net.sf.freecol.client.control.PreGameController: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.control.PreGameInputHandler: void <clinit>()>
<net.sf.freecol.client.control.PreGameInputHandler: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.GUI: boolean isClientOptionsDialogShowing()>
<net.sf.freecol.client.gui.GUI: boolean isMapboardActionsEnabled()>
<net.sf.freecol.client.gui.GUI: boolean isWindowed()>
<net.sf.freecol.client.gui.GUI: java.awt.Dimension determineWindowSize()>
<net.sf.freecol.client.gui.GUI: net.sf.freecol.common.model.Unit getActiveUnit()>
<net.sf.freecol.client.gui.GUI: void <clinit>()>
<net.sf.freecol.client.gui.GUI: void <init>(net.sf.freecol.client.FreeColClient)>
<net.sf.freecol.client.gui.GUI: void displaySplashScreen(java.lang.String)>
<net.sf.freecol.client.gui.GUI: void hideSplashScreen()>
<net.sf.freecol.client.gui.GUI: void setWindowed(boolean)>
<net.sf.freecol.client.gui.ImageLibrary: void <clinit>()>
<net.sf.freecol.client.gui.ImageLibrary: void <init>()>
<net.sf.freecol.client.gui.ImageLibrary: void <init>(float)>
<net.sf.freecol.client.gui.action.AboutAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ActionManager: void <clinit>()>
<net.sf.freecol.client.gui.action.ActionManager: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ActionManager: void initializeActions(net.sf.freecol.client.control.InGameController,net.sf.freecol.client.control.ConnectController)>
<net.sf.freecol.client.gui.action.ActionManager: void update()>
<net.sf.freecol.client.gui.action.AssignTradeRouteAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.BuildColonyAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.CenterAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ChangeAction: boolean shouldBeEnabled()>
<net.sf.freecol.client.gui.action.ChangeAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ChangeAction: void update()>
<net.sf.freecol.client.gui.action.ChangeWindowedModeAction: boolean shouldBeSelected()>
<net.sf.freecol.client.gui.action.ChangeWindowedModeAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ChatAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ClearOrdersAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ColopediaAction$PanelType: net.sf.freecol.client.gui.action.ColopediaAction$PanelType[] values()>
<net.sf.freecol.client.gui.action.ColopediaAction$PanelType: void <clinit>()>
<net.sf.freecol.client.gui.action.ColopediaAction$PanelType: void <init>(java.lang.String,int)>
<net.sf.freecol.client.gui.action.ColopediaAction: void <clinit>()>
<net.sf.freecol.client.gui.action.ColopediaAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI,net.sf.freecol.client.gui.action.ColopediaAction$PanelType)>
<net.sf.freecol.client.gui.action.ContinueAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.control.ConnectController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.DebugAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.control.ConnectController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.DeclareIndependenceAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.DetermineHighSeasAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.DisbandUnitAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.DisplayBordersAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.DisplayGridAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.DisplayTileTextAction$DisplayText: net.sf.freecol.client.gui.action.DisplayTileTextAction$DisplayText[] values()>
<net.sf.freecol.client.gui.action.DisplayTileTextAction$DisplayText: void <clinit>()>
<net.sf.freecol.client.gui.action.DisplayTileTextAction$DisplayText: void <init>(java.lang.String,int)>
<net.sf.freecol.client.gui.action.DisplayTileTextAction: boolean shouldBeSelected()>
<net.sf.freecol.client.gui.action.DisplayTileTextAction: void <clinit>()>
<net.sf.freecol.client.gui.action.DisplayTileTextAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI,net.sf.freecol.client.gui.action.DisplayTileTextAction$DisplayText)>
<net.sf.freecol.client.gui.action.EndTurnAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.EuropeAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ExecuteGotoOrdersAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.FindSettlementAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.FortifyAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.FreeColAction: boolean hasOrderButtons()>
<net.sf.freecol.client.gui.action.FreeColAction: boolean shouldBeEnabled()>
<net.sf.freecol.client.gui.action.FreeColAction: java.lang.String getId()>
<net.sf.freecol.client.gui.action.FreeColAction: net.sf.freecol.client.FreeColClient getFreeColClient()>
<net.sf.freecol.client.gui.action.FreeColAction: void <clinit>()>
<net.sf.freecol.client.gui.action.FreeColAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI,java.lang.String)>
<net.sf.freecol.client.gui.action.FreeColAction: void addImageIcons(java.lang.String)>
<net.sf.freecol.client.gui.action.FreeColAction: void setAccelerator(javax.swing.KeyStroke)>
<net.sf.freecol.client.gui.action.FreeColAction: void setMnemonic(int)>
<net.sf.freecol.client.gui.action.FreeColAction: void update()>
<net.sf.freecol.client.gui.action.GotoAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.GotoTileAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.LoadAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.MapControlsAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.MapEditorAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.MapboardAction: boolean shouldBeEnabled()>
<net.sf.freecol.client.gui.action.MapboardAction: void <clinit>()>
<net.sf.freecol.client.gui.action.MapboardAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI,java.lang.String)>
<net.sf.freecol.client.gui.action.MiniMapZoomInAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.MiniMapZoomInAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI,boolean)>
<net.sf.freecol.client.gui.action.MiniMapZoomOutAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.MiniMapZoomOutAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI,boolean)>
<net.sf.freecol.client.gui.action.MoveAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI,net.sf.freecol.common.model.Map$Direction)>
<net.sf.freecol.client.gui.action.MoveAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI,net.sf.freecol.common.model.Map$Direction,boolean)>
<net.sf.freecol.client.gui.action.NewAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.NewEmptyMapAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.OpenAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.PreferencesAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.QuitAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReconnectAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.ConnectController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.RenameAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportCargoAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportColonyAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportContinentalCongressAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportEducationAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportExplorationAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportForeignAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportHighScoresAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportHistoryAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportIndianAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportLabourAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportMilitaryAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportNavalAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportProductionAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportReligionAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportRequirementsAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportTradeAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ReportTurnAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.RetireAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.SaveAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.SaveAndQuitAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ScaleMapAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.SelectableAction: boolean shouldBeSelected()>
<net.sf.freecol.client.gui.action.SelectableAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI,java.lang.String,java.lang.String)>
<net.sf.freecol.client.gui.action.SelectableAction: void setSelected(boolean)>
<net.sf.freecol.client.gui.action.SentryAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ShowDifficultyAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ShowGameOptionsAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ShowMainAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.ConnectController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ShowMapGeneratorOptionsAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.SkipUnitAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.TilePopupAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ToggleViewModeAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.TradeRouteAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.UnitAction: boolean shouldBeEnabled()>
<net.sf.freecol.client.gui.action.UnitAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI,java.lang.String)>
<net.sf.freecol.client.gui.action.UnloadAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.UnloadAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI,net.sf.freecol.common.model.Unit)>
<net.sf.freecol.client.gui.action.WaitAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.control.InGameController,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ZoomInAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.action.ZoomOutAction: void <init>(net.sf.freecol.client.FreeColClient,net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.client.gui.i18n.DefaultNumberRule: int countRules()>
<net.sf.freecol.client.gui.i18n.DefaultNumberRule: net.sf.freecol.client.gui.i18n.Rule getRule(net.sf.freecol.client.gui.i18n.Number$Category)>
<net.sf.freecol.client.gui.i18n.DefaultNumberRule: void <init>()>
<net.sf.freecol.client.gui.i18n.DefaultNumberRule: void addRule(net.sf.freecol.client.gui.i18n.Number$Category,net.sf.freecol.client.gui.i18n.Rule)>
<net.sf.freecol.client.gui.i18n.DualNumberRule: void <init>()>
<net.sf.freecol.client.gui.i18n.Messages$1: void <clinit>()>
<net.sf.freecol.client.gui.i18n.Messages: boolean containsKey(java.lang.String)>
<net.sf.freecol.client.gui.i18n.Messages: int findMatchingBracket(java.lang.String,int)>
<net.sf.freecol.client.gui.i18n.Messages: java.lang.String getChoice(java.lang.String,java.lang.String)>
<net.sf.freecol.client.gui.i18n.Messages: java.lang.String message(java.lang.String)>
<net.sf.freecol.client.gui.i18n.Messages: java.lang.String message(net.sf.freecol.common.model.StringTemplate)>
<net.sf.freecol.client.gui.i18n.Messages: java.lang.String replaceChoices(java.lang.String,net.sf.freecol.common.model.StringTemplate)>
<net.sf.freecol.client.gui.i18n.Messages: net.sf.freecol.client.gui.i18n.Selector getSelector(java.lang.String)>
<net.sf.freecol.client.gui.i18n.Messages: void <clinit>()>
<net.sf.freecol.client.gui.i18n.Messages: void loadMessages(java.io.InputStream)>
<net.sf.freecol.client.gui.i18n.Messages: void setGrammaticalNumber(net.sf.freecol.client.gui.i18n.Number)>
<net.sf.freecol.client.gui.i18n.Messages: void setMessageBundle(java.util.Locale)>
<net.sf.freecol.client.gui.i18n.Messages: void setModMessageBundle(java.util.Locale)>
<net.sf.freecol.client.gui.i18n.Number$Category: net.sf.freecol.client.gui.i18n.Number$Category valueOf(java.lang.String)>
<net.sf.freecol.client.gui.i18n.Number$Category: void <clinit>()>
<net.sf.freecol.client.gui.i18n.Number$Category: void <init>(java.lang.String,int)>
<net.sf.freecol.client.gui.i18n.Number: void <clinit>()>
<net.sf.freecol.client.gui.i18n.Number: void <init>()>
<net.sf.freecol.client.gui.i18n.NumberRules: boolean isInitialized()>
<net.sf.freecol.client.gui.i18n.NumberRules: net.sf.freecol.client.gui.i18n.Number getNumberForLanguage(java.lang.String)>
<net.sf.freecol.client.gui.i18n.NumberRules: void <clinit>()>
<net.sf.freecol.client.gui.i18n.NumberRules: void load(java.io.InputStream)>
<net.sf.freecol.client.gui.i18n.NumberRules: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.client.gui.i18n.NumberRules: void readFromXML(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.client.gui.i18n.OtherNumberRule: void <init>()>
<net.sf.freecol.client.gui.i18n.PluralNumberRule: void <init>()>
<net.sf.freecol.client.gui.i18n.Relation: void <init>(java.util.List)>
<net.sf.freecol.client.gui.i18n.Relation: void parse(java.util.List)>
<net.sf.freecol.client.gui.i18n.Rule: java.util.List parseCondition(java.util.List)>
<net.sf.freecol.client.gui.i18n.Rule: void <init>(java.lang.String)>
<net.sf.freecol.client.gui.i18n.Rule: void parse(java.lang.String)>
<net.sf.freecol.client.gui.i18n.TurnSelector: void <clinit>()>
<net.sf.freecol.client.gui.i18n.TurnSelector: void <init>()>
<net.sf.freecol.client.gui.i18n.ZeroOneNumberRule: void <init>()>
<net.sf.freecol.client.gui.plaf.FreeColLookAndFeel$1: void <init>(net.sf.freecol.client.gui.plaf.FreeColLookAndFeel)>
<net.sf.freecol.client.gui.plaf.FreeColLookAndFeel: void <clinit>()>
<net.sf.freecol.client.gui.plaf.FreeColLookAndFeel: void <init>()>
<net.sf.freecol.client.gui.plaf.FreeColLookAndFeel: void install(net.sf.freecol.client.gui.plaf.FreeColLookAndFeel,java.awt.Font)>
<net.sf.freecol.client.gui.sound.OggVorbisDecoderFactory$OggStream: java.lang.String getHeader()>
<net.sf.freecol.client.gui.sound.OggVorbisDecoderFactory$OggStream: java.lang.String getInput()>
<net.sf.freecol.client.gui.sound.OggVorbisDecoderFactory$OggStream: java.lang.String getPage()>
<net.sf.freecol.client.gui.sound.OggVorbisDecoderFactory$OggStream: javax.sound.sampled.AudioFormat getFormat()>
<net.sf.freecol.client.gui.sound.OggVorbisDecoderFactory$OggStream: void <init>(net.sf.freecol.client.gui.sound.OggVorbisDecoderFactory,java.io.InputStream)>
<net.sf.freecol.client.gui.sound.OggVorbisDecoderFactory$OggVorbisAudioInputStream: void <init>(net.sf.freecol.client.gui.sound.OggVorbisDecoderFactory,net.sf.freecol.client.gui.sound.OggVorbisDecoderFactory$OggStream)>
<net.sf.freecol.client.gui.sound.OggVorbisDecoderFactory: javax.sound.sampled.AudioInputStream getOggStream(java.io.File)>
<net.sf.freecol.client.gui.sound.OggVorbisDecoderFactory: void <init>()>
<net.sf.freecol.client.gui.sound.SoundPlayer: javax.sound.sampled.AudioInputStream getAudioInputStream(java.io.File)>
<net.sf.freecol.client.gui.sound.SoundPlayer: void <clinit>()>
<net.sf.freecol.client.networking.UserServerAPI: void <init>(net.sf.freecol.client.gui.GUI)>
<net.sf.freecol.common.FreeColException: void <init>(java.lang.String)>
<net.sf.freecol.common.FreeColSeed: long getFreeColSeed()>
<net.sf.freecol.common.FreeColSeed: void <clinit>()>
<net.sf.freecol.common.FreeColSeed: void initialize(long)>
<net.sf.freecol.common.debug.FreeColDebugger$DebugMode: void <clinit>()>
<net.sf.freecol.common.debug.FreeColDebugger$DebugMode: void <init>(java.lang.String,int)>
<net.sf.freecol.common.debug.FreeColDebugger: boolean isInDebugMode(net.sf.freecol.common.debug.FreeColDebugger$DebugMode)>
<net.sf.freecol.common.debug.FreeColDebugger: void <clinit>()>
<net.sf.freecol.common.debug.FreeColDebugger: void configureDebugRun(java.lang.String)>
<net.sf.freecol.common.debug.FreeColDebugger: void enableDebugMode(net.sf.freecol.common.debug.FreeColDebugger$DebugMode)>
<net.sf.freecol.common.debug.FreeColDebugger: void setDebugModes(java.lang.String)>
<net.sf.freecol.common.debug.FreeColDebugger: void setDebugRunSave(java.lang.String)>
<net.sf.freecol.common.debug.FreeColDebugger: void setDebugRunTurns(int)>
<net.sf.freecol.common.io.FreeColDataFile: java.io.BufferedInputStream getInputStream(java.lang.String)>
<net.sf.freecol.common.io.FreeColDataFile: java.lang.String findJarDirectory(java.lang.String,java.io.File)>
<net.sf.freecol.common.io.FreeColDataFile: java.lang.String[] getFileEndings()>
<net.sf.freecol.common.io.FreeColDataFile: java.net.URI getURI(java.lang.String)>
<net.sf.freecol.common.io.FreeColDataFile: java.util.List getFileNames(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<net.sf.freecol.common.io.FreeColDataFile: net.sf.freecol.common.resources.ResourceMapping getResourceMapping()>
<net.sf.freecol.common.io.FreeColDataFile: void <clinit>()>
<net.sf.freecol.common.io.FreeColDataFile: void <init>(java.io.File)>
<net.sf.freecol.common.io.FreeColDirectories: boolean insistDirectory(java.io.File)>
<net.sf.freecol.common.io.FreeColDirectories: java.io.File getBaseDirectory()>
<net.sf.freecol.common.io.FreeColDirectories: java.io.File getClientOptionsFile()>
<net.sf.freecol.common.io.FreeColDirectories: java.io.File getDataDirectory()>
<net.sf.freecol.common.io.FreeColDirectories: java.io.File getI18nDirectory()>
<net.sf.freecol.common.io.FreeColDirectories: java.io.File getMainUserDirectory()>
<net.sf.freecol.common.io.FreeColDirectories: java.io.File getRulesDirectory()>
<net.sf.freecol.common.io.FreeColDirectories: java.io.File getSaveDirectory()>
<net.sf.freecol.common.io.FreeColDirectories: java.io.File getSavegameFile()>
<net.sf.freecol.common.io.FreeColDirectories: java.io.File getStandardModsDirectory()>
<net.sf.freecol.common.io.FreeColDirectories: java.io.File getUserModsDirectory()>
<net.sf.freecol.common.io.FreeColDirectories: java.lang.String getTc()>
<net.sf.freecol.common.io.FreeColDirectories: void <clinit>()>
<net.sf.freecol.common.io.FreeColDirectories: void createAndSetDirectories()>
<net.sf.freecol.common.io.FreeColDirectories: void setClientOptionsFile(java.io.File)>
<net.sf.freecol.common.io.FreeColDirectories: void setDataFolder(java.lang.String)>
<net.sf.freecol.common.io.FreeColDirectories: void setMainUserDirectory(java.io.File)>
<net.sf.freecol.common.io.FreeColDirectories: void setSaveDirectory(java.io.File)>
<net.sf.freecol.common.io.FreeColDirectories: void setSaveGameFile(java.lang.String)>
<net.sf.freecol.common.io.FreeColDirectories: void setSavegameFile(java.io.File)>
<net.sf.freecol.common.io.FreeColDirectories: void setTc(java.lang.String)>
<net.sf.freecol.common.io.FreeColModFile: java.io.InputStream getModDescriptorInputStream()>
<net.sf.freecol.common.io.FreeColModFile: java.io.InputStream getSpecificationInputStream()>
<net.sf.freecol.common.io.FreeColModFile: java.lang.String getId()>
<net.sf.freecol.common.io.FreeColModFile: java.lang.String getParent()>
<net.sf.freecol.common.io.FreeColModFile: java.lang.String[] getFileEndings()>
<net.sf.freecol.common.io.FreeColModFile: net.sf.freecol.common.model.Specification getSpecification()>
<net.sf.freecol.common.io.FreeColModFile: void <clinit>()>
<net.sf.freecol.common.io.FreeColModFile: void <init>(java.io.File)>
<net.sf.freecol.common.io.FreeColModFile: void readModDescriptor()>
<net.sf.freecol.common.io.FreeColSavegameFile: java.io.BufferedInputStream getSavegameInputStream()>
<net.sf.freecol.common.io.FreeColSavegameFile: java.lang.String[] getFileEndings()>
<net.sf.freecol.common.io.FreeColSavegameFile: void <clinit>()>
<net.sf.freecol.common.io.FreeColSavegameFile: void <init>(java.io.File)>
<net.sf.freecol.common.io.FreeColTcFile: java.lang.String[] getFileEndings()>
<net.sf.freecol.common.io.FreeColTcFile: net.sf.freecol.common.resources.ResourceMapping getResourceMapping()>
<net.sf.freecol.common.io.FreeColTcFile: void <init>(java.io.File)>
<net.sf.freecol.common.io.FreeColTcFile: void <init>(java.lang.String)>
<net.sf.freecol.common.io.Mods$1: void <init>()>
<net.sf.freecol.common.io.Mods: java.util.Collection getAllMods()>
<net.sf.freecol.common.io.Mods: java.util.List getRuleSets()>
<net.sf.freecol.common.io.Mods: net.sf.freecol.common.io.FreeColModFile getModFile(java.lang.String)>
<net.sf.freecol.common.io.Mods: void <clinit>()>
<net.sf.freecol.common.io.Mods: void loadModDirectory(java.io.File)>
<net.sf.freecol.common.io.Mods: void loadMods()>
<net.sf.freecol.common.logging.DefaultHandler: void <init>(boolean,java.lang.String)>
<net.sf.freecol.common.logging.TextFormatter: void <init>()>
<net.sf.freecol.common.model.Ability: void <init>(java.lang.String)>
<net.sf.freecol.common.model.Ability: void <init>(java.lang.String,net.sf.freecol.common.model.FreeColGameObjectType,boolean)>
<net.sf.freecol.common.model.AbstractGoods: void <init>()>
<net.sf.freecol.common.model.AbstractGoods: void <init>(net.sf.freecol.common.model.GoodsType,int)>
<net.sf.freecol.common.model.AbstractGoods: void setAmount(int)>
<net.sf.freecol.common.model.AbstractGoods: void setType(net.sf.freecol.common.model.GoodsType)>
<net.sf.freecol.common.model.AbstractUnit: void <init>(java.lang.String,net.sf.freecol.common.model.Unit$Role,int)>
<net.sf.freecol.common.model.AbstractUnit: void <init>(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.AbstractUnit: void <init>(net.sf.freecol.common.model.UnitType,net.sf.freecol.common.model.Unit$Role,int)>
<net.sf.freecol.common.model.AbstractUnit: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.BuildQueue$CompletionAction: void <clinit>()>
<net.sf.freecol.common.model.BuildQueue$CompletionAction: void <init>(java.lang.String,int)>
<net.sf.freecol.common.model.BuildQueue: boolean isEmpty()>
<net.sf.freecol.common.model.BuildQueue: void <init>(net.sf.freecol.common.model.Colony,net.sf.freecol.common.model.BuildQueue$CompletionAction,int)>
<net.sf.freecol.common.model.BuildQueue: void add(net.sf.freecol.common.model.BuildableType)>
<net.sf.freecol.common.model.BuildQueue: void clear()>
<net.sf.freecol.common.model.BuildableType: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.Building: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.Building: void <clinit>()>
<net.sf.freecol.common.model.Building: void <init>(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.Building: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Building: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Building: void readFromXMLPartialImpl(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.BuildingType: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.Colony: int getUnitCount()>
<net.sf.freecol.common.model.Colony: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.Colony: java.util.List getCurrentWorkLocations()>
<net.sf.freecol.common.model.Colony: java.util.List getUnitList()>
<net.sf.freecol.common.model.Colony: void <clinit>()>
<net.sf.freecol.common.model.Colony: void <init>(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.Colony: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Colony: void addBuilding(net.sf.freecol.common.model.Building)>
<net.sf.freecol.common.model.Colony: void invalidateCache()>
<net.sf.freecol.common.model.Colony: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Colony: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Colony: void readFromXMLPartialImpl(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.ColonyTile: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.ColonyTile: void <clinit>()>
<net.sf.freecol.common.model.ColonyTile: void <init>(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.ColonyTile: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.ColonyTile: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.ColonyTile: void readFromXMLPartialImpl(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.CombatModel: void <init>()>
<net.sf.freecol.common.model.EquipmentType: void <clinit>()>
<net.sf.freecol.common.model.EquipmentType: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.Europe: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.Europe: net.sf.freecol.common.model.FeatureContainer getFeatureContainer()>
<net.sf.freecol.common.model.Europe: void <clinit>()>
<net.sf.freecol.common.model.Europe: void <init>(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.Europe: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Europe: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Europe: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Europe: void readFromXMLPartialImpl(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.ExportData: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.ExportData: void <init>()>
<net.sf.freecol.common.model.ExportData: void readFromXML(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Feature: java.util.List getScopes()>
<net.sf.freecol.common.model.Feature: net.sf.freecol.common.model.FreeColObject getSource()>
<net.sf.freecol.common.model.Feature: void <init>()>
<net.sf.freecol.common.model.Feature: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Feature: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Feature: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Feature: void setFirstTurn(net.sf.freecol.common.model.Turn)>
<net.sf.freecol.common.model.Feature: void setLastTurn(net.sf.freecol.common.model.Turn)>
<net.sf.freecol.common.model.Feature: void setSource(net.sf.freecol.common.model.FreeColObject)>
<net.sf.freecol.common.model.FeatureContainer: boolean addAbility(net.sf.freecol.common.model.FeatureContainer,net.sf.freecol.common.model.Ability)>
<net.sf.freecol.common.model.FeatureContainer: boolean addModifier(net.sf.freecol.common.model.FeatureContainer,net.sf.freecol.common.model.Modifier)>
<net.sf.freecol.common.model.FeatureContainer: boolean hasAbility(java.util.Set)>
<net.sf.freecol.common.model.FeatureContainer: boolean hasAbility(net.sf.freecol.common.model.FeatureContainer,java.lang.String,net.sf.freecol.common.model.FreeColGameObjectType,net.sf.freecol.common.model.Turn)>
<net.sf.freecol.common.model.FeatureContainer: java.util.Set getAbilitySet(net.sf.freecol.common.model.FeatureContainer,java.lang.String,net.sf.freecol.common.model.FreeColGameObjectType,net.sf.freecol.common.model.Turn)>
<net.sf.freecol.common.model.FeatureContainer: java.util.Set getModifierSet(java.lang.String,net.sf.freecol.common.model.FreeColGameObjectType,net.sf.freecol.common.model.Turn)>
<net.sf.freecol.common.model.FeatureContainer: java.util.Set getModifierSet(net.sf.freecol.common.model.FeatureContainer,java.lang.String,net.sf.freecol.common.model.FreeColGameObjectType,net.sf.freecol.common.model.Turn)>
<net.sf.freecol.common.model.FeatureContainer: void <clinit>()>
<net.sf.freecol.common.model.FeatureContainer: void <init>()>
<net.sf.freecol.common.model.FeatureContainer: void addFeatures(net.sf.freecol.common.model.FeatureContainer,net.sf.freecol.common.model.FreeColObject)>
<net.sf.freecol.common.model.FeatureContainer: void removeFeatures(net.sf.freecol.common.model.FeatureContainer,net.sf.freecol.common.model.FreeColObject)>
<net.sf.freecol.common.model.FeatureContainer: void requireAbilities()>
<net.sf.freecol.common.model.FeatureContainer: void requireModifiers()>
<net.sf.freecol.common.model.FoundingFather: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.FreeColGameObject: java.lang.String getRealXMLElementTagName()>
<net.sf.freecol.common.model.FreeColGameObject: net.sf.freecol.common.model.FreeColGameObject getFreeColGameObject(javax.xml.stream.XMLStreamReader,java.lang.String,java.lang.Class)>
<net.sf.freecol.common.model.FreeColGameObject: net.sf.freecol.common.model.FreeColGameObject getFreeColGameObject(javax.xml.stream.XMLStreamReader,java.lang.String,java.lang.Class,net.sf.freecol.common.model.FreeColGameObject)>
<net.sf.freecol.common.model.FreeColGameObject: net.sf.freecol.common.model.FreeColGameObject updateFreeColGameObject(javax.xml.stream.XMLStreamReader,java.lang.Class)>
<net.sf.freecol.common.model.FreeColGameObject: net.sf.freecol.common.model.Game getGame()>
<net.sf.freecol.common.model.FreeColGameObject: net.sf.freecol.common.model.Location newLocation(java.lang.String)>
<net.sf.freecol.common.model.FreeColGameObject: net.sf.freecol.common.model.Specification getSpecification()>
<net.sf.freecol.common.model.FreeColGameObject: void <clinit>()>
<net.sf.freecol.common.model.FreeColGameObject: void <init>(net.sf.freecol.common.model.Game)>
<net.sf.freecol.common.model.FreeColGameObject: void <init>(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.FreeColGameObject: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.FreeColGameObject: void readFromXML(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.FreeColGameObject: void readFromXMLPartialByClass(javax.xml.stream.XMLStreamReader,java.lang.Class)>
<net.sf.freecol.common.model.FreeColGameObject: void setDefaultId(net.sf.freecol.common.model.Game)>
<net.sf.freecol.common.model.FreeColGameObject: void setGame(net.sf.freecol.common.model.Game)>
<net.sf.freecol.common.model.FreeColGameObject: void setId(java.lang.String)>
<net.sf.freecol.common.model.FreeColGameObjectType: net.sf.freecol.common.model.FeatureContainer getFeatureContainer()>
<net.sf.freecol.common.model.FreeColGameObjectType: void <init>(java.lang.String)>
<net.sf.freecol.common.model.FreeColGameObjectType: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.FreeColGameObjectType: void setModifierIndex(int)>
<net.sf.freecol.common.model.FreeColObject: boolean addAbility(net.sf.freecol.common.model.Ability)>
<net.sf.freecol.common.model.FreeColObject: boolean addModifier(net.sf.freecol.common.model.Modifier)>
<net.sf.freecol.common.model.FreeColObject: boolean getAttribute(javax.xml.stream.XMLStreamReader,java.lang.String,boolean)>
<net.sf.freecol.common.model.FreeColObject: boolean hasAbility(java.lang.String)>
<net.sf.freecol.common.model.FreeColObject: boolean hasAbility(java.lang.String,net.sf.freecol.common.model.FreeColGameObjectType)>
<net.sf.freecol.common.model.FreeColObject: boolean hasAbility(java.lang.String,net.sf.freecol.common.model.FreeColGameObjectType,net.sf.freecol.common.model.Turn)>
<net.sf.freecol.common.model.FreeColObject: boolean hasAttribute(javax.xml.stream.XMLStreamReader,java.lang.String)>
<net.sf.freecol.common.model.FreeColObject: float getAttribute(javax.xml.stream.XMLStreamReader,java.lang.String,float)>
<net.sf.freecol.common.model.FreeColObject: int getAttribute(javax.xml.stream.XMLStreamReader,java.lang.String,int)>
<net.sf.freecol.common.model.FreeColObject: int[] readFromArrayElement(java.lang.String,javax.xml.stream.XMLStreamReader,int[])>
<net.sf.freecol.common.model.FreeColObject: java.lang.Enum getAttribute(javax.xml.stream.XMLStreamReader,java.lang.String,java.lang.Class,java.lang.Enum)>
<net.sf.freecol.common.model.FreeColObject: java.lang.String getAttribute(javax.xml.stream.XMLStreamReader,java.lang.String,java.lang.String)>
<net.sf.freecol.common.model.FreeColObject: java.lang.String getId()>
<net.sf.freecol.common.model.FreeColObject: java.lang.String[] readFromArrayElement(java.lang.String,javax.xml.stream.XMLStreamReader,java.lang.String[])>
<net.sf.freecol.common.model.FreeColObject: java.util.List readFromListElement(java.lang.String,javax.xml.stream.XMLStreamReader,java.lang.Class)>
<net.sf.freecol.common.model.FreeColObject: java.util.Set getAbilitySet(java.lang.String)>
<net.sf.freecol.common.model.FreeColObject: java.util.Set getAbilitySet(java.lang.String,net.sf.freecol.common.model.FreeColGameObjectType)>
<net.sf.freecol.common.model.FreeColObject: java.util.Set getAbilitySet(java.lang.String,net.sf.freecol.common.model.FreeColGameObjectType,net.sf.freecol.common.model.Turn)>
<net.sf.freecol.common.model.FreeColObject: java.util.Set getModifierSet(java.lang.String)>
<net.sf.freecol.common.model.FreeColObject: java.util.Set getModifierSet(java.lang.String,net.sf.freecol.common.model.FreeColGameObjectType)>
<net.sf.freecol.common.model.FreeColObject: java.util.Set getModifierSet(java.lang.String,net.sf.freecol.common.model.FreeColGameObjectType,net.sf.freecol.common.model.Turn)>
<net.sf.freecol.common.model.FreeColObject: net.sf.freecol.common.model.Location getLocationAttribute(javax.xml.stream.XMLStreamReader,java.lang.String,net.sf.freecol.common.model.Game)>
<net.sf.freecol.common.model.FreeColObject: net.sf.freecol.common.model.Specification getSpecification()>
<net.sf.freecol.common.model.FreeColObject: void <clinit>()>
<net.sf.freecol.common.model.FreeColObject: void <init>()>
<net.sf.freecol.common.model.FreeColObject: void addFeatures(net.sf.freecol.common.model.FreeColObject)>
<net.sf.freecol.common.model.FreeColObject: void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>
<net.sf.freecol.common.model.FreeColObject: void firePropertyChange(java.lang.String,boolean,boolean)>
<net.sf.freecol.common.model.FreeColObject: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>
<net.sf.freecol.common.model.FreeColObject: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.FreeColObject: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.FreeColObject: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.FreeColObject: void readFromXML(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.FreeColObject: void readFromXMLPartialImpl(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.FreeColObject: void removeFeatures(net.sf.freecol.common.model.FreeColObject)>
<net.sf.freecol.common.model.FreeColObject: void setId(java.lang.String)>
<net.sf.freecol.common.model.FreeColObject: void setSpecification(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.Game$1: boolean hasNext()>
<net.sf.freecol.common.model.Game$1: java.lang.Object next()>
<net.sf.freecol.common.model.Game$1: net.sf.freecol.common.model.FreeColGameObject next()>
<net.sf.freecol.common.model.Game$1: void <init>(net.sf.freecol.common.model.Game)>
<net.sf.freecol.common.model.Game: boolean checkIntegrity()>
<net.sf.freecol.common.model.Game: boolean fixIntegrity(java.util.List)>
<net.sf.freecol.common.model.Game: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.Game: java.util.Iterator getFreeColGameObjectIterator()>
<net.sf.freecol.common.model.Game: java.util.List getLiveEuropeanPlayers()>
<net.sf.freecol.common.model.Game: java.util.List getPlayers()>
<net.sf.freecol.common.model.Game: net.sf.freecol.common.model.FreeColGameObject getFreeColGameObject(java.lang.String)>
<net.sf.freecol.common.model.Game: net.sf.freecol.common.model.FreeColGameObject getFreeColGameObject(java.lang.String,java.lang.Class)>
<net.sf.freecol.common.model.Game: net.sf.freecol.common.model.FreeColGameObject removeFreeColGameObject(java.lang.String)>
<net.sf.freecol.common.model.Game: net.sf.freecol.common.model.Location getFreeColLocation(java.lang.String)>
<net.sf.freecol.common.model.Game: net.sf.freecol.common.model.Map getMap()>
<net.sf.freecol.common.model.Game: net.sf.freecol.common.model.Player getViewOwner()>
<net.sf.freecol.common.model.Game: net.sf.freecol.common.model.Specification getSpecification()>
<net.sf.freecol.common.model.Game: net.sf.freecol.common.model.Turn getTurn()>
<net.sf.freecol.common.model.Game: net.sf.freecol.common.option.OptionGroup getDifficultyLevel()>
<net.sf.freecol.common.model.Game: net.sf.freecol.common.option.OptionGroup getMapGeneratorOptions()>
<net.sf.freecol.common.model.Game: void <clinit>()>
<net.sf.freecol.common.model.Game: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.Game: void addOldOptions(net.sf.freecol.common.option.OptionGroup)>
<net.sf.freecol.common.model.Game: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Game: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Game: void readFromXMLPartialImpl(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Game: void setCurrentPlayer(net.sf.freecol.common.model.Player)>
<net.sf.freecol.common.model.Game: void setFreeColGameObject(java.lang.String,net.sf.freecol.common.model.FreeColGameObject)>
<net.sf.freecol.common.model.Game: void setFreeColGameObjectListener(net.sf.freecol.common.model.FreeColGameObjectListener)>
<net.sf.freecol.common.model.Game: void setNationOptions(net.sf.freecol.common.model.NationOptions)>
<net.sf.freecol.common.model.Game: void setSpanishSuccession(boolean)>
<net.sf.freecol.common.model.Game: void setUnknownEnemy(net.sf.freecol.common.model.Player)>
<net.sf.freecol.common.model.Goods: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.Goods: net.sf.freecol.common.model.Game getGame()>
<net.sf.freecol.common.model.Goods: void <clinit>()>
<net.sf.freecol.common.model.Goods: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Goods: void readFromXML(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.GoodsContainer: boolean addGoods(net.sf.freecol.common.model.GoodsType,int)>
<net.sf.freecol.common.model.GoodsContainer: boolean contains(net.sf.freecol.common.model.Goods)>
<net.sf.freecol.common.model.GoodsContainer: int getGoodsCount(net.sf.freecol.common.model.GoodsType)>
<net.sf.freecol.common.model.GoodsContainer: int getSpaceTaken()>
<net.sf.freecol.common.model.GoodsContainer: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.GoodsContainer: void <clinit>()>
<net.sf.freecol.common.model.GoodsContainer: void <init>(net.sf.freecol.common.model.Game,net.sf.freecol.common.model.Location,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.GoodsContainer: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.GoodsContainer: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.GoodsContainer: void readFromXMLPartialImpl(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.GoodsContainer: void removeAll()>
<net.sf.freecol.common.model.GoodsLocation: boolean add(net.sf.freecol.common.model.Locatable)>
<net.sf.freecol.common.model.GoodsLocation: boolean addGoods(net.sf.freecol.common.model.AbstractGoods)>
<net.sf.freecol.common.model.GoodsLocation: boolean addGoods(net.sf.freecol.common.model.GoodsType,int)>
<net.sf.freecol.common.model.GoodsLocation: boolean contains(net.sf.freecol.common.model.Locatable)>
<net.sf.freecol.common.model.GoodsLocation: net.sf.freecol.common.model.GoodsContainer getGoodsContainer()>
<net.sf.freecol.common.model.GoodsLocation: net.sf.freecol.common.model.UnitLocation$NoAddReason getNoAddReason(net.sf.freecol.common.model.Locatable)>
<net.sf.freecol.common.model.GoodsLocation: void <clinit>()>
<net.sf.freecol.common.model.GoodsLocation: void <init>(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.GoodsLocation: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.GoodsLocation: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.GoodsType: boolean isNewWorldGoodsType()>
<net.sf.freecol.common.model.GoodsType: boolean isStorable()>
<net.sf.freecol.common.model.GoodsType: int getInitialAmount()>
<net.sf.freecol.common.model.GoodsType: int getPriceDifference()>
<net.sf.freecol.common.model.GoodsType: net.sf.freecol.common.model.GoodsType getRawMaterial()>
<net.sf.freecol.common.model.GoodsType: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.HighSeas: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.HighSeas: void <clinit>()>
<net.sf.freecol.common.model.HighSeas: void <init>(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.HighSeas: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.HighSeas: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.HighSeas: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.HistoryEvent: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.HistoryEvent: void <init>()>
<net.sf.freecol.common.model.HistoryEvent: void readFromXML(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.IndianSettlement$1: void <init>(net.sf.freecol.common.model.IndianSettlement)>
<net.sf.freecol.common.model.IndianSettlement$2: void <init>(net.sf.freecol.common.model.IndianSettlement)>
<net.sf.freecol.common.model.IndianSettlement$ContactLevel: void <clinit>()>
<net.sf.freecol.common.model.IndianSettlement$ContactLevel: void <init>(java.lang.String,int)>
<net.sf.freecol.common.model.IndianSettlement: boolean add(net.sf.freecol.common.model.Locatable)>
<net.sf.freecol.common.model.IndianSettlement: boolean hasContacted(net.sf.freecol.common.model.Player)>
<net.sf.freecol.common.model.IndianSettlement: boolean hasScouted(net.sf.freecol.common.model.Player)>
<net.sf.freecol.common.model.IndianSettlement: boolean removeOwnedUnit(net.sf.freecol.common.model.Unit)>
<net.sf.freecol.common.model.IndianSettlement: boolean setContacted(net.sf.freecol.common.model.Player)>
<net.sf.freecol.common.model.IndianSettlement: boolean setScouted(net.sf.freecol.common.model.Player)>
<net.sf.freecol.common.model.IndianSettlement: int getGoodsCapacity()>
<net.sf.freecol.common.model.IndianSettlement: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.IndianSettlement: net.sf.freecol.common.model.IndianSettlement$ContactLevel getContactLevel(net.sf.freecol.common.model.Player)>
<net.sf.freecol.common.model.IndianSettlement: net.sf.freecol.common.model.Tension getAlarm(net.sf.freecol.common.model.Player)>
<net.sf.freecol.common.model.IndianSettlement: void <clinit>()>
<net.sf.freecol.common.model.IndianSettlement: void <init>(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.IndianSettlement: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.IndianSettlement: void initializeAlarm(net.sf.freecol.common.model.Player)>
<net.sf.freecol.common.model.IndianSettlement: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.IndianSettlement: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.IndianSettlement: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.IndianSettlement: void readFromXMLPartialImpl(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.IndianSettlement: void setAlarm(net.sf.freecol.common.model.Player,net.sf.freecol.common.model.Tension)>
<net.sf.freecol.common.model.IndianSettlement: void updateMostHated()>
<net.sf.freecol.common.model.LastSale: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.LastSale: void <init>()>
<net.sf.freecol.common.model.LastSale: void readFromXML(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.LostCityRumour: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.LostCityRumour: void <clinit>()>
<net.sf.freecol.common.model.LostCityRumour: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.LostCityRumour: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Map$3$1: boolean hasNext()>
<net.sf.freecol.common.model.Map$3$1: java.lang.Object next()>
<net.sf.freecol.common.model.Map$3$1: net.sf.freecol.common.model.Tile next()>
<net.sf.freecol.common.model.Map$3$1: void <init>(net.sf.freecol.common.model.Map$3)>
<net.sf.freecol.common.model.Map$3: java.util.Iterator iterator()>
<net.sf.freecol.common.model.Map$3: void <init>(net.sf.freecol.common.model.Map,net.sf.freecol.common.model.Map$MapIterator)>
<net.sf.freecol.common.model.Map$Direction: net.sf.freecol.common.model.Map$Direction getNextDirection()>
<net.sf.freecol.common.model.Map$Direction: net.sf.freecol.common.model.Map$Direction getPreviousDirection()>
<net.sf.freecol.common.model.Map$Direction: net.sf.freecol.common.model.Map$Direction rotate(int)>
<net.sf.freecol.common.model.Map$Direction: net.sf.freecol.common.model.Map$Direction[] values()>
<net.sf.freecol.common.model.Map$Direction: void <clinit>()>
<net.sf.freecol.common.model.Map$Direction: void <init>(java.lang.String,int,int,int,int,int)>
<net.sf.freecol.common.model.Map$Layer: net.sf.freecol.common.model.Map$Layer valueOf(java.lang.String)>
<net.sf.freecol.common.model.Map$Layer: void <clinit>()>
<net.sf.freecol.common.model.Map$Layer: void <init>(java.lang.String,int)>
<net.sf.freecol.common.model.Map$MapIterator: net.sf.freecol.common.model.Map$Position next()>
<net.sf.freecol.common.model.Map$MapIterator: void <init>(net.sf.freecol.common.model.Map)>
<net.sf.freecol.common.model.Map$MapIterator: void <init>(net.sf.freecol.common.model.Map,net.sf.freecol.common.model.Map$1)>
<net.sf.freecol.common.model.Map$Position: boolean isValid(int,int)>
<net.sf.freecol.common.model.Map$Position: int getX()>
<net.sf.freecol.common.model.Map$Position: int getY()>
<net.sf.freecol.common.model.Map$Position: net.sf.freecol.common.model.Map$Position getAdjacent(net.sf.freecol.common.model.Map$Direction)>
<net.sf.freecol.common.model.Map$Position: void <init>(int,int)>
<net.sf.freecol.common.model.Map$WholeMapIterator: boolean hasNext()>
<net.sf.freecol.common.model.Map$WholeMapIterator: net.sf.freecol.common.model.Map$Position nextPosition()>
<net.sf.freecol.common.model.Map$WholeMapIterator: void <init>(net.sf.freecol.common.model.Map)>
<net.sf.freecol.common.model.Map: boolean isValid(int,int)>
<net.sf.freecol.common.model.Map: boolean isValid(int,int,int,int)>
<net.sf.freecol.common.model.Map: boolean isValid(net.sf.freecol.common.model.Map$Position)>
<net.sf.freecol.common.model.Map: boolean[][] floodFill(boolean[][],net.sf.freecol.common.model.Map$Position)>
<net.sf.freecol.common.model.Map: boolean[][] floodFill(boolean[][],net.sf.freecol.common.model.Map$Position,int)>
<net.sf.freecol.common.model.Map: int getHeight()>
<net.sf.freecol.common.model.Map: int getWidth()>
<net.sf.freecol.common.model.Map: java.lang.Iterable getAllTiles()>
<net.sf.freecol.common.model.Map: java.lang.Iterable makeMapIteratorIterable(net.sf.freecol.common.model.Map$MapIterator)>
<net.sf.freecol.common.model.Map: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.Map: net.sf.freecol.common.model.Map$MapIterator getWholeMapIterator()>
<net.sf.freecol.common.model.Map: net.sf.freecol.common.model.Region getRegion(java.lang.String)>
<net.sf.freecol.common.model.Map: net.sf.freecol.common.model.Settlement getSettlement()>
<net.sf.freecol.common.model.Map: net.sf.freecol.common.model.Tile getTile(int,int)>
<net.sf.freecol.common.model.Map: net.sf.freecol.common.model.Tile getTile(net.sf.freecol.common.model.Map$Position)>
<net.sf.freecol.common.model.Map: void <clinit>()>
<net.sf.freecol.common.model.Map: void <init>(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.Map: void calculateLatitudePerRow()>
<net.sf.freecol.common.model.Map: void putRegion(net.sf.freecol.common.model.Region)>
<net.sf.freecol.common.model.Map: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Map: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Map: void resetContiguity()>
<net.sf.freecol.common.model.Map: void resetHighSeasCount()>
<net.sf.freecol.common.model.Map: void setLayer(net.sf.freecol.common.model.Map$Layer)>
<net.sf.freecol.common.model.Map: void setTile(net.sf.freecol.common.model.Tile,int,int)>
<net.sf.freecol.common.model.Market: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.Market: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Market: void <init>(net.sf.freecol.common.model.Game,net.sf.freecol.common.model.Player)>
<net.sf.freecol.common.model.Market: void putMarketData(net.sf.freecol.common.model.GoodsType,net.sf.freecol.common.model.MarketData)>
<net.sf.freecol.common.model.Market: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Market: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.MarketData: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.MarketData: net.sf.freecol.common.model.GoodsType getGoodsType()>
<net.sf.freecol.common.model.MarketData: void <clinit>()>
<net.sf.freecol.common.model.MarketData: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.MarketData: void <init>(net.sf.freecol.common.model.Game,net.sf.freecol.common.model.GoodsType)>
<net.sf.freecol.common.model.MarketData: void price()>
<net.sf.freecol.common.model.MarketData: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.ModelMessage$MessageType: void <clinit>()>
<net.sf.freecol.common.model.ModelMessage$MessageType: void <init>(java.lang.String,int,java.lang.String)>
<net.sf.freecol.common.model.ModelMessage: java.lang.String getOwnerId()>
<net.sf.freecol.common.model.ModelMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.ModelMessage: void <init>()>
<net.sf.freecol.common.model.ModelMessage: void readFromXML(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.ModelMessage: void setOwnerId(java.lang.String)>
<net.sf.freecol.common.model.Modifier$Type: void <clinit>()>
<net.sf.freecol.common.model.Modifier$Type: void <init>(java.lang.String,int)>
<net.sf.freecol.common.model.Modifier: boolean hasIncrement()>
<net.sf.freecol.common.model.Modifier: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.Modifier: java.lang.String toString()>
<net.sf.freecol.common.model.Modifier: void <clinit>()>
<net.sf.freecol.common.model.Modifier: void <init>(java.lang.String,float,net.sf.freecol.common.model.Modifier$Type)>
<net.sf.freecol.common.model.Modifier: void <init>(java.lang.String,net.sf.freecol.common.model.FreeColObject,float,net.sf.freecol.common.model.Modifier$Type)>
<net.sf.freecol.common.model.Modifier: void <init>(javax.xml.stream.XMLStreamReader,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.Modifier: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Modifier: void setType(net.sf.freecol.common.model.Modifier$Type)>
<net.sf.freecol.common.model.Modifier: void setValue(float)>
<net.sf.freecol.common.model.Monarch$Force: java.util.List getLandUnits()>
<net.sf.freecol.common.model.Monarch$Force: java.util.List getNavalUnits()>
<net.sf.freecol.common.model.Monarch$Force: java.util.List getUnits()>
<net.sf.freecol.common.model.Monarch$Force: void <init>(net.sf.freecol.common.model.Monarch)>
<net.sf.freecol.common.model.Monarch$Force: void <init>(net.sf.freecol.common.model.Monarch,net.sf.freecol.common.option.UnitListOption,java.lang.String)>
<net.sf.freecol.common.model.Monarch$Force: void readFromXML(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Monarch$Force: void updateSpaceAndCapacity()>
<net.sf.freecol.common.model.Monarch: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.Monarch: java.util.logging.Logger access$000()>
<net.sf.freecol.common.model.Monarch: void <clinit>()>
<net.sf.freecol.common.model.Monarch: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Monarch: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Monarch: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Monarch: void readFromXMLPartialImpl(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Nation: java.lang.String getRulerNameKey()>
<net.sf.freecol.common.model.Nation: void <clinit>()>
<net.sf.freecol.common.model.Nation: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.NationOptions$Advantages: void <clinit>()>
<net.sf.freecol.common.model.NationOptions$Advantages: void <init>(java.lang.String,int)>
<net.sf.freecol.common.model.NationOptions$NationState: void <clinit>()>
<net.sf.freecol.common.model.NationOptions$NationState: void <init>(java.lang.String,int)>
<net.sf.freecol.common.model.NationOptions: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.NationOptions: void <init>(net.sf.freecol.common.model.Specification,net.sf.freecol.common.model.NationOptions$Advantages)>
<net.sf.freecol.common.model.NationOptions: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.NationOptions: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.NationOptions: void setNationalAdvantages(net.sf.freecol.common.model.NationOptions$Advantages)>
<net.sf.freecol.common.model.NationOptions: void setNations(java.util.Map)>
<net.sf.freecol.common.model.NationType$AggressionLevel: void <clinit>()>
<net.sf.freecol.common.model.NationType$AggressionLevel: void <init>(java.lang.String,int)>
<net.sf.freecol.common.model.NationType$SettlementNumber: void <clinit>()>
<net.sf.freecol.common.model.NationType$SettlementNumber: void <init>(java.lang.String,int)>
<net.sf.freecol.common.model.NationType: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.Player$1: void <init>()>
<net.sf.freecol.common.model.Player$2: void <clinit>()>
<net.sf.freecol.common.model.Player$ActivePredicate: boolean obtains(net.sf.freecol.common.model.Unit)>
<net.sf.freecol.common.model.Player$ActivePredicate: void <init>(net.sf.freecol.common.model.Player,net.sf.freecol.common.model.Player)>
<net.sf.freecol.common.model.Player$GoingToPredicate: boolean obtains(net.sf.freecol.common.model.Unit)>
<net.sf.freecol.common.model.Player$GoingToPredicate: void <init>(net.sf.freecol.common.model.Player,net.sf.freecol.common.model.Player)>
<net.sf.freecol.common.model.Player$PlayerType: net.sf.freecol.common.model.Player$PlayerType[] values()>
<net.sf.freecol.common.model.Player$PlayerType: void <clinit>()>
<net.sf.freecol.common.model.Player$PlayerType: void <init>(java.lang.String,int)>
<net.sf.freecol.common.model.Player$Stance: net.sf.freecol.common.model.Player$Stance[] values()>
<net.sf.freecol.common.model.Player$Stance: void <clinit>()>
<net.sf.freecol.common.model.Player$Stance: void <init>(java.lang.String,int)>
<net.sf.freecol.common.model.Player$UnitIterator$1: void <init>(net.sf.freecol.common.model.Player$UnitIterator)>
<net.sf.freecol.common.model.Player$UnitIterator: void <init>(net.sf.freecol.common.model.Player,net.sf.freecol.common.model.Player,net.sf.freecol.common.model.Player$UnitPredicate)>
<net.sf.freecol.common.model.Player$UnitIterator: void reset()>
<net.sf.freecol.common.model.Player$UnitPredicate: void <init>(net.sf.freecol.common.model.Player)>
<net.sf.freecol.common.model.Player: boolean isUnknownEnemy()>
<net.sf.freecol.common.model.Player: boolean recalculateBellsBonus()>
<net.sf.freecol.common.model.Player: java.lang.String getName()>
<net.sf.freecol.common.model.Player: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.Player: java.util.List getColonies()>
<net.sf.freecol.common.model.Player: java.util.List getHistory()>
<net.sf.freecol.common.model.Player: java.util.List getUnits()>
<net.sf.freecol.common.model.Player: net.sf.freecol.common.model.FeatureContainer getFeatureContainer()>
<net.sf.freecol.common.model.Player: net.sf.freecol.common.model.Nation getNation()>
<net.sf.freecol.common.model.Player: void <clinit>()>
<net.sf.freecol.common.model.Player: void <init>(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.Player: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Player: void addFather(net.sf.freecol.common.model.FoundingFather)>
<net.sf.freecol.common.model.Player: void addModelMessage(net.sf.freecol.common.model.ModelMessage)>
<net.sf.freecol.common.model.Player: void invalidateCanSeeTiles()>
<net.sf.freecol.common.model.Player: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Player: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Player: void readFromXMLPartialImpl(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Player: void removeModelMessages()>
<net.sf.freecol.common.model.Player: void saveSale(net.sf.freecol.common.model.LastSale)>
<net.sf.freecol.common.model.Player: void setNameIndex(java.lang.String,int)>
<net.sf.freecol.common.model.PlayerExploredTile: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.PlayerExploredTile: void <clinit>()>
<net.sf.freecol.common.model.PlayerExploredTile: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.PlayerExploredTile: void <init>(net.sf.freecol.common.model.Game,net.sf.freecol.common.model.Player,net.sf.freecol.common.model.Tile)>
<net.sf.freecol.common.model.PlayerExploredTile: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.PlayerExploredTile: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.PlayerExploredTile: void update(boolean)>
<net.sf.freecol.common.model.ProductionCache: void <init>(net.sf.freecol.common.model.Colony)>
<net.sf.freecol.common.model.ProductionCache: void invalidate()>
<net.sf.freecol.common.model.Region$RegionType: net.sf.freecol.common.model.Region$RegionType[] values()>
<net.sf.freecol.common.model.Region$RegionType: void <clinit>()>
<net.sf.freecol.common.model.Region$RegionType: void <init>(java.lang.String,int)>
<net.sf.freecol.common.model.Region: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.Region: void <init>(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.Region: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Region: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Region: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Resource: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.Resource: void <clinit>()>
<net.sf.freecol.common.model.Resource: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Resource: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.ResourceType: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.Scope: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.Scope: void <init>(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Scope: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Settlement: net.sf.freecol.common.model.FeatureContainer getFeatureContainer()>
<net.sf.freecol.common.model.Settlement: net.sf.freecol.common.model.Player getOwner()>
<net.sf.freecol.common.model.Settlement: net.sf.freecol.common.model.Settlement getSettlement()>
<net.sf.freecol.common.model.Settlement: net.sf.freecol.common.model.SettlementType getType()>
<net.sf.freecol.common.model.Settlement: net.sf.freecol.common.model.UnitLocation$NoAddReason getNoAddReason(net.sf.freecol.common.model.Locatable)>
<net.sf.freecol.common.model.Settlement: void <clinit>()>
<net.sf.freecol.common.model.Settlement: void <init>(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.Settlement: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Settlement: void addTile(net.sf.freecol.common.model.Tile)>
<net.sf.freecol.common.model.Settlement: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Settlement: void removeTile(net.sf.freecol.common.model.Tile)>
<net.sf.freecol.common.model.Settlement: void setName(java.lang.String)>
<net.sf.freecol.common.model.Settlement: void setType(net.sf.freecol.common.model.SettlementType)>
<net.sf.freecol.common.model.SimpleCombatModel: void <clinit>()>
<net.sf.freecol.common.model.SimpleCombatModel: void <init>()>
<net.sf.freecol.common.model.Specification$ModifierReader: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.Specification$ModifierReader: void <init>(net.sf.freecol.common.model.Specification,net.sf.freecol.common.model.Specification$1)>
<net.sf.freecol.common.model.Specification$OptionReader: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.Specification$OptionReader: void <init>(net.sf.freecol.common.model.Specification,net.sf.freecol.common.model.Specification$1)>
<net.sf.freecol.common.model.Specification$TypeReader: void <init>(net.sf.freecol.common.model.Specification,java.lang.Class,java.util.List)>
<net.sf.freecol.common.model.Specification: boolean hasOption(java.lang.String)>
<net.sf.freecol.common.model.Specification: int getInteger(java.lang.String)>
<net.sf.freecol.common.model.Specification: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.Specification: java.lang.String mangle(java.lang.String)>
<net.sf.freecol.common.model.Specification: java.util.List getBuildingTypeList()>
<net.sf.freecol.common.model.Specification: java.util.List getDifficultyLevels()>
<net.sf.freecol.common.model.Specification: java.util.List getFoundingFathers()>
<net.sf.freecol.common.model.Specification: java.util.List getGoodsTypeList()>
<net.sf.freecol.common.model.Specification: java.util.List getModifiers(java.lang.String)>
<net.sf.freecol.common.model.Specification: java.util.List getNations()>
<net.sf.freecol.common.model.Specification: java.util.List getTypesWithAbility(java.lang.Class,java.lang.String[])>
<net.sf.freecol.common.model.Specification: java.util.List getUnitTypesWithAbility(java.lang.String[])>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.model.BuildingType getBuildingType(java.lang.String)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.model.EquipmentType getEquipmentType(java.lang.String)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.model.FoundingFather getFoundingFather(java.lang.String)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.model.FreeColGameObjectType getType(java.lang.String)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.model.FreeColGameObjectType getType(java.lang.String,java.lang.Class)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.model.FreeColGameObjectType getType(javax.xml.stream.XMLStreamReader,java.lang.String,java.lang.Class,net.sf.freecol.common.model.FreeColGameObjectType)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.model.GoodsType getGoodsType(java.lang.String)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.model.GoodsType getPrimaryFoodType()>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.model.Nation getNation(java.lang.String)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.model.NationType getNationType(java.lang.String)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.model.ResourceType getResourceType(java.lang.String)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.model.TileImprovementType getTileImprovementType(java.lang.String)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.model.TileType getTileType(java.lang.String)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.model.UnitType getUnitType(java.lang.String)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.option.AbstractOption getOption(java.lang.String)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.option.BooleanOption getBooleanOption(java.lang.String)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.option.IntegerOption getIntegerOption(java.lang.String)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.option.OptionGroup getDifficultyLevel()>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.option.OptionGroup getDifficultyLevel(java.lang.String)>
<net.sf.freecol.common.model.Specification: net.sf.freecol.common.option.OptionGroup getOptionGroup(java.lang.String)>
<net.sf.freecol.common.model.Specification: void <clinit>()>
<net.sf.freecol.common.model.Specification: void <init>()>
<net.sf.freecol.common.model.Specification: void <init>(java.io.InputStream)>
<net.sf.freecol.common.model.Specification: void addAbstractOption(net.sf.freecol.common.option.AbstractOption)>
<net.sf.freecol.common.model.Specification: void addModifier(net.sf.freecol.common.model.Modifier)>
<net.sf.freecol.common.model.Specification: void addOptionGroup(net.sf.freecol.common.option.OptionGroup,boolean)>
<net.sf.freecol.common.model.Specification: void applyDifficultyLevel(java.lang.String)>
<net.sf.freecol.common.model.Specification: void applyDifficultyLevel(net.sf.freecol.common.option.OptionGroup)>
<net.sf.freecol.common.model.Specification: void clean()>
<net.sf.freecol.common.model.Specification: void fixOptionGroup(net.sf.freecol.common.option.OptionGroup,boolean)>
<net.sf.freecol.common.model.Specification: void load(java.io.InputStream)>
<net.sf.freecol.common.model.Specification: void readFromXML(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.StringTemplate$1: void <clinit>()>
<net.sf.freecol.common.model.StringTemplate$TemplateType: net.sf.freecol.common.model.StringTemplate$TemplateType[] values()>
<net.sf.freecol.common.model.StringTemplate$TemplateType: void <clinit>()>
<net.sf.freecol.common.model.StringTemplate$TemplateType: void <init>(java.lang.String,int)>
<net.sf.freecol.common.model.StringTemplate: java.lang.String getDefaultId()>
<net.sf.freecol.common.model.StringTemplate: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.StringTemplate: java.lang.String toString()>
<net.sf.freecol.common.model.StringTemplate: java.util.List getKeys()>
<net.sf.freecol.common.model.StringTemplate: java.util.List getReplacements()>
<net.sf.freecol.common.model.StringTemplate: net.sf.freecol.common.model.StringTemplate addName(java.lang.String,java.lang.String)>
<net.sf.freecol.common.model.StringTemplate: net.sf.freecol.common.model.StringTemplate getReplacement(java.lang.String)>
<net.sf.freecol.common.model.StringTemplate: net.sf.freecol.common.model.StringTemplate template(java.lang.String)>
<net.sf.freecol.common.model.StringTemplate: net.sf.freecol.common.model.StringTemplate$TemplateType getTemplateType()>
<net.sf.freecol.common.model.StringTemplate: void <init>()>
<net.sf.freecol.common.model.StringTemplate: void <init>(java.lang.String,net.sf.freecol.common.model.StringTemplate$TemplateType)>
<net.sf.freecol.common.model.StringTemplate: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.StringTemplate: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.StringTemplate: void readOldFormat(java.lang.String[])>
<net.sf.freecol.common.model.Tension$Level: int access$000(net.sf.freecol.common.model.Tension$Level)>
<net.sf.freecol.common.model.Tension$Level: void <clinit>()>
<net.sf.freecol.common.model.Tension$Level: void <init>(java.lang.String,int,int)>
<net.sf.freecol.common.model.Tension: void <clinit>()>
<net.sf.freecol.common.model.Tension: void <init>(int)>
<net.sf.freecol.common.model.Tension: void setValue(int)>
<net.sf.freecol.common.model.Tile: boolean add(net.sf.freecol.common.model.Locatable)>
<net.sf.freecol.common.model.Tile: boolean canAdd(net.sf.freecol.common.model.Locatable)>
<net.sf.freecol.common.model.Tile: boolean contains(net.sf.freecol.common.model.Locatable)>
<net.sf.freecol.common.model.Tile: boolean isViewShared()>
<net.sf.freecol.common.model.Tile: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.Tile: net.sf.freecol.common.model.Colony getColony()>
<net.sf.freecol.common.model.Tile: net.sf.freecol.common.model.IndianSettlement getIndianSettlement()>
<net.sf.freecol.common.model.Tile: net.sf.freecol.common.model.Player getOwner()>
<net.sf.freecol.common.model.Tile: net.sf.freecol.common.model.PlayerExploredTile getPlayerExploredTile(net.sf.freecol.common.model.Player)>
<net.sf.freecol.common.model.Tile: net.sf.freecol.common.model.Settlement getOwningSettlement()>
<net.sf.freecol.common.model.Tile: net.sf.freecol.common.model.Settlement getSettlement()>
<net.sf.freecol.common.model.Tile: net.sf.freecol.common.model.TileItemContainer getTileItemContainer()>
<net.sf.freecol.common.model.Tile: net.sf.freecol.common.model.TileType getType()>
<net.sf.freecol.common.model.Tile: void <clinit>()>
<net.sf.freecol.common.model.Tile: void <init>(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.Tile: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Tile: void addTileItem(net.sf.freecol.common.model.TileItem)>
<net.sf.freecol.common.model.Tile: void changeOwningSettlement(net.sf.freecol.common.model.Settlement)>
<net.sf.freecol.common.model.Tile: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Tile: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Tile: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Tile: void setOwningSettlement(net.sf.freecol.common.model.Settlement)>
<net.sf.freecol.common.model.Tile: void updatePlayerExploredTile(net.sf.freecol.common.model.Player,boolean)>
<net.sf.freecol.common.model.Tile: void updatePlayerExploredTiles()>
<net.sf.freecol.common.model.Tile: void updatePlayerExploredTiles(net.sf.freecol.common.model.Player)>
<net.sf.freecol.common.model.TileImprovement: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.TileImprovement: void <clinit>()>
<net.sf.freecol.common.model.TileImprovement: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.TileImprovement: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.TileImprovementStyle: int getConnection(net.sf.freecol.common.model.Map$Direction)>
<net.sf.freecol.common.model.TileImprovementStyle: java.lang.String getString()>
<net.sf.freecol.common.model.TileImprovementStyle: net.sf.freecol.common.model.TileImprovementStyle getInstance(java.lang.String)>
<net.sf.freecol.common.model.TileImprovementStyle: void <clinit>()>
<net.sf.freecol.common.model.TileImprovementStyle: void <init>(java.lang.String)>
<net.sf.freecol.common.model.TileImprovementType: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.TileItem: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.TileItemContainer$1: void <init>(net.sf.freecol.common.model.TileItemContainer)>
<net.sf.freecol.common.model.TileItemContainer: boolean contains(net.sf.freecol.common.model.TileItem)>
<net.sf.freecol.common.model.TileItemContainer: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.TileItemContainer: java.util.List getImprovements()>
<net.sf.freecol.common.model.TileItemContainer: java.util.List getImprovements(boolean)>
<net.sf.freecol.common.model.TileItemContainer: net.sf.freecol.common.model.LostCityRumour getLostCityRumour()>
<net.sf.freecol.common.model.TileItemContainer: net.sf.freecol.common.model.Resource getResource()>
<net.sf.freecol.common.model.TileItemContainer: net.sf.freecol.common.model.TileItem addTileItem(net.sf.freecol.common.model.TileItem)>
<net.sf.freecol.common.model.TileItemContainer: void <clinit>()>
<net.sf.freecol.common.model.TileItemContainer: void <init>(net.sf.freecol.common.model.Game,net.sf.freecol.common.model.Tile)>
<net.sf.freecol.common.model.TileItemContainer: void <init>(net.sf.freecol.common.model.Game,net.sf.freecol.common.model.Tile,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.TileItemContainer: void invalidateCache()>
<net.sf.freecol.common.model.TileItemContainer: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.TileItemContainer: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.TileType: void <clinit>()>
<net.sf.freecol.common.model.TileType: void <init>(java.lang.String,boolean)>
<net.sf.freecol.common.model.TileType: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.TradeRoute$Stop: void <init>(net.sf.freecol.common.model.TradeRoute,net.sf.freecol.common.model.Location)>
<net.sf.freecol.common.model.TradeRoute$Stop: void addCargo(net.sf.freecol.common.model.GoodsType)>
<net.sf.freecol.common.model.TradeRoute: java.lang.String getStopXMLElementTagName()>
<net.sf.freecol.common.model.TradeRoute: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.TradeRoute: net.sf.freecol.common.model.Location findLocation(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.TradeRoute: void <clinit>()>
<net.sf.freecol.common.model.TradeRoute: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.TradeRoute: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.TradeRoute: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.TradeRoute: void setName(java.lang.String)>
<net.sf.freecol.common.model.Turn: int getSeasonYear()>
<net.sf.freecol.common.model.Turn: int getStartingYear()>
<net.sf.freecol.common.model.Turn: void <clinit>()>
<net.sf.freecol.common.model.Turn: void <init>(int)>
<net.sf.freecol.common.model.Turn: void setSeasonYear(int)>
<net.sf.freecol.common.model.Turn: void setStartingYear(int)>
<net.sf.freecol.common.model.TypeCountMap: java.lang.Integer incrementCount(net.sf.freecol.common.model.FreeColGameObjectType,int)>
<net.sf.freecol.common.model.TypeCountMap: java.util.Set keySet()>
<net.sf.freecol.common.model.TypeCountMap: void <init>()>
<net.sf.freecol.common.model.TypeCountMap: void clear()>
<net.sf.freecol.common.model.Unit$1: void <init>()>
<net.sf.freecol.common.model.Unit$4: void <clinit>()>
<net.sf.freecol.common.model.Unit$MoveType: net.sf.freecol.common.model.Unit$MoveType[] values()>
<net.sf.freecol.common.model.Unit$MoveType: void <clinit>()>
<net.sf.freecol.common.model.Unit$MoveType: void <init>(java.lang.String,int,java.lang.String)>
<net.sf.freecol.common.model.Unit$MoveType: void <init>(java.lang.String,int,java.lang.String,boolean)>
<net.sf.freecol.common.model.Unit$Role: boolean isCompatibleWith(net.sf.freecol.common.model.Unit$Role)>
<net.sf.freecol.common.model.Unit$Role: net.sf.freecol.common.model.Unit$Role newRole(net.sf.freecol.common.model.Unit$Role)>
<net.sf.freecol.common.model.Unit$Role: net.sf.freecol.common.model.Unit$Role valueOf(java.lang.String)>
<net.sf.freecol.common.model.Unit$Role: net.sf.freecol.common.model.Unit$Role[] values()>
<net.sf.freecol.common.model.Unit$Role: void <clinit>()>
<net.sf.freecol.common.model.Unit$Role: void <init>(java.lang.String,int)>
<net.sf.freecol.common.model.Unit$UnitState: net.sf.freecol.common.model.Unit$UnitState[] values()>
<net.sf.freecol.common.model.Unit$UnitState: void <clinit>()>
<net.sf.freecol.common.model.Unit$UnitState: void <init>(java.lang.String,int)>
<net.sf.freecol.common.model.Unit: boolean hasAbility(java.lang.String,net.sf.freecol.common.model.FreeColGameObjectType,net.sf.freecol.common.model.Turn)>
<net.sf.freecol.common.model.Unit: boolean isInEurope()>
<net.sf.freecol.common.model.Unit: int getMovesLeft()>
<net.sf.freecol.common.model.Unit: int getWorkLeft()>
<net.sf.freecol.common.model.Unit: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.model.Unit: net.sf.freecol.common.model.Location getLocation()>
<net.sf.freecol.common.model.Unit: net.sf.freecol.common.model.Player getOwner()>
<net.sf.freecol.common.model.Unit: net.sf.freecol.common.model.Settlement getSettlement()>
<net.sf.freecol.common.model.Unit: net.sf.freecol.common.model.Unit$UnitState getState()>
<net.sf.freecol.common.model.Unit: void <clinit>()>
<net.sf.freecol.common.model.Unit: void <init>(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.Unit: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Unit: void clearEquipment()>
<net.sf.freecol.common.model.Unit: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Unit: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Unit: void readFromXMLPartialImpl(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.Unit: void setIndianSettlement(net.sf.freecol.common.model.IndianSettlement)>
<net.sf.freecol.common.model.Unit: void setMovesLeft(int)>
<net.sf.freecol.common.model.Unit: void setName(java.lang.String)>
<net.sf.freecol.common.model.Unit: void setRole()>
<net.sf.freecol.common.model.Unit: void setStateUnchecked(net.sf.freecol.common.model.Unit$UnitState)>
<net.sf.freecol.common.model.Unit: void setWorkImprovement(net.sf.freecol.common.model.TileImprovement)>
<net.sf.freecol.common.model.Unit: void setWorkLeft(int)>
<net.sf.freecol.common.model.UnitLocation$NoAddReason: void <clinit>()>
<net.sf.freecol.common.model.UnitLocation$NoAddReason: void <init>(java.lang.String,int)>
<net.sf.freecol.common.model.UnitLocation: boolean add(net.sf.freecol.common.model.Locatable)>
<net.sf.freecol.common.model.UnitLocation: boolean canAdd(net.sf.freecol.common.model.Locatable)>
<net.sf.freecol.common.model.UnitLocation: boolean contains(net.sf.freecol.common.model.Locatable)>
<net.sf.freecol.common.model.UnitLocation: boolean isEmpty()>
<net.sf.freecol.common.model.UnitLocation: int getSpaceTaken()>
<net.sf.freecol.common.model.UnitLocation: int getUnitCapacity()>
<net.sf.freecol.common.model.UnitLocation: int getUnitCount()>
<net.sf.freecol.common.model.UnitLocation: java.util.List getUnitList()>
<net.sf.freecol.common.model.UnitLocation: net.sf.freecol.common.model.Settlement getSettlement()>
<net.sf.freecol.common.model.UnitLocation: net.sf.freecol.common.model.UnitLocation$NoAddReason getNoAddReason(net.sf.freecol.common.model.Locatable)>
<net.sf.freecol.common.model.UnitLocation: void <clinit>()>
<net.sf.freecol.common.model.UnitLocation: void <init>(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.UnitLocation: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.UnitLocation: void clearUnitList()>
<net.sf.freecol.common.model.UnitLocation: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.UnitLocation: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.UnitType: int getScoreValue()>
<net.sf.freecol.common.model.UnitType: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.model.WorkLocation: net.sf.freecol.common.model.Settlement getSettlement()>
<net.sf.freecol.common.model.WorkLocation: void <init>(net.sf.freecol.common.model.Game,java.lang.String)>
<net.sf.freecol.common.model.WorkLocation: void <init>(net.sf.freecol.common.model.Game,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.model.WorkLocation: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.networking.AbandonColonyMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.AskSkillMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.AssignTeacherMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.AssignTradeRouteMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.AttackMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.BuildColonyMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.BuyGoodsMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.BuyMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.BuyPropositionMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.CashInTreasureTrainMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.ChangeStateMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.ChangeWorkTypeMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.ClaimLandMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.ClearSpecialityMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.CloseTransactionMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.Connection: java.lang.String getName()>
<net.sf.freecol.common.networking.Connection: java.lang.String toString()>
<net.sf.freecol.common.networking.Connection: java.net.Socket createSocket(java.lang.String,int)>
<net.sf.freecol.common.networking.Connection: java.net.Socket getSocket()>
<net.sf.freecol.common.networking.Connection: net.sf.freecol.common.networking.MessageHandler getMessageHandler()>
<net.sf.freecol.common.networking.Connection: org.w3c.dom.Element ask(org.w3c.dom.Element)>
<net.sf.freecol.common.networking.Connection: org.w3c.dom.Element askDumping(org.w3c.dom.Element)>
<net.sf.freecol.common.networking.Connection: void <clinit>()>
<net.sf.freecol.common.networking.Connection: void <init>(java.lang.String)>
<net.sf.freecol.common.networking.Connection: void <init>(java.lang.String,int,net.sf.freecol.common.networking.MessageHandler,java.lang.String)>
<net.sf.freecol.common.networking.Connection: void <init>(java.net.Socket,net.sf.freecol.common.networking.MessageHandler,java.lang.String)>
<net.sf.freecol.common.networking.Connection: void close()>
<net.sf.freecol.common.networking.Connection: void reallyClose()>
<net.sf.freecol.common.networking.Connection: void send(org.w3c.dom.Element)>
<net.sf.freecol.common.networking.Connection: void send(org.w3c.dom.Element,boolean)>
<net.sf.freecol.common.networking.Connection: void sendDumping(org.w3c.dom.Element)>
<net.sf.freecol.common.networking.Connection: void setMessageHandler(net.sf.freecol.common.networking.MessageHandler)>
<net.sf.freecol.common.networking.DOMMessage: java.lang.String elementToString(org.w3c.dom.Element)>
<net.sf.freecol.common.networking.DOMMessage: java.lang.String getFreeColProtocolVersion()>
<net.sf.freecol.common.networking.DOMMessage: org.w3c.dom.Document createNewDocument()>
<net.sf.freecol.common.networking.DOMMessage: org.w3c.dom.Element createMessage(java.lang.String,java.lang.String[])>
<net.sf.freecol.common.networking.DOMMessage: org.w3c.dom.Element createNewRootElement(java.lang.String)>
<net.sf.freecol.common.networking.DOMMessage: void <clinit>()>
<net.sf.freecol.common.networking.DeclareIndependenceMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.DeclineMoundsMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.DeliverGiftMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.DemandTributeMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.DiplomacyMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.DisbandUnitMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.DisembarkMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.EmbarkMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.EmigrateUnitMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.EquipUnitMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.GetNationSummaryMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.GetTransactionMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.GoodsForSaleMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.InciteMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.IndianDemandMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.JoinColonyMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.LearnSkillMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.LoadCargoMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.LootCargoMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.MissionaryMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.MoveMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.MoveToMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.NetworkReplyObject: java.lang.Object getResponse()>
<net.sf.freecol.common.networking.NetworkReplyObject: void <init>(int)>
<net.sf.freecol.common.networking.NewLandNameMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.NewRegionNameMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.NoRouteToServerException: void <init>()>
<net.sf.freecol.common.networking.PayArrearsMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.PayForBuildingMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.PutOutsideColonyMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.ReceivingThread$FreeColNetworkInputStream: void <init>(net.sf.freecol.common.networking.ReceivingThread,java.io.InputStream)>
<net.sf.freecol.common.networking.ReceivingThread: int getNextNetworkReplyId()>
<net.sf.freecol.common.networking.ReceivingThread: net.sf.freecol.common.networking.NetworkReplyObject waitForNetworkReply(int)>
<net.sf.freecol.common.networking.ReceivingThread: void <clinit>()>
<net.sf.freecol.common.networking.ReceivingThread: void <init>(net.sf.freecol.common.networking.Connection,java.io.InputStream,java.lang.String)>
<net.sf.freecol.common.networking.ReceivingThread: void askToStop()>
<net.sf.freecol.common.networking.RenameMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.ScoutIndianSettlementMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.SellGoodsMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.SellMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.SellPropositionMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.ServerAPI: void <clinit>()>
<net.sf.freecol.common.networking.ServerAPI: void <init>()>
<net.sf.freecol.common.networking.SetBuildQueueMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.SetDestinationMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.SetGoodsLevelsMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.SetTradeRoutesMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.SpySettlementMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.TrainUnitInEuropeMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.UnloadCargoMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.UpdateCurrentStopMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.UpdateTradeRouteMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.networking.WorkMessage: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.AbstractOption: boolean isNullValueOK()>
<net.sf.freecol.common.option.AbstractOption: java.lang.String getGroup()>
<net.sf.freecol.common.option.AbstractOption: net.sf.freecol.common.option.AbstractOption readOption(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.option.AbstractOption: void <clinit>()>
<net.sf.freecol.common.option.AbstractOption: void <init>(java.lang.String)>
<net.sf.freecol.common.option.AbstractOption: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.AbstractOption: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.AbstractOption: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.option.AbstractOption: void readFromXML(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.option.AbstractOption: void setGroup(java.lang.String)>
<net.sf.freecol.common.option.AbstractUnitOption: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.AbstractUnitOption: void <clinit>()>
<net.sf.freecol.common.option.AbstractUnitOption: void <init>(java.lang.String)>
<net.sf.freecol.common.option.AbstractUnitOption: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.AbstractUnitOption: void readFromXML(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.option.AbstractUnitOption: void setValue(net.sf.freecol.common.model.AbstractUnit)>
<net.sf.freecol.common.option.AudioMixerOption$1: void <init>()>
<net.sf.freecol.common.option.AudioMixerOption$MixerWrapper: boolean equals(java.lang.Object)>
<net.sf.freecol.common.option.AudioMixerOption$MixerWrapper: java.lang.String getKey()>
<net.sf.freecol.common.option.AudioMixerOption$MixerWrapper: void <init>(java.lang.String,javax.sound.sampled.Mixer$Info)>
<net.sf.freecol.common.option.AudioMixerOption: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.AudioMixerOption: javax.sound.sampled.Mixer tryGetDefaultMixer()>
<net.sf.freecol.common.option.AudioMixerOption: void <clinit>()>
<net.sf.freecol.common.option.AudioMixerOption: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.AudioMixerOption: void findAudioMixers()>
<net.sf.freecol.common.option.AudioMixerOption: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.option.AudioMixerOption: void setValue(java.lang.String,java.lang.String)>
<net.sf.freecol.common.option.AudioMixerOption: void setValue(net.sf.freecol.common.option.AudioMixerOption$MixerWrapper)>
<net.sf.freecol.common.option.BooleanOption: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.BooleanOption: void <clinit>()>
<net.sf.freecol.common.option.BooleanOption: void <init>(java.lang.String)>
<net.sf.freecol.common.option.BooleanOption: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.BooleanOption: void setValue(java.lang.Boolean)>
<net.sf.freecol.common.option.BooleanOption: void setValue(java.lang.String,java.lang.String)>
<net.sf.freecol.common.option.FileOption: boolean isNullValueOK()>
<net.sf.freecol.common.option.FileOption: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.FileOption: void <clinit>()>
<net.sf.freecol.common.option.FileOption: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.FileOption: void setValue(java.lang.String,java.lang.String)>
<net.sf.freecol.common.option.IntegerOption: java.lang.Integer getValue()>
<net.sf.freecol.common.option.IntegerOption: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.IntegerOption: void <clinit>()>
<net.sf.freecol.common.option.IntegerOption: void <init>(java.lang.String)>
<net.sf.freecol.common.option.IntegerOption: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.IntegerOption: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.IntegerOption: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.option.IntegerOption: void setMaximumValue(int)>
<net.sf.freecol.common.option.IntegerOption: void setMinimumValue(int)>
<net.sf.freecol.common.option.IntegerOption: void setValue(java.lang.Integer)>
<net.sf.freecol.common.option.IntegerOption: void setValue(java.lang.String,java.lang.String)>
<net.sf.freecol.common.option.LanguageOption$1: void <init>()>
<net.sf.freecol.common.option.LanguageOption$Language: void <init>(java.lang.String,java.util.Locale)>
<net.sf.freecol.common.option.LanguageOption: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.LanguageOption: java.util.Locale getLocale(java.lang.String)>
<net.sf.freecol.common.option.LanguageOption: void <clinit>()>
<net.sf.freecol.common.option.LanguageOption: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.LanguageOption: void findLanguages()>
<net.sf.freecol.common.option.LanguageOption: void setValue(java.lang.String,java.lang.String)>
<net.sf.freecol.common.option.LanguageOption: void setValue(net.sf.freecol.common.option.LanguageOption$Language)>
<net.sf.freecol.common.option.ListOption: java.util.List getValue()>
<net.sf.freecol.common.option.ListOption: void <clinit>()>
<net.sf.freecol.common.option.ListOption: void <init>(java.lang.String)>
<net.sf.freecol.common.option.ListOption: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.ListOption: void readFromXML(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.option.MapGeneratorOptions: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.ModListOption: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.ModListOption: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.ModOption: boolean isNullValueOK()>
<net.sf.freecol.common.option.ModOption: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.ModOption: void <clinit>()>
<net.sf.freecol.common.option.ModOption: void <init>(java.lang.String)>
<net.sf.freecol.common.option.ModOption: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.ModOption: void setValue(java.lang.String,java.lang.String)>
<net.sf.freecol.common.option.ModOption: void setValue(net.sf.freecol.common.io.FreeColModFile)>
<net.sf.freecol.common.option.OptionGroup: boolean getBoolean(java.lang.String)>
<net.sf.freecol.common.option.OptionGroup: boolean isEditable()>
<net.sf.freecol.common.option.OptionGroup: int getInteger(java.lang.String)>
<net.sf.freecol.common.option.OptionGroup: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.OptionGroup: java.util.Iterator iterator()>
<net.sf.freecol.common.option.OptionGroup: java.util.List getOptions()>
<net.sf.freecol.common.option.OptionGroup: net.sf.freecol.common.option.Option getOption(java.lang.String)>
<net.sf.freecol.common.option.OptionGroup: void <clinit>()>
<net.sf.freecol.common.option.OptionGroup: void <init>(java.lang.String)>
<net.sf.freecol.common.option.OptionGroup: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.OptionGroup: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.OptionGroup: void add(net.sf.freecol.common.option.Option)>
<net.sf.freecol.common.option.OptionGroup: void addOptionGroup(net.sf.freecol.common.option.OptionGroup)>
<net.sf.freecol.common.option.OptionGroup: void readFromXML(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.option.OptionGroup: void setEditable(boolean)>
<net.sf.freecol.common.option.PercentageOption: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.PercentageOption: void <clinit>()>
<net.sf.freecol.common.option.PercentageOption: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.PercentageOption: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.option.RangeOption: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.RangeOption: java.lang.String getXMLItemElementTagName()>
<net.sf.freecol.common.option.RangeOption: void <clinit>()>
<net.sf.freecol.common.option.RangeOption: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.SelectOption: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.SelectOption: java.lang.String getXMLItemElementTagName()>
<net.sf.freecol.common.option.SelectOption: void <clinit>()>
<net.sf.freecol.common.option.SelectOption: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.SelectOption: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.option.SelectOption: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.option.StringOption: java.lang.String getValue()>
<net.sf.freecol.common.option.StringOption: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.StringOption: void <clinit>()>
<net.sf.freecol.common.option.StringOption: void <init>(java.lang.String)>
<net.sf.freecol.common.option.StringOption: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.StringOption: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.StringOption: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.option.StringOption: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.option.StringOption: void readFromXML(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.option.StringOption: void setValue(java.lang.String)>
<net.sf.freecol.common.option.StringOption: void setValue(java.lang.String,java.lang.String)>
<net.sf.freecol.common.option.UnitListOption: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.UnitListOption: void <init>(java.lang.String)>
<net.sf.freecol.common.option.UnitListOption: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.UnitTypeOption$TypeSelector: net.sf.freecol.common.option.UnitTypeOption$TypeSelector valueOf(java.lang.String)>
<net.sf.freecol.common.option.UnitTypeOption$TypeSelector: void <clinit>()>
<net.sf.freecol.common.option.UnitTypeOption$TypeSelector: void <init>(java.lang.String,int)>
<net.sf.freecol.common.option.UnitTypeOption: boolean isNullValueOK()>
<net.sf.freecol.common.option.UnitTypeOption: java.lang.String getXMLElementTagName()>
<net.sf.freecol.common.option.UnitTypeOption: net.sf.freecol.common.model.UnitType getValue()>
<net.sf.freecol.common.option.UnitTypeOption: void <clinit>()>
<net.sf.freecol.common.option.UnitTypeOption: void <init>(java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.UnitTypeOption: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.common.option.UnitTypeOption: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.option.UnitTypeOption: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.common.option.UnitTypeOption: void setValue(java.lang.String,java.lang.String)>
<net.sf.freecol.common.option.UnitTypeOption: void setValue(net.sf.freecol.common.model.UnitType)>
<net.sf.freecol.common.resources.AudioResource: void <clinit>()>
<net.sf.freecol.common.resources.AudioResource: void <init>(java.net.URI)>
<net.sf.freecol.common.resources.ColorResource: boolean isHexString(java.lang.String)>
<net.sf.freecol.common.resources.ColorResource: java.awt.Color getColor(java.lang.String)>
<net.sf.freecol.common.resources.ColorResource: void <clinit>()>
<net.sf.freecol.common.resources.ColorResource: void <init>(java.net.URI)>
<net.sf.freecol.common.resources.FAFile$CREatingInputStream: void <init>(java.io.InputStream)>
<net.sf.freecol.common.resources.FAFile$FALetter: void <init>()>
<net.sf.freecol.common.resources.FAFile$FALetter: void <init>(net.sf.freecol.common.resources.FAFile$1)>
<net.sf.freecol.common.resources.FAFile$FAName: void <init>()>
<net.sf.freecol.common.resources.FAFile$FAName: void <init>(net.sf.freecol.common.resources.FAFile$1)>
<net.sf.freecol.common.resources.FAFile: void <init>(java.io.InputStream)>
<net.sf.freecol.common.resources.FAFile: void load(java.io.InputStream)>
<net.sf.freecol.common.resources.FAFileResource: void <init>(java.net.URI)>
<net.sf.freecol.common.resources.FontResource: java.awt.Font getEmergencyFont()>
<net.sf.freecol.common.resources.FontResource: void <clinit>()>
<net.sf.freecol.common.resources.FontResource: void <init>(java.net.URI)>
<net.sf.freecol.common.resources.ImageResource$1: void <init>()>
<net.sf.freecol.common.resources.ImageResource: void <clinit>()>
<net.sf.freecol.common.resources.ImageResource: void <init>(java.net.URI)>
<net.sf.freecol.common.resources.Resource: void <init>(java.net.URI)>
<net.sf.freecol.common.resources.ResourceFactory: net.sf.freecol.common.resources.Resource createResource(java.net.URI)>
<net.sf.freecol.common.resources.ResourceFactory: net.sf.freecol.common.resources.Resource getResource(java.net.URI)>
<net.sf.freecol.common.resources.ResourceFactory: void <clinit>()>
<net.sf.freecol.common.resources.ResourceManager$1: void <init>(java.lang.String)>
<net.sf.freecol.common.resources.ResourceManager: java.awt.Font getFont(java.lang.String)>
<net.sf.freecol.common.resources.ResourceManager: java.awt.Image getImage(java.lang.String)>
<net.sf.freecol.common.resources.ResourceManager: java.lang.Object getResource(java.lang.String,java.lang.Class)>
<net.sf.freecol.common.resources.ResourceManager: void <clinit>()>
<net.sf.freecol.common.resources.ResourceManager: void createMergedContainer()>
<net.sf.freecol.common.resources.ResourceManager: void preload(java.awt.Dimension)>
<net.sf.freecol.common.resources.ResourceManager: void setBaseMapping(net.sf.freecol.common.resources.ResourceMapping)>
<net.sf.freecol.common.resources.ResourceManager: void setModMappings(java.util.List)>
<net.sf.freecol.common.resources.ResourceManager: void setTcMapping(net.sf.freecol.common.resources.ResourceMapping)>
<net.sf.freecol.common.resources.ResourceManager: void startBackgroundPreloading()>
<net.sf.freecol.common.resources.ResourceManager: void updateIfDirty()>
<net.sf.freecol.common.resources.ResourceMapping: java.util.Map getResources()>
<net.sf.freecol.common.resources.ResourceMapping: net.sf.freecol.common.resources.Resource get(java.lang.String)>
<net.sf.freecol.common.resources.ResourceMapping: void <init>()>
<net.sf.freecol.common.resources.ResourceMapping: void add(java.lang.String,net.sf.freecol.common.resources.Resource)>
<net.sf.freecol.common.resources.ResourceMapping: void addAll(net.sf.freecol.common.resources.ResourceMapping)>
<net.sf.freecol.common.resources.SZAResource: void <clinit>()>
<net.sf.freecol.common.resources.SZAResource: void <init>(java.net.URI)>
<net.sf.freecol.common.resources.Video: void <init>(java.net.URL)>
<net.sf.freecol.common.resources.VideoResource: void <clinit>()>
<net.sf.freecol.common.resources.VideoResource: void <init>(java.net.URI)>
<net.sf.freecol.common.util.Introspector: java.lang.Class getMethodReturnType(java.lang.reflect.Method)>
<net.sf.freecol.common.util.Introspector: java.lang.reflect.Method getFromStringConverter(java.lang.Class)>
<net.sf.freecol.common.util.Introspector: java.lang.reflect.Method getGetMethod()>
<net.sf.freecol.common.util.Introspector: java.lang.reflect.Method getSetMethod(java.lang.Class)>
<net.sf.freecol.common.util.Introspector: void <init>(java.lang.Class,java.lang.String)>
<net.sf.freecol.common.util.Introspector: void setter(java.lang.Object,java.lang.String)>
<net.sf.freecol.common.util.Utils: int randomInt(java.util.logging.Logger,java.lang.String,java.util.Random,int)>
<net.sf.freecol.common.util.Utils: java.lang.String join(java.lang.String,java.lang.String[])>
<net.sf.freecol.common.util.Utils: java.lang.String join(java.lang.String,java.util.List)>
<net.sf.freecol.common.util.Utils: java.util.Random restoreRandomState(java.lang.String)>
<net.sf.freecol.common.util.Utils: void <clinit>()>
<net.sf.freecol.common.util.XMLStream: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream)>
<net.sf.freecol.common.util.XMLStream: javax.xml.stream.XMLStreamReader getXMLStreamReader()>
<net.sf.freecol.common.util.XMLStream: void <clinit>()>
<net.sf.freecol.common.util.XMLStream: void <init>(java.io.InputStream)>
<net.sf.freecol.common.util.XMLStream: void close()>
<net.sf.freecol.server.FreeColServer$1: void <init>()>
<net.sf.freecol.server.FreeColServer$2: void <init>(net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.FreeColServer$GameState: void <clinit>()>
<net.sf.freecol.server.FreeColServer$GameState: void <init>(java.lang.String,int)>
<net.sf.freecol.server.FreeColServer: boolean getIntegrity()>
<net.sf.freecol.server.FreeColServer: int getNumberOfLivingHumanPlayers()>
<net.sf.freecol.server.FreeColServer: int getSavegameVersion(net.sf.freecol.common.io.FreeColSavegameFile)>
<net.sf.freecol.server.FreeColServer: int getSlotsAvailable()>
<net.sf.freecol.server.FreeColServer: java.util.Random getServerRandom()>
<net.sf.freecol.server.FreeColServer: net.sf.freecol.common.model.Specification getSpecification()>
<net.sf.freecol.server.FreeColServer: net.sf.freecol.common.util.XMLStream createXMLStreamReader(net.sf.freecol.common.io.FreeColSavegameFile)>
<net.sf.freecol.server.FreeColServer: net.sf.freecol.server.FreeColServer$GameState getGameState()>
<net.sf.freecol.server.FreeColServer: net.sf.freecol.server.ai.AIMain getAIMain()>
<net.sf.freecol.server.FreeColServer: net.sf.freecol.server.control.InGameInputHandler getInGameInputHandler()>
<net.sf.freecol.server.FreeColServer: net.sf.freecol.server.model.ServerGame getGame()>
<net.sf.freecol.server.FreeColServer: net.sf.freecol.server.model.ServerGame loadGame(net.sf.freecol.common.io.FreeColSavegameFile,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.server.FreeColServer: net.sf.freecol.server.model.ServerGame readGame(net.sf.freecol.common.io.FreeColSavegameFile,net.sf.freecol.common.model.Specification,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.FreeColServer: net.sf.freecol.server.networking.Server getServer()>
<net.sf.freecol.server.FreeColServer: net.sf.freecol.server.networking.Server serverStart(int)>
<net.sf.freecol.server.FreeColServer: void <clinit>()>
<net.sf.freecol.server.FreeColServer: void <init>(net.sf.freecol.common.io.FreeColSavegameFile,int,java.lang.String)>
<net.sf.freecol.server.FreeColServer: void <init>(net.sf.freecol.common.io.FreeColSavegameFile,int,java.lang.String,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.server.FreeColServer: void <init>(net.sf.freecol.common.model.Specification,boolean,boolean,int,java.lang.String)>
<net.sf.freecol.server.FreeColServer: void <init>(net.sf.freecol.common.model.Specification,boolean,boolean,int,java.lang.String,net.sf.freecol.common.model.NationOptions$Advantages)>
<net.sf.freecol.server.FreeColServer: void addBooleanOption(java.lang.String,java.lang.String,boolean,boolean)>
<net.sf.freecol.server.FreeColServer: void addIntegerOption(java.lang.String,java.lang.String,int,boolean)>
<net.sf.freecol.server.FreeColServer: void addOption(net.sf.freecol.common.option.AbstractOption,boolean)>
<net.sf.freecol.server.FreeColServer: void addOptionGroup(java.lang.String,boolean)>
<net.sf.freecol.server.FreeColServer: void addStringOption(java.lang.String,java.lang.String,java.lang.String,boolean)>
<net.sf.freecol.server.FreeColServer: void fixGameOptions()>
<net.sf.freecol.server.FreeColServer: void removeFromMetaServer()>
<net.sf.freecol.server.FreeColServer: void setAIMain(net.sf.freecol.server.ai.AIMain)>
<net.sf.freecol.server.FreeColServer: void setActiveUnit(net.sf.freecol.common.model.Unit)>
<net.sf.freecol.server.FreeColServer: void setGame(net.sf.freecol.server.model.ServerGame)>
<net.sf.freecol.server.FreeColServer: void setOwner(java.lang.String)>
<net.sf.freecol.server.FreeColServer: void setPublicServer(boolean)>
<net.sf.freecol.server.FreeColServer: void setServerRandom(java.util.Random)>
<net.sf.freecol.server.FreeColServer: void setSinglePlayer(boolean)>
<net.sf.freecol.server.FreeColServer: void startMetaServerUpdateThread()>
<net.sf.freecol.server.FreeColServer: void updateMetaServer(boolean)>
<net.sf.freecol.server.FreeColServer: void v11FixServerObjects(java.util.List,net.sf.freecol.common.io.FreeColSavegameFile)>
<net.sf.freecol.server.ai.AIColony$1: void <init>()>
<net.sf.freecol.server.ai.AIColony: java.lang.String getId()>
<net.sf.freecol.server.ai.AIColony: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.AIColony: net.sf.freecol.common.model.Colony getColony()>
<net.sf.freecol.server.ai.AIColony: void <clinit>()>
<net.sf.freecol.server.ai.AIColony: void <init>(net.sf.freecol.server.ai.AIMain,java.lang.String)>
<net.sf.freecol.server.ai.AIColony: void <init>(net.sf.freecol.server.ai.AIMain,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.AIColony: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.common.model.Colony)>
<net.sf.freecol.server.ai.AIColony: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.AIColony: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.AIGoods: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.AIGoods: net.sf.freecol.common.model.Goods getGoods()>
<net.sf.freecol.server.ai.AIGoods: void <clinit>()>
<net.sf.freecol.server.ai.AIGoods: void <init>(net.sf.freecol.server.ai.AIMain,java.lang.String)>
<net.sf.freecol.server.ai.AIGoods: void <init>(net.sf.freecol.server.ai.AIMain,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.AIGoods: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.AIGoods: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.AIInGameInputHandler: void <clinit>()>
<net.sf.freecol.server.ai.AIInGameInputHandler: void <init>(net.sf.freecol.server.FreeColServer,net.sf.freecol.server.model.ServerPlayer,net.sf.freecol.server.ai.AIMain)>
<net.sf.freecol.server.ai.AIMain: boolean checkIntegrity()>
<net.sf.freecol.server.ai.AIMain: boolean fixIntegrity()>
<net.sf.freecol.server.ai.AIMain: int getRandomSeed(java.lang.String)>
<net.sf.freecol.server.ai.AIMain: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.AIMain: net.sf.freecol.common.model.Game getGame()>
<net.sf.freecol.server.ai.AIMain: net.sf.freecol.server.ai.AIColony getAIColony(net.sf.freecol.common.model.Colony)>
<net.sf.freecol.server.ai.AIMain: net.sf.freecol.server.ai.AIObject getAIObject(java.lang.String)>
<net.sf.freecol.server.ai.AIMain: net.sf.freecol.server.ai.AIObject getAIObject(net.sf.freecol.common.model.FreeColGameObject)>
<net.sf.freecol.server.ai.AIMain: void <clinit>()>
<net.sf.freecol.server.ai.AIMain: void <init>(net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.ai.AIMain: void <init>(net.sf.freecol.server.FreeColServer,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.AIMain: void addAIObject(java.lang.String,net.sf.freecol.server.ai.AIObject)>
<net.sf.freecol.server.ai.AIMain: void findNewObjects()>
<net.sf.freecol.server.ai.AIMain: void findNewObjects(boolean)>
<net.sf.freecol.server.ai.AIMain: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.AIMain: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.AIMain: void removeAIObject(java.lang.String)>
<net.sf.freecol.server.ai.AIMain: void removeFreeColGameObject(java.lang.String)>
<net.sf.freecol.server.ai.AIMain: void setFreeColGameObject(java.lang.String,net.sf.freecol.common.model.FreeColGameObject)>
<net.sf.freecol.server.ai.AIObject: net.sf.freecol.common.model.Game getGame()>
<net.sf.freecol.server.ai.AIObject: net.sf.freecol.common.model.Specification getSpecification()>
<net.sf.freecol.server.ai.AIObject: net.sf.freecol.server.ai.AIMain getAIMain()>
<net.sf.freecol.server.ai.AIObject: void <clinit>()>
<net.sf.freecol.server.ai.AIObject: void <init>(net.sf.freecol.server.ai.AIMain)>
<net.sf.freecol.server.ai.AIObject: void <init>(net.sf.freecol.server.ai.AIMain,java.lang.String)>
<net.sf.freecol.server.ai.AIObject: void <init>(net.sf.freecol.server.ai.AIMain,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.AIObject: void addAIObjectWithId()>
<net.sf.freecol.server.ai.AIObject: void readFromXML(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.AIPlayer: java.lang.String getId()>
<net.sf.freecol.server.ai.AIPlayer: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.AIPlayer: net.sf.freecol.common.model.Player getPlayer()>
<net.sf.freecol.server.ai.AIPlayer: void <clinit>()>
<net.sf.freecol.server.ai.AIPlayer: void <init>(net.sf.freecol.server.ai.AIMain,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.AIPlayer: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.model.ServerPlayer)>
<net.sf.freecol.server.ai.AIPlayer: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.AIPlayer: void setPlayer(net.sf.freecol.server.model.ServerPlayer)>
<net.sf.freecol.server.ai.AIUnit: java.lang.String getId()>
<net.sf.freecol.server.ai.AIUnit: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.AIUnit: net.sf.freecol.common.model.Unit getUnit()>
<net.sf.freecol.server.ai.AIUnit: void <clinit>()>
<net.sf.freecol.server.ai.AIUnit: void <init>(net.sf.freecol.server.ai.AIMain,java.lang.String)>
<net.sf.freecol.server.ai.AIUnit: void <init>(net.sf.freecol.server.ai.AIMain,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.AIUnit: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.common.model.Unit)>
<net.sf.freecol.server.ai.AIUnit: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.AIUnit: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.ColonyPlan$1: void <init>()>
<net.sf.freecol.server.ai.ColonyPlan$ProfileType: net.sf.freecol.server.ai.ColonyPlan$ProfileType getProfileTypeFromSize(int)>
<net.sf.freecol.server.ai.ColonyPlan$ProfileType: void <clinit>()>
<net.sf.freecol.server.ai.ColonyPlan$ProfileType: void <init>(java.lang.String,int)>
<net.sf.freecol.server.ai.ColonyPlan: void <clinit>()>
<net.sf.freecol.server.ai.ColonyPlan: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.common.model.Colony)>
<net.sf.freecol.server.ai.EuropeanAIPlayer$1: void <init>()>
<net.sf.freecol.server.ai.EuropeanAIPlayer$2: void <init>()>
<net.sf.freecol.server.ai.EuropeanAIPlayer$3: void <init>()>
<net.sf.freecol.server.ai.EuropeanAIPlayer: void <clinit>()>
<net.sf.freecol.server.ai.EuropeanAIPlayer: void <init>(net.sf.freecol.server.ai.AIMain,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.EuropeanAIPlayer: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.model.ServerPlayer)>
<net.sf.freecol.server.ai.GoodsWish: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.GoodsWish: void <clinit>()>
<net.sf.freecol.server.ai.GoodsWish: void <init>(net.sf.freecol.server.ai.AIMain,java.lang.String)>
<net.sf.freecol.server.ai.GoodsWish: void <init>(net.sf.freecol.server.ai.AIMain,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.GoodsWish: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.NativeAIPlayer: void <clinit>()>
<net.sf.freecol.server.ai.NativeAIPlayer: void <init>(net.sf.freecol.server.ai.AIMain,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.NativeAIPlayer: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.model.ServerPlayer)>
<net.sf.freecol.server.ai.REFAIPlayer: void <clinit>()>
<net.sf.freecol.server.ai.REFAIPlayer: void <init>(net.sf.freecol.server.ai.AIMain,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.REFAIPlayer: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.model.ServerPlayer)>
<net.sf.freecol.server.ai.TileImprovementPlan: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.TileImprovementPlan: net.sf.freecol.common.model.Tile getTarget()>
<net.sf.freecol.server.ai.TileImprovementPlan: net.sf.freecol.common.model.TileImprovementType getType()>
<net.sf.freecol.server.ai.TileImprovementPlan: void <clinit>()>
<net.sf.freecol.server.ai.TileImprovementPlan: void <init>(net.sf.freecol.server.ai.AIMain,java.lang.String)>
<net.sf.freecol.server.ai.TileImprovementPlan: void <init>(net.sf.freecol.server.ai.AIMain,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.TileImprovementPlan: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.ValuedAIObject: void <init>(net.sf.freecol.server.ai.AIMain,java.lang.String)>
<net.sf.freecol.server.ai.ValuedAIObject: void <init>(net.sf.freecol.server.ai.AIMain,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.ValuedAIObject: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.ValuedAIObject: void setValue(int)>
<net.sf.freecol.server.ai.Wish: net.sf.freecol.server.ai.AIColony getDestinationAIColony()>
<net.sf.freecol.server.ai.Wish: void <clinit>()>
<net.sf.freecol.server.ai.Wish: void <init>(net.sf.freecol.server.ai.AIMain,java.lang.String)>
<net.sf.freecol.server.ai.Wish: void <init>(net.sf.freecol.server.ai.AIMain,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.Wish: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.WorkerWish: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.WorkerWish: void <clinit>()>
<net.sf.freecol.server.ai.WorkerWish: void <init>(net.sf.freecol.server.ai.AIMain,java.lang.String)>
<net.sf.freecol.server.ai.WorkerWish: void <init>(net.sf.freecol.server.ai.AIMain,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.WorkerWish: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.BuildColonyMission: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.mission.BuildColonyMission: void <clinit>()>
<net.sf.freecol.server.ai.mission.BuildColonyMission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.BuildColonyMission: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.CashInTreasureTrainMission: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.mission.CashInTreasureTrainMission: void <clinit>()>
<net.sf.freecol.server.ai.mission.CashInTreasureTrainMission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.CashInTreasureTrainMission: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.DefendSettlementMission: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.mission.DefendSettlementMission: void <clinit>()>
<net.sf.freecol.server.ai.mission.DefendSettlementMission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.DefendSettlementMission: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.IdleAtSettlementMission: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.mission.IdleAtSettlementMission: void <clinit>()>
<net.sf.freecol.server.ai.mission.IdleAtSettlementMission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.IndianBringGiftMission: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.mission.IndianBringGiftMission: void <clinit>()>
<net.sf.freecol.server.ai.mission.IndianBringGiftMission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.IndianBringGiftMission: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.IndianDemandMission: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.mission.IndianDemandMission: void <clinit>()>
<net.sf.freecol.server.ai.mission.IndianDemandMission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.IndianDemandMission: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.Mission: net.sf.freecol.common.model.Unit getUnit()>
<net.sf.freecol.server.ai.mission.Mission: net.sf.freecol.server.ai.AIUnit getAIUnit()>
<net.sf.freecol.server.ai.mission.Mission: void <clinit>()>
<net.sf.freecol.server.ai.mission.Mission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit)>
<net.sf.freecol.server.ai.mission.Mission: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.MissionaryMission: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.mission.MissionaryMission: void <clinit>()>
<net.sf.freecol.server.ai.mission.MissionaryMission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.MissionaryMission: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.PioneeringMission: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.mission.PioneeringMission: void <clinit>()>
<net.sf.freecol.server.ai.mission.PioneeringMission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.PioneeringMission: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.PrivateerMission: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.mission.PrivateerMission: void <clinit>()>
<net.sf.freecol.server.ai.mission.PrivateerMission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.PrivateerMission: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.ScoutingMission: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.mission.ScoutingMission: void <clinit>()>
<net.sf.freecol.server.ai.mission.ScoutingMission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.ScoutingMission: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.TransportMission$Cargo: net.sf.freecol.server.ai.Transportable getTransportable()>
<net.sf.freecol.server.ai.mission.TransportMission$Cargo: void <init>(net.sf.freecol.server.ai.mission.TransportMission,net.sf.freecol.server.ai.Transportable,net.sf.freecol.common.model.Unit,net.sf.freecol.server.ai.mission.TransportMission$CargoMode,net.sf.freecol.common.model.Location,int,int,int)>
<net.sf.freecol.server.ai.mission.TransportMission$CargoMode: void <clinit>()>
<net.sf.freecol.server.ai.mission.TransportMission$CargoMode: void <init>(java.lang.String,int)>
<net.sf.freecol.server.ai.mission.TransportMission: boolean tAdd(net.sf.freecol.server.ai.mission.TransportMission$Cargo,int)>
<net.sf.freecol.server.ai.mission.TransportMission: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.mission.TransportMission: java.util.List tClear()>
<net.sf.freecol.server.ai.mission.TransportMission: net.sf.freecol.server.ai.mission.TransportMission$Cargo tFind(net.sf.freecol.server.ai.Transportable)>
<net.sf.freecol.server.ai.mission.TransportMission: void <clinit>()>
<net.sf.freecol.server.ai.mission.TransportMission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.TransportMission: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.TransportMission: void readChild(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.TransportMission: void readChildren(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.TransportMission: void tSpace()>
<net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission: void <clinit>()>
<net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.UnitWanderHostileMission: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.mission.UnitWanderHostileMission: void <clinit>()>
<net.sf.freecol.server.ai.mission.UnitWanderHostileMission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.UnitWanderMission: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.mission.UnitWanderMission: void <clinit>()>
<net.sf.freecol.server.ai.mission.UnitWanderMission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.WishRealizationMission: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.mission.WishRealizationMission: void <clinit>()>
<net.sf.freecol.server.ai.mission.WishRealizationMission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.WishRealizationMission: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.WorkInsideColonyMission: java.lang.String getXMLElementTagName()>
<net.sf.freecol.server.ai.mission.WorkInsideColonyMission: void <clinit>()>
<net.sf.freecol.server.ai.mission.WorkInsideColonyMission: void <init>(net.sf.freecol.server.ai.AIMain,net.sf.freecol.server.ai.AIUnit,javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.ai.mission.WorkInsideColonyMission: void readAttributes(javax.xml.stream.XMLStreamReader)>
<net.sf.freecol.server.control.Controller: void <clinit>()>
<net.sf.freecol.server.control.Controller: void <init>(net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.FreeColServerHolder: void <init>(net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameController: void <clinit>()>
<net.sf.freecol.server.control.InGameController: void <init>(net.sf.freecol.server.FreeColServer,java.util.Random)>
<net.sf.freecol.server.control.InGameInputHandler$10: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$11: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$12: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$13: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$14: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$15: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$16: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$17: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$18: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$19: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$1: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$20: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$21: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$22: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$23: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$24: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$25: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$26: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$27: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$28: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$29: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$2: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$30: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$31: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$32: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$33: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$34: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$35: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$36: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$37: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$38: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$39: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$3: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$40: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$41: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$42: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$43: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$44: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$45: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$46: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$47: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$48: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$49: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$4: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$50: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$51: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$52: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$53: void <init>(net.sf.freecol.server.control.InGameInputHandler)>
<net.sf.freecol.server.control.InGameInputHandler$54: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$55: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$56: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$57: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$58: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$59: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$5: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$60: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$61: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$62: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$63: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$64: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$65: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$66: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$67: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$68: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$6: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$7: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$8: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler$9: void <init>(net.sf.freecol.server.control.InGameInputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InGameInputHandler: void <clinit>()>
<net.sf.freecol.server.control.InGameInputHandler: void <init>(net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InputHandler$1: void <init>(net.sf.freecol.server.control.InputHandler)>
<net.sf.freecol.server.control.InputHandler$2: void <init>(net.sf.freecol.server.control.InputHandler,net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InputHandler$CurrentPlayerNetworkRequestHandler: void <init>(net.sf.freecol.server.control.InputHandler)>
<net.sf.freecol.server.control.InputHandler$DisconnectHandler: void <init>(net.sf.freecol.server.control.InputHandler)>
<net.sf.freecol.server.control.InputHandler$DisconnectHandler: void <init>(net.sf.freecol.server.control.InputHandler,net.sf.freecol.server.control.InputHandler$1)>
<net.sf.freecol.server.control.InputHandler: void <clinit>()>
<net.sf.freecol.server.control.InputHandler: void <init>(net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.InputHandler: void register(java.lang.String,net.sf.freecol.server.control.InputHandler$NetworkRequestHandler)>
<net.sf.freecol.server.control.PreGameController: void <clinit>()>
<net.sf.freecol.server.control.PreGameController: void <init>(net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.PreGameInputHandler$1: void <init>(net.sf.freecol.server.control.PreGameInputHandler)>
<net.sf.freecol.server.control.PreGameInputHandler$2: void <init>(net.sf.freecol.server.control.PreGameInputHandler)>
<net.sf.freecol.server.control.PreGameInputHandler$3: void <init>(net.sf.freecol.server.control.PreGameInputHandler)>
<net.sf.freecol.server.control.PreGameInputHandler$4: void <init>(net.sf.freecol.server.control.PreGameInputHandler)>
<net.sf.freecol.server.control.PreGameInputHandler$5: void <init>(net.sf.freecol.server.control.PreGameInputHandler)>
<net.sf.freecol.server.control.PreGameInputHandler$6: void <init>(net.sf.freecol.server.control.PreGameInputHandler)>
<net.sf.freecol.server.control.PreGameInputHandler$7: void <init>(net.sf.freecol.server.control.PreGameInputHandler)>
<net.sf.freecol.server.control.PreGameInputHandler: void <clinit>()>
<net.sf.freecol.server.control.PreGameInputHandler: void <init>(net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.control.UserConnectionHandler: void <clinit>()>
<net.sf.freecol.server.control.UserConnectionHandler: void <init>(net.sf.freecol.server.FreeColServer)>
<net.sf.freecol.server.generator.LandGenerator: void <clinit>()>
<net.sf.freecol.server.generator.LandGenerator: void <init>(net.sf.freecol.common.option.OptionGroup,java.util.Random)>
<net.sf.freecol.server.generator.SimpleMapGenerator: void <clinit>()>
<net.sf.freecol.server.generator.SimpleMapGenerator: void <init>(java.util.Random,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.server.generator.TerrainGenerator: void <clinit>()>
<net.sf.freecol.server.generator.TerrainGenerator: void <init>(net.sf.freecol.common.option.OptionGroup,java.util.Random)>
<net.sf.freecol.server.generator.TerrainGenerator: void encodeStyle(net.sf.freecol.common.model.Tile)>
<net.sf.freecol.server.model.ServerGame: java.lang.Object makeServerObject(java.lang.String,java.lang.String)>
<net.sf.freecol.server.model.ServerGame: java.lang.String getNextID()>
<net.sf.freecol.server.model.ServerGame: void <clinit>()>
<net.sf.freecol.server.model.ServerGame: void <init>(net.sf.freecol.common.model.FreeColGameObjectListener,javax.xml.stream.XMLStreamReader,java.util.List,net.sf.freecol.common.model.Specification)>
<net.sf.freecol.server.model.ServerGame: void <init>(net.sf.freecol.common.model.Specification)>
<net.sf.freecol.server.model.TransactionSession: void <clinit>()>
<net.sf.freecol.server.model.TransactionSession: void clearAll()>
<net.sf.freecol.server.networking.DummyConnection: void <init>(java.lang.String,net.sf.freecol.common.networking.MessageHandler)>
<net.sf.freecol.server.networking.DummyConnection: void setOutgoingMessageHandler(net.sf.freecol.common.networking.MessageHandler)>
<net.sf.freecol.server.networking.DummyConnection: void setOutgoingMessageHandler(net.sf.freecol.server.networking.DummyConnection)>
<net.sf.freecol.server.networking.Server: void <clinit>()>
<net.sf.freecol.server.networking.Server: void <init>(net.sf.freecol.server.FreeColServer,int)>
<net.sf.freecol.server.networking.Server: void addDummyConnection(net.sf.freecol.common.networking.Connection)>
<net.sf.freecol.server.networking.Server: void shutdown()>
<org.apache.commons.cli.AmbiguousOptionException: java.lang.String createMessage(java.lang.String,java.util.Collection)>
<org.apache.commons.cli.AmbiguousOptionException: void <init>(java.lang.String,java.util.Collection)>
<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>
<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>
<org.apache.commons.cli.CommandLine: java.lang.String[] getOptionValues(java.lang.String)>
<org.apache.commons.cli.CommandLine: org.apache.commons.cli.Option resolveOption(java.lang.String)>
<org.apache.commons.cli.CommandLine: void <init>()>
<org.apache.commons.cli.CommandLine: void addArg(java.lang.String)>
<org.apache.commons.cli.CommandLine: void addOption(org.apache.commons.cli.Option)>
<org.apache.commons.cli.HelpFormatter$OptionComparator: void <init>()>
<org.apache.commons.cli.HelpFormatter$OptionComparator: void <init>(org.apache.commons.cli.HelpFormatter$1)>
<org.apache.commons.cli.HelpFormatter: int findWrapPos(java.lang.String,int,int)>
<org.apache.commons.cli.HelpFormatter: int getDescPadding()>
<org.apache.commons.cli.HelpFormatter: int getLeftPadding()>
<org.apache.commons.cli.HelpFormatter: int getWidth()>
<org.apache.commons.cli.HelpFormatter: java.lang.Appendable renderWrappedTextBlock(java.lang.StringBuffer,int,int,java.lang.String)>
<org.apache.commons.cli.HelpFormatter: java.lang.String createPadding(int)>
<org.apache.commons.cli.HelpFormatter: java.lang.String getArgName()>
<org.apache.commons.cli.HelpFormatter: java.lang.String getLongOptPrefix()>
<org.apache.commons.cli.HelpFormatter: java.lang.String getNewLine()>
<org.apache.commons.cli.HelpFormatter: java.lang.String getOptPrefix()>
<org.apache.commons.cli.HelpFormatter: java.lang.String getSyntaxPrefix()>
<org.apache.commons.cli.HelpFormatter: java.lang.String rtrim(java.lang.String)>
<org.apache.commons.cli.HelpFormatter: java.lang.StringBuffer renderOptions(java.lang.StringBuffer,int,org.apache.commons.cli.Options,int,int)>
<org.apache.commons.cli.HelpFormatter: java.lang.StringBuffer renderWrappedText(java.lang.StringBuffer,int,int,java.lang.String)>
<org.apache.commons.cli.HelpFormatter: java.util.Comparator getOptionComparator()>
<org.apache.commons.cli.HelpFormatter: void <init>()>
<org.apache.commons.cli.HelpFormatter: void appendOption(java.lang.StringBuffer,org.apache.commons.cli.Option,boolean)>
<org.apache.commons.cli.HelpFormatter: void appendOptionGroup(java.lang.StringBuffer,org.apache.commons.cli.OptionGroup)>
<org.apache.commons.cli.HelpFormatter: void printHelp(int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String,boolean)>
<org.apache.commons.cli.HelpFormatter: void printHelp(java.io.PrintWriter,int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,int,int,java.lang.String,boolean)>
<org.apache.commons.cli.HelpFormatter: void printHelp(java.lang.String,org.apache.commons.cli.Options)>
<org.apache.commons.cli.HelpFormatter: void printOptions(java.io.PrintWriter,int,org.apache.commons.cli.Options,int,int)>
<org.apache.commons.cli.HelpFormatter: void printUsage(java.io.PrintWriter,int,java.lang.String)>
<org.apache.commons.cli.HelpFormatter: void printUsage(java.io.PrintWriter,int,java.lang.String,org.apache.commons.cli.Options)>
<org.apache.commons.cli.HelpFormatter: void printWrapped(java.io.PrintWriter,int,int,java.lang.String)>
<org.apache.commons.cli.HelpFormatter: void printWrapped(java.io.PrintWriter,int,java.lang.String)>
<org.apache.commons.cli.MissingArgumentException: void <init>(java.lang.String)>
<org.apache.commons.cli.MissingArgumentException: void <init>(org.apache.commons.cli.Option)>
<org.apache.commons.cli.MissingOptionException: java.lang.String createMessage(java.util.List)>
<org.apache.commons.cli.MissingOptionException: void <init>(java.lang.String)>
<org.apache.commons.cli.MissingOptionException: void <init>(java.util.List)>
<org.apache.commons.cli.Option: boolean hasLongOpt()>
<org.apache.commons.cli.Option: boolean isRequired()>
<org.apache.commons.cli.Option: java.lang.String getKey()>
<org.apache.commons.cli.Option: java.lang.String getLongOpt()>
<org.apache.commons.cli.Option: void <init>(java.lang.String,java.lang.String)>
<org.apache.commons.cli.Option: void <init>(java.lang.String,java.lang.String,boolean,java.lang.String)>
<org.apache.commons.cli.Option: void setArgName(java.lang.String)>
<org.apache.commons.cli.Option: void setArgs(int)>
<org.apache.commons.cli.Option: void setLongOpt(java.lang.String)>
<org.apache.commons.cli.Option: void setOptionalArg(boolean)>
<org.apache.commons.cli.Option: void setRequired(boolean)>
<org.apache.commons.cli.Option: void setType(java.lang.Class)>
<org.apache.commons.cli.Option: void setValueSeparator(char)>
<org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create()>
<org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(java.lang.String)>
<org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg()>
<org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasOptionalArg()>
<org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>
<org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>
<org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>
<org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withType(java.lang.Class)>
<org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withType(java.lang.Object)>
<org.apache.commons.cli.OptionBuilder: void <clinit>()>
<org.apache.commons.cli.OptionBuilder: void <init>()>
<org.apache.commons.cli.OptionBuilder: void reset()>
<org.apache.commons.cli.OptionValidator: boolean isValidChar(char)>
<org.apache.commons.cli.OptionValidator: boolean isValidOpt(char)>
<org.apache.commons.cli.OptionValidator: void validateOption(java.lang.String)>
<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>
<org.apache.commons.cli.Options: java.util.Collection getOptionGroups()>
<org.apache.commons.cli.Options: java.util.Collection getOptions()>
<org.apache.commons.cli.Options: java.util.List getMatchingOptions(java.lang.String)>
<org.apache.commons.cli.Options: java.util.List getRequiredOptions()>
<org.apache.commons.cli.Options: java.util.List helpOptions()>
<org.apache.commons.cli.Options: org.apache.commons.cli.Option getOption(java.lang.String)>
<org.apache.commons.cli.Options: org.apache.commons.cli.OptionGroup getOptionGroup(org.apache.commons.cli.Option)>
<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>
<org.apache.commons.cli.Options: void <init>()>
<org.apache.commons.cli.ParseException: void <init>(java.lang.String)>
<org.apache.commons.cli.Parser: java.util.List getRequiredOptions()>
<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[])>
<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[],java.util.Properties,boolean)>
<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>
<org.apache.commons.cli.Parser: void <init>()>
<org.apache.commons.cli.Parser: void checkRequiredOptions()>
<org.apache.commons.cli.Parser: void processArgs(org.apache.commons.cli.Option,java.util.ListIterator)>
<org.apache.commons.cli.Parser: void processOption(java.lang.String,java.util.ListIterator)>
<org.apache.commons.cli.Parser: void processProperties(java.util.Properties)>
<org.apache.commons.cli.Parser: void setOptions(org.apache.commons.cli.Options)>
<org.apache.commons.cli.Parser: void updateRequiredOptions(org.apache.commons.cli.Option)>
<org.apache.commons.cli.PosixParser: java.lang.String[] flatten(org.apache.commons.cli.Options,java.lang.String[],boolean)>
<org.apache.commons.cli.PosixParser: void <init>()>
<org.apache.commons.cli.PosixParser: void burstToken(java.lang.String,boolean)>
<org.apache.commons.cli.PosixParser: void gobble(java.util.Iterator)>
<org.apache.commons.cli.PosixParser: void init()>
<org.apache.commons.cli.PosixParser: void processNonOptionToken(java.lang.String,boolean)>
<org.apache.commons.cli.PosixParser: void processOptionToken(java.lang.String,boolean)>
<org.apache.commons.cli.UnrecognizedOptionException: void <init>(java.lang.String)>
<org.apache.commons.cli.UnrecognizedOptionException: void <init>(java.lang.String,java.lang.String)>
<org.apache.commons.cli.Util: java.lang.String stripLeadingAndTrailingQuotes(java.lang.String)>
<org.apache.commons.cli.Util: java.lang.String stripLeadingHyphens(java.lang.String)>
